var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i3 = decorators.length - 1, decorator; i3 >= 0; i3--)
    if (decorator = decorators[i3])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};

// node_modules/lodash/lodash.js
var require_lodash = __commonJS({
  "node_modules/lodash/lodash.js"(exports, module) {
    (function() {
      var undefined2;
      var VERSION = "4.17.21";
      var LARGE_ARRAY_SIZE = 200;
      var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var MAX_MEMOIZE_SIZE = 500;
      var PLACEHOLDER = "__lodash_placeholder__";
      var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
      var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
      var HOT_COUNT = 800, HOT_SPAN = 16;
      var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
      var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
      var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
      var wrapFlags = [
        ["ary", WRAP_ARY_FLAG],
        ["bind", WRAP_BIND_FLAG],
        ["bindKey", WRAP_BIND_KEY_FLAG],
        ["curry", WRAP_CURRY_FLAG],
        ["curryRight", WRAP_CURRY_RIGHT_FLAG],
        ["flip", WRAP_FLIP_FLAG],
        ["partial", WRAP_PARTIAL_FLAG],
        ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
        ["rearg", WRAP_REARG_FLAG]
      ];
      var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
      var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
      var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
      var reTrimStart = /^\s+/;
      var reWhitespace = /\s/;
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
      var reEscapeChar = /\\(\\)?/g;
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      var reFlags = /\w*$/;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsOctal = /^0o[0-7]+$/i;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var reNoMatch = /($^)/;
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reApos = RegExp(rsApos, "g");
      var reComboMark = RegExp(rsCombo, "g");
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
        rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
        rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
        rsUpper + "+" + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join("|"), "g");
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var contextProps = [
        "Array",
        "Buffer",
        "DataView",
        "Date",
        "Error",
        "Float32Array",
        "Float64Array",
        "Function",
        "Int8Array",
        "Int16Array",
        "Int32Array",
        "Map",
        "Math",
        "Object",
        "Promise",
        "RegExp",
        "Set",
        "String",
        "Symbol",
        "TypeError",
        "Uint8Array",
        "Uint8ClampedArray",
        "Uint16Array",
        "Uint32Array",
        "WeakMap",
        "_",
        "clearTimeout",
        "isFinite",
        "parseInt",
        "setTimeout"
      ];
      var templateCounter = -1;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
      var deburredLetters = {
        // Latin-1 Supplement block.
        "\xC0": "A",
        "\xC1": "A",
        "\xC2": "A",
        "\xC3": "A",
        "\xC4": "A",
        "\xC5": "A",
        "\xE0": "a",
        "\xE1": "a",
        "\xE2": "a",
        "\xE3": "a",
        "\xE4": "a",
        "\xE5": "a",
        "\xC7": "C",
        "\xE7": "c",
        "\xD0": "D",
        "\xF0": "d",
        "\xC8": "E",
        "\xC9": "E",
        "\xCA": "E",
        "\xCB": "E",
        "\xE8": "e",
        "\xE9": "e",
        "\xEA": "e",
        "\xEB": "e",
        "\xCC": "I",
        "\xCD": "I",
        "\xCE": "I",
        "\xCF": "I",
        "\xEC": "i",
        "\xED": "i",
        "\xEE": "i",
        "\xEF": "i",
        "\xD1": "N",
        "\xF1": "n",
        "\xD2": "O",
        "\xD3": "O",
        "\xD4": "O",
        "\xD5": "O",
        "\xD6": "O",
        "\xD8": "O",
        "\xF2": "o",
        "\xF3": "o",
        "\xF4": "o",
        "\xF5": "o",
        "\xF6": "o",
        "\xF8": "o",
        "\xD9": "U",
        "\xDA": "U",
        "\xDB": "U",
        "\xDC": "U",
        "\xF9": "u",
        "\xFA": "u",
        "\xFB": "u",
        "\xFC": "u",
        "\xDD": "Y",
        "\xFD": "y",
        "\xFF": "y",
        "\xC6": "Ae",
        "\xE6": "ae",
        "\xDE": "Th",
        "\xFE": "th",
        "\xDF": "ss",
        // Latin Extended-A block.
        "\u0100": "A",
        "\u0102": "A",
        "\u0104": "A",
        "\u0101": "a",
        "\u0103": "a",
        "\u0105": "a",
        "\u0106": "C",
        "\u0108": "C",
        "\u010A": "C",
        "\u010C": "C",
        "\u0107": "c",
        "\u0109": "c",
        "\u010B": "c",
        "\u010D": "c",
        "\u010E": "D",
        "\u0110": "D",
        "\u010F": "d",
        "\u0111": "d",
        "\u0112": "E",
        "\u0114": "E",
        "\u0116": "E",
        "\u0118": "E",
        "\u011A": "E",
        "\u0113": "e",
        "\u0115": "e",
        "\u0117": "e",
        "\u0119": "e",
        "\u011B": "e",
        "\u011C": "G",
        "\u011E": "G",
        "\u0120": "G",
        "\u0122": "G",
        "\u011D": "g",
        "\u011F": "g",
        "\u0121": "g",
        "\u0123": "g",
        "\u0124": "H",
        "\u0126": "H",
        "\u0125": "h",
        "\u0127": "h",
        "\u0128": "I",
        "\u012A": "I",
        "\u012C": "I",
        "\u012E": "I",
        "\u0130": "I",
        "\u0129": "i",
        "\u012B": "i",
        "\u012D": "i",
        "\u012F": "i",
        "\u0131": "i",
        "\u0134": "J",
        "\u0135": "j",
        "\u0136": "K",
        "\u0137": "k",
        "\u0138": "k",
        "\u0139": "L",
        "\u013B": "L",
        "\u013D": "L",
        "\u013F": "L",
        "\u0141": "L",
        "\u013A": "l",
        "\u013C": "l",
        "\u013E": "l",
        "\u0140": "l",
        "\u0142": "l",
        "\u0143": "N",
        "\u0145": "N",
        "\u0147": "N",
        "\u014A": "N",
        "\u0144": "n",
        "\u0146": "n",
        "\u0148": "n",
        "\u014B": "n",
        "\u014C": "O",
        "\u014E": "O",
        "\u0150": "O",
        "\u014D": "o",
        "\u014F": "o",
        "\u0151": "o",
        "\u0154": "R",
        "\u0156": "R",
        "\u0158": "R",
        "\u0155": "r",
        "\u0157": "r",
        "\u0159": "r",
        "\u015A": "S",
        "\u015C": "S",
        "\u015E": "S",
        "\u0160": "S",
        "\u015B": "s",
        "\u015D": "s",
        "\u015F": "s",
        "\u0161": "s",
        "\u0162": "T",
        "\u0164": "T",
        "\u0166": "T",
        "\u0163": "t",
        "\u0165": "t",
        "\u0167": "t",
        "\u0168": "U",
        "\u016A": "U",
        "\u016C": "U",
        "\u016E": "U",
        "\u0170": "U",
        "\u0172": "U",
        "\u0169": "u",
        "\u016B": "u",
        "\u016D": "u",
        "\u016F": "u",
        "\u0171": "u",
        "\u0173": "u",
        "\u0174": "W",
        "\u0175": "w",
        "\u0176": "Y",
        "\u0177": "y",
        "\u0178": "Y",
        "\u0179": "Z",
        "\u017B": "Z",
        "\u017D": "Z",
        "\u017A": "z",
        "\u017C": "z",
        "\u017E": "z",
        "\u0132": "IJ",
        "\u0133": "ij",
        "\u0152": "Oe",
        "\u0153": "oe",
        "\u0149": "'n",
        "\u017F": "s"
      };
      var htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
      };
      var htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
      };
      var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
      };
      var freeParseFloat = parseFloat, freeParseInt = parseInt;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root2 = freeGlobal || freeSelf || Function("return this")();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e4) {
        }
      }();
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function arrayAggregator(array2, setter, iteratee, accumulator) {
        var index = -1, length = array2 == null ? 0 : array2.length;
        while (++index < length) {
          var value = array2[index];
          setter(accumulator, value, iteratee(value), array2);
        }
        return accumulator;
      }
      function arrayEach(array2, iteratee) {
        var index = -1, length = array2 == null ? 0 : array2.length;
        while (++index < length) {
          if (iteratee(array2[index], index, array2) === false) {
            break;
          }
        }
        return array2;
      }
      function arrayEachRight(array2, iteratee) {
        var length = array2 == null ? 0 : array2.length;
        while (length--) {
          if (iteratee(array2[length], length, array2) === false) {
            break;
          }
        }
        return array2;
      }
      function arrayEvery(array2, predicate) {
        var index = -1, length = array2 == null ? 0 : array2.length;
        while (++index < length) {
          if (!predicate(array2[index], index, array2)) {
            return false;
          }
        }
        return true;
      }
      function arrayFilter(array2, predicate) {
        var index = -1, length = array2 == null ? 0 : array2.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array2[index];
          if (predicate(value, index, array2)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayIncludes(array2, value) {
        var length = array2 == null ? 0 : array2.length;
        return !!length && baseIndexOf(array2, value, 0) > -1;
      }
      function arrayIncludesWith(array2, value, comparator) {
        var index = -1, length = array2 == null ? 0 : array2.length;
        while (++index < length) {
          if (comparator(value, array2[index])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap(array2, iteratee) {
        var index = -1, length = array2 == null ? 0 : array2.length, result = Array(length);
        while (++index < length) {
          result[index] = iteratee(array2[index], index, array2);
        }
        return result;
      }
      function arrayPush(array2, values) {
        var index = -1, length = values.length, offset = array2.length;
        while (++index < length) {
          array2[offset + index] = values[index];
        }
        return array2;
      }
      function arrayReduce(array2, iteratee, accumulator, initAccum) {
        var index = -1, length = array2 == null ? 0 : array2.length;
        if (initAccum && length) {
          accumulator = array2[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array2[index], index, array2);
        }
        return accumulator;
      }
      function arrayReduceRight(array2, iteratee, accumulator, initAccum) {
        var length = array2 == null ? 0 : array2.length;
        if (initAccum && length) {
          accumulator = array2[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array2[length], length, array2);
        }
        return accumulator;
      }
      function arraySome(array2, predicate) {
        var index = -1, length = array2 == null ? 0 : array2.length;
        while (++index < length) {
          if (predicate(array2[index], index, array2)) {
            return true;
          }
        }
        return false;
      }
      var asciiSize = baseProperty("length");
      function asciiToArray(string) {
        return string.split("");
      }
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection2) {
          if (predicate(value, key, collection2)) {
            result = key;
            return false;
          }
        });
        return result;
      }
      function baseFindIndex(array2, predicate, fromIndex, fromRight) {
        var length = array2.length, index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length) {
          if (predicate(array2[index], index, array2)) {
            return index;
          }
        }
        return -1;
      }
      function baseIndexOf(array2, value, fromIndex) {
        return value === value ? strictIndexOf(array2, value, fromIndex) : baseFindIndex(array2, baseIsNaN, fromIndex);
      }
      function baseIndexOfWith(array2, value, fromIndex, comparator) {
        var index = fromIndex - 1, length = array2.length;
        while (++index < length) {
          if (comparator(array2[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function baseMean(array2, iteratee) {
        var length = array2 == null ? 0 : array2.length;
        return length ? baseSum(array2, iteratee) / length : NAN;
      }
      function baseProperty(key) {
        return function(object) {
          return object == null ? undefined2 : object[key];
        };
      }
      function basePropertyOf(object) {
        return function(key) {
          return object == null ? undefined2 : object[key];
        };
      }
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index, collection2) {
          accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
        });
        return accumulator;
      }
      function baseSortBy(array2, comparer) {
        var length = array2.length;
        array2.sort(comparer);
        while (length--) {
          array2[length] = array2[length].value;
        }
        return array2;
      }
      function baseSum(array2, iteratee) {
        var result, index = -1, length = array2.length;
        while (++index < length) {
          var current = iteratee(array2[index]);
          if (current !== undefined2) {
            result = result === undefined2 ? current : result + current;
          }
        }
        return result;
      }
      function baseTimes(n5, iteratee) {
        var index = -1, result = Array(n5);
        while (++index < n5) {
          result[index] = iteratee(index);
        }
        return result;
      }
      function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
          return [key, object[key]];
        });
      }
      function baseTrim(string) {
        return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      function baseValues(object, props) {
        return arrayMap(props, function(key) {
          return object[key];
        });
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length = strSymbols.length;
        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function countHolders(array2, placeholder) {
        var length = array2.length, result = 0;
        while (length--) {
          if (array2[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
      function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
      }
      function getValue(object, key) {
        return object == null ? undefined2 : object[key];
      }
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }
      function iteratorToArray(iterator) {
        var data, result = [];
        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }
      function mapToArray(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
      function overArg(func, transform2) {
        return function(arg) {
          return func(transform2(arg));
        };
      }
      function replaceHolders(array2, placeholder) {
        var index = -1, length = array2.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array2[index];
          if (value === placeholder || value === PLACEHOLDER) {
            array2[index] = PLACEHOLDER;
            result[resIndex++] = index;
          }
        }
        return result;
      }
      function setToArray(set3) {
        var index = -1, result = Array(set3.size);
        set3.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
      function setToPairs(set3) {
        var index = -1, result = Array(set3.size);
        set3.forEach(function(value) {
          result[++index] = [value, value];
        });
        return result;
      }
      function strictIndexOf(array2, value, fromIndex) {
        var index = fromIndex - 1, length = array2.length;
        while (++index < length) {
          if (array2[index] === value) {
            return index;
          }
        }
        return -1;
      }
      function strictLastIndexOf(array2, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
          if (array2[index] === value) {
            return index;
          }
        }
        return index;
      }
      function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
      }
      function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
      }
      function trimmedEndIndex(string) {
        var index = string.length;
        while (index-- && reWhitespace.test(string.charAt(index))) {
        }
        return index;
      }
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
      function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string)) {
          ++result;
        }
        return result;
      }
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }
      var runInContext = function runInContext2(context) {
        context = context == null ? root2 : _2.defaults(root2.Object(), context, _2.pick(root2, contextProps));
        var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
        var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
        var coreJsData = context["__core-js_shared__"];
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey = function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
          return uid ? "Symbol(src)_1." + uid : "";
        }();
        var nativeObjectToString = objectProto.toString;
        var objectCtorString = funcToString.call(Object2);
        var oldDash = root2._;
        var reIsNative = RegExp2(
          "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
        );
        var Buffer2 = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
        var defineProperty = function() {
          try {
            var func = getNative(Object2, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e4) {
          }
        }();
        var ctxClearTimeout = context.clearTimeout !== root2.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root2.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root2.setTimeout && context.setTimeout;
        var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
        var DataView = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
        var metaMap = WeakMap2 && new WeakMap2();
        var realNames = {};
        var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
        var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
        function lodash(value) {
          if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty.call(value, "__wrapped__")) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
        var baseCreate = /* @__PURE__ */ function() {
          function object() {
          }
          return function(proto) {
            if (!isObject(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result2 = new object();
            object.prototype = undefined2;
            return result2;
          };
        }();
        function baseLodash() {
        }
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined2;
        }
        lodash.templateSettings = {
          /**
           * Used to detect `data` property values to be HTML-escaped.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "escape": reEscape,
          /**
           * Used to detect code to be evaluated.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "evaluate": reEvaluate,
          /**
           * Used to detect `data` property values to inject.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "interpolate": reInterpolate,
          /**
           * Used to reference the data object in the template text.
           *
           * @memberOf _.templateSettings
           * @type {string}
           */
          "variable": "",
          /**
           * Used to import variables into the compiled template.
           *
           * @memberOf _.templateSettings
           * @type {Object}
           */
          "imports": {
            /**
             * A reference to the `lodash` function.
             *
             * @memberOf _.templateSettings.imports
             * @type {Function}
             */
            "_": lodash
          }
        };
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
        function lazyClone() {
          var result2 = new LazyWrapper(this.__wrapped__);
          result2.__actions__ = copyArray(this.__actions__);
          result2.__dir__ = this.__dir__;
          result2.__filtered__ = this.__filtered__;
          result2.__iteratees__ = copyArray(this.__iteratees__);
          result2.__takeCount__ = this.__takeCount__;
          result2.__views__ = copyArray(this.__views__);
          return result2;
        }
        function lazyReverse() {
          if (this.__filtered__) {
            var result2 = new LazyWrapper(this);
            result2.__dir__ = -1;
            result2.__filtered__ = true;
          } else {
            result2 = this.clone();
            result2.__dir__ *= -1;
          }
          return result2;
        }
        function lazyValue() {
          var array2 = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array2), isRight = dir < 0, arrLength = isArr ? array2.length : 0, view = getView(0, arrLength, this.__views__), start2 = view.start, end = view.end, length = end - start2, index = isRight ? end : start2 - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
          if (!isArr || !isRight && arrLength == length && takeCount == length) {
            return baseWrapperValue(array2, this.__actions__);
          }
          var result2 = [];
          outer:
            while (length-- && resIndex < takeCount) {
              index += dir;
              var iterIndex = -1, value = array2[index];
              while (++iterIndex < iterLength) {
                var data = iteratees[iterIndex], iteratee2 = data.iteratee, type2 = data.type, computed = iteratee2(value);
                if (type2 == LAZY_MAP_FLAG) {
                  value = computed;
                } else if (!computed) {
                  if (type2 == LAZY_FILTER_FLAG) {
                    continue outer;
                  } else {
                    break outer;
                  }
                }
              }
              result2[resIndex++] = value;
            }
          return result2;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
        function hashDelete(key) {
          var result2 = this.has(key) && delete this.__data__[key];
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result2 = data[key];
            return result2 === HASH_UNDEFINED ? undefined2 : result2;
          }
          return hasOwnProperty.call(data, key) ? data[key] : undefined2;
        }
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? data[key] !== undefined2 : hasOwnProperty.call(data, key);
        }
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
          return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          return index < 0 ? undefined2 : data[index][1];
        }
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            "hash": new Hash(),
            "map": new (Map2 || ListCache)(),
            "string": new Hash()
          };
        }
        function mapCacheDelete(key) {
          var result2 = getMapData(this, key)["delete"](key);
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
          var data = getMapData(this, key), size2 = data.size;
          data.set(key, value);
          this.size += data.size == size2 ? 0 : 1;
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values2) {
          var index = -1, length = values2 == null ? 0 : values2.length;
          this.__data__ = new MapCache();
          while (++index < length) {
            this.add(values2[index]);
          }
        }
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }
        function stackDelete(key) {
          var data = this.__data__, result2 = data["delete"](key);
          this.size = data.size;
          return result2;
        }
        function stackGet(key) {
          return this.__data__.get(key);
        }
        function stackHas(key) {
          return this.__data__.has(key);
        }
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
          for (var key in value) {
            if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
            (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
            isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
            isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
            isIndex(key, length)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function arraySample(array2) {
          var length = array2.length;
          return length ? array2[baseRandom(0, length - 1)] : undefined2;
        }
        function arraySampleSize(array2, n5) {
          return shuffleSelf(copyArray(array2), baseClamp(n5, 0, array2.length));
        }
        function arrayShuffle(array2) {
          return shuffleSelf(copyArray(array2));
        }
        function assignMergeValue(object, key, value) {
          if (value !== undefined2 && !eq(object[key], value) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assocIndexOf(array2, key) {
          var length = array2.length;
          while (length--) {
            if (eq(array2[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        function baseAggregator(collection, setter, iteratee2, accumulator) {
          baseEach(collection, function(value, key, collection2) {
            setter(accumulator, value, iteratee2(value), collection2);
          });
          return accumulator;
        }
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }
        function baseAssignValue(object, key, value) {
          if (key == "__proto__" && defineProperty) {
            defineProperty(object, key, {
              "configurable": true,
              "enumerable": true,
              "value": value,
              "writable": true
            });
          } else {
            object[key] = value;
          }
        }
        function baseAt(object, paths) {
          var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
          while (++index < length) {
            result2[index] = skip ? undefined2 : get3(object, paths[index]);
          }
          return result2;
        }
        function baseClamp(number, lower2, upper) {
          if (number === number) {
            if (upper !== undefined2) {
              number = number <= upper ? number : upper;
            }
            if (lower2 !== undefined2) {
              number = number >= lower2 ? number : lower2;
            }
          }
          return number;
        }
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
          if (customizer) {
            result2 = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result2 !== undefined2) {
            return result2;
          }
          if (!isObject(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result2 = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result2);
            }
          } else {
            var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || isFunc && !object) {
              result2 = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result2 = initCloneByTag(value, tag, isDeep);
            }
          }
          stack || (stack = new Stack());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result2);
          if (isSet(value)) {
            value.forEach(function(subValue) {
              result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key2) {
              result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
          }
          var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
          var props = isArr ? undefined2 : keysFunc(value);
          arrayEach(props || value, function(subValue, key2) {
            if (props) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
          return result2;
        }
        function baseConforms(source) {
          var props = keys(source);
          return function(object) {
            return baseConformsTo(object, source, props);
          };
        }
        function baseConformsTo(object, source, props) {
          var length = props.length;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (length--) {
            var key = props[length], predicate = source[key], value = object[key];
            if (value === undefined2 && !(key in object) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }
        function baseDelay(func, wait, args) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return setTimeout2(function() {
            func.apply(undefined2, args);
          }, wait);
        }
        function baseDifference(array2, values2, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, isCommon = true, length = array2.length, result2 = [], valuesLength = values2.length;
          if (!length) {
            return result2;
          }
          if (iteratee2) {
            values2 = arrayMap(values2, baseUnary(iteratee2));
          }
          if (comparator) {
            includes2 = arrayIncludesWith;
            isCommon = false;
          } else if (values2.length >= LARGE_ARRAY_SIZE) {
            includes2 = cacheHas;
            isCommon = false;
            values2 = new SetCache(values2);
          }
          outer:
            while (++index < length) {
              var value = array2[index], computed = iteratee2 == null ? value : iteratee2(value);
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var valuesIndex = valuesLength;
                while (valuesIndex--) {
                  if (values2[valuesIndex] === computed) {
                    continue outer;
                  }
                }
                result2.push(value);
              } else if (!includes2(values2, computed, comparator)) {
                result2.push(value);
              }
            }
          return result2;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
          var result2 = true;
          baseEach(collection, function(value, index, collection2) {
            result2 = !!predicate(value, index, collection2);
            return result2;
          });
          return result2;
        }
        function baseExtremum(array2, iteratee2, comparator) {
          var index = -1, length = array2.length;
          while (++index < length) {
            var value = array2[index], current = iteratee2(value);
            if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
              var computed = current, result2 = value;
            }
          }
          return result2;
        }
        function baseFill(array2, value, start2, end) {
          var length = array2.length;
          start2 = toInteger(start2);
          if (start2 < 0) {
            start2 = -start2 > length ? 0 : length + start2;
          }
          end = end === undefined2 || end > length ? length : toInteger(end);
          if (end < 0) {
            end += length;
          }
          end = start2 > end ? 0 : toLength(end);
          while (start2 < end) {
            array2[start2++] = value;
          }
          return array2;
        }
        function baseFilter(collection, predicate) {
          var result2 = [];
          baseEach(collection, function(value, index, collection2) {
            if (predicate(value, index, collection2)) {
              result2.push(value);
            }
          });
          return result2;
        }
        function baseFlatten(array2, depth, predicate, isStrict, result2) {
          var index = -1, length = array2.length;
          predicate || (predicate = isFlattenable);
          result2 || (result2 = []);
          while (++index < length) {
            var value = array2[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result2);
              } else {
                arrayPush(result2, value);
              }
            } else if (!isStrict) {
              result2[result2.length] = value;
            }
          }
          return result2;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object, iteratee2) {
          return object && baseFor(object, iteratee2, keys);
        }
        function baseForOwnRight(object, iteratee2) {
          return object && baseForRight(object, iteratee2, keys);
        }
        function baseFunctions(object, props) {
          return arrayFilter(props, function(key) {
            return isFunction(object[key]);
          });
        }
        function baseGet(object, path) {
          path = castPath(path, object);
          var index = 0, length = path.length;
          while (object != null && index < length) {
            object = object[toKey(path[index++])];
          }
          return index && index == length ? object : undefined2;
        }
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result2 = keysFunc(object);
          return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
        }
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined2 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
        }
        function baseGt(value, other) {
          return value > other;
        }
        function baseHas(object, key) {
          return object != null && hasOwnProperty.call(object, key);
        }
        function baseHasIn(object, key) {
          return object != null && key in Object2(object);
        }
        function baseInRange(number, start2, end) {
          return number >= nativeMin(start2, end) && number < nativeMax(start2, end);
        }
        function baseIntersection(arrays, iteratee2, comparator) {
          var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
          while (othIndex--) {
            var array2 = arrays[othIndex];
            if (othIndex && iteratee2) {
              array2 = arrayMap(array2, baseUnary(iteratee2));
            }
            maxLength = nativeMin(array2.length, maxLength);
            caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array2.length >= 120) ? new SetCache(othIndex && array2) : undefined2;
          }
          array2 = arrays[0];
          var index = -1, seen = caches[0];
          outer:
            while (++index < length && result2.length < maxLength) {
              var value = array2[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                othIndex = othLength;
                while (--othIndex) {
                  var cache = caches[othIndex];
                  if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                    continue outer;
                  }
                }
                if (seen) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseInverter(object, setter, iteratee2, accumulator) {
          baseForOwn(object, function(value, key, object2) {
            setter(accumulator, iteratee2(value), key, object2);
          });
          return accumulator;
        }
        function baseInvoke(object, path, args) {
          path = castPath(path, object);
          object = parent(object, path);
          var func = object == null ? object : object[toKey(last(path))];
          return func == null ? undefined2 : apply(func, object, args);
        }
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack());
            return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack());
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack());
          return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object, source, matchData, customizer) {
          var index = matchData.length, length = index, noCustomizer = !customizer;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (index--) {
            var data = matchData[index];
            if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0], objValue = object[key], srcValue = data[1];
            if (noCustomizer && data[2]) {
              if (objValue === undefined2 && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack();
              if (customizer) {
                var result2 = customizer(objValue, srcValue, key, object, source, stack);
              }
              if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                return false;
              }
            }
          }
          return true;
        }
        function baseIsNative(value) {
          if (!isObject(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
          return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        function baseIteratee(value) {
          if (typeof value == "function") {
            return value;
          }
          if (value == null) {
            return identity3;
          }
          if (typeof value == "object") {
            return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
          }
          return property(value);
        }
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result2 = [];
          for (var key in Object2(object)) {
            if (hasOwnProperty.call(object, key) && key != "constructor") {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseKeysIn(object) {
          if (!isObject(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object), result2 = [];
          for (var key in object) {
            if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseLt(value, other) {
          return value < other;
        }
        function baseMap(collection, iteratee2) {
          var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value, key, collection2) {
            result2[++index] = iteratee2(value, key, collection2);
          });
          return result2;
        }
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function(object) {
            var objValue = get3(object, path);
            return objValue === undefined2 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack());
            if (isObject(srcValue)) {
              baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
            } else {
              var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
              if (newValue === undefined2) {
                newValue = srcValue;
              }
              assignMergeValue(object, key, newValue);
            }
          }, keysIn);
        }
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
          var isCommon = newValue === undefined2;
          if (isCommon) {
            var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject(objValue) || isFunction(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack["delete"](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }
        function baseNth(array2, n5) {
          var length = array2.length;
          if (!length) {
            return;
          }
          n5 += n5 < 0 ? length : 0;
          return isIndex(n5, length) ? array2[n5] : undefined2;
        }
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function(iteratee2) {
              if (isArray(iteratee2)) {
                return function(value) {
                  return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                };
              }
              return iteratee2;
            });
          } else {
            iteratees = [identity3];
          }
          var index = -1;
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          var result2 = baseMap(collection, function(value, key, collection2) {
            var criteria = arrayMap(iteratees, function(iteratee2) {
              return iteratee2(value);
            });
            return { "criteria": criteria, "index": ++index, "value": value };
          });
          return baseSortBy(result2, function(object, other) {
            return compareMultiple(object, other, orders);
          });
        }
        function basePick(object, paths) {
          return basePickBy(object, paths, function(value, path) {
            return hasIn(object, path);
          });
        }
        function basePickBy(object, paths, predicate) {
          var index = -1, length = paths.length, result2 = {};
          while (++index < length) {
            var path = paths[index], value = baseGet(object, path);
            if (predicate(value, path)) {
              baseSet(result2, castPath(path, object), value);
            }
          }
          return result2;
        }
        function basePropertyDeep(path) {
          return function(object) {
            return baseGet(object, path);
          };
        }
        function basePullAll(array2, values2, iteratee2, comparator) {
          var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array2;
          if (array2 === values2) {
            values2 = copyArray(values2);
          }
          if (iteratee2) {
            seen = arrayMap(array2, baseUnary(iteratee2));
          }
          while (++index < length) {
            var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
            while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
              if (seen !== array2) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array2, fromIndex, 1);
            }
          }
          return array2;
        }
        function basePullAt(array2, indexes) {
          var length = array2 ? indexes.length : 0, lastIndex = length - 1;
          while (length--) {
            var index = indexes[length];
            if (length == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex(index)) {
                splice.call(array2, index, 1);
              } else {
                baseUnset(array2, index);
              }
            }
          }
          return array2;
        }
        function baseRandom(lower2, upper) {
          return lower2 + nativeFloor(nativeRandom() * (upper - lower2 + 1));
        }
        function baseRange(start2, end, step, fromRight) {
          var index = -1, length = nativeMax(nativeCeil((end - start2) / (step || 1)), 0), result2 = Array2(length);
          while (length--) {
            result2[fromRight ? length : ++index] = start2;
            start2 += step;
          }
          return result2;
        }
        function baseRepeat(string, n5) {
          var result2 = "";
          if (!string || n5 < 1 || n5 > MAX_SAFE_INTEGER) {
            return result2;
          }
          do {
            if (n5 % 2) {
              result2 += string;
            }
            n5 = nativeFloor(n5 / 2);
            if (n5) {
              string += string;
            }
          } while (n5);
          return result2;
        }
        function baseRest(func, start2) {
          return setToString(overRest(func, start2, identity3), func + "");
        }
        function baseSample(collection) {
          return arraySample(values(collection));
        }
        function baseSampleSize(collection, n5) {
          var array2 = values(collection);
          return shuffleSelf(array2, baseClamp(n5, 0, array2.length));
        }
        function baseSet(object, path, value, customizer) {
          if (!isObject(object)) {
            return object;
          }
          path = castPath(path, object);
          var index = -1, length = path.length, lastIndex = length - 1, nested = object;
          while (nested != null && ++index < length) {
            var key = toKey(path[index]), newValue = value;
            if (key === "__proto__" || key === "constructor" || key === "prototype") {
              return object;
            }
            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined2;
              if (newValue === undefined2) {
                newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object;
        }
        var baseSetData = !metaMap ? identity3 : function(func, data) {
          metaMap.set(func, data);
          return func;
        };
        var baseSetToString = !defineProperty ? identity3 : function(func, string) {
          return defineProperty(func, "toString", {
            "configurable": true,
            "enumerable": false,
            "value": constant(string),
            "writable": true
          });
        };
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }
        function baseSlice(array2, start2, end) {
          var index = -1, length = array2.length;
          if (start2 < 0) {
            start2 = -start2 > length ? 0 : length + start2;
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start2 > end ? 0 : end - start2 >>> 0;
          start2 >>>= 0;
          var result2 = Array2(length);
          while (++index < length) {
            result2[index] = array2[index + start2];
          }
          return result2;
        }
        function baseSome(collection, predicate) {
          var result2;
          baseEach(collection, function(value, index, collection2) {
            result2 = predicate(value, index, collection2);
            return !result2;
          });
          return !!result2;
        }
        function baseSortedIndex(array2, value, retHighest) {
          var low = 0, high = array2 == null ? low : array2.length;
          if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = low + high >>> 1, computed = array2[mid];
              if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array2, value, identity3, retHighest);
        }
        function baseSortedIndexBy(array2, value, iteratee2, retHighest) {
          var low = 0, high = array2 == null ? 0 : array2.length;
          if (high === 0) {
            return 0;
          }
          value = iteratee2(value);
          var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
          while (low < high) {
            var mid = nativeFloor((low + high) / 2), computed = iteratee2(array2[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? computed <= value : computed < value;
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array2, iteratee2) {
          var index = -1, length = array2.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array2[index], computed = iteratee2 ? iteratee2(value) : value;
            if (!index || !eq(computed, seen)) {
              var seen = computed;
              result2[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result2;
        }
        function baseToNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }
        function baseToString(value) {
          if (typeof value == "string") {
            return value;
          }
          if (isArray(value)) {
            return arrayMap(value, baseToString) + "";
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function baseUniq(array2, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, length = array2.length, isCommon = true, result2 = [], seen = result2;
          if (comparator) {
            isCommon = false;
            includes2 = arrayIncludesWith;
          } else if (length >= LARGE_ARRAY_SIZE) {
            var set4 = iteratee2 ? null : createSet(array2);
            if (set4) {
              return setToArray(set4);
            }
            isCommon = false;
            includes2 = cacheHas;
            seen = new SetCache();
          } else {
            seen = iteratee2 ? [] : result2;
          }
          outer:
            while (++index < length) {
              var value = array2[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var seenIndex = seen.length;
                while (seenIndex--) {
                  if (seen[seenIndex] === computed) {
                    continue outer;
                  }
                }
                if (iteratee2) {
                  seen.push(computed);
                }
                result2.push(value);
              } else if (!includes2(seen, computed, comparator)) {
                if (seen !== result2) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseUnset(object, path) {
          path = castPath(path, object);
          object = parent(object, path);
          return object == null || delete object[toKey(last(path))];
        }
        function baseUpdate(object, path, updater, customizer) {
          return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }
        function baseWhile(array2, predicate, isDrop, fromRight) {
          var length = array2.length, index = fromRight ? length : -1;
          while ((fromRight ? index-- : ++index < length) && predicate(array2[index], index, array2)) {
          }
          return isDrop ? baseSlice(array2, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array2, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        function baseWrapperValue(value, actions) {
          var result2 = value;
          if (result2 instanceof LazyWrapper) {
            result2 = result2.value();
          }
          return arrayReduce(actions, function(result3, action) {
            return action.func.apply(action.thisArg, arrayPush([result3], action.args));
          }, result2);
        }
        function baseXor(arrays, iteratee2, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index = -1, result2 = Array2(length);
          while (++index < length) {
            var array2 = arrays[index], othIndex = -1;
            while (++othIndex < length) {
              if (othIndex != index) {
                result2[index] = baseDifference(result2[index] || array2, arrays[othIndex], iteratee2, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
        }
        function baseZipObject(props, values2, assignFunc) {
          var index = -1, length = props.length, valsLength = values2.length, result2 = {};
          while (++index < length) {
            var value = index < valsLength ? values2[index] : undefined2;
            assignFunc(result2, props[index], value);
          }
          return result2;
        }
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
          return typeof value == "function" ? value : identity3;
        }
        function castPath(value, object) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object) ? [value] : stringToPath(toString(value));
        }
        var castRest = baseRest;
        function castSlice(array2, start2, end) {
          var length = array2.length;
          end = end === undefined2 ? length : end;
          return !start2 && end >= length ? array2 : baseSlice(array2, start2, end);
        }
        var clearTimeout2 = ctxClearTimeout || function(id2) {
          return root2.clearTimeout(id2);
        };
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
          buffer.copy(result2);
          return result2;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
          return result2;
        }
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        function cloneRegExp(regexp) {
          var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result2.lastIndex = regexp.lastIndex;
          return result2;
        }
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
            var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
            if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
              return 1;
            }
            if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }
        function compareMultiple(object, other, orders) {
          var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
          while (++index < length) {
            var result2 = compareAscending(objCriteria[index], othCriteria[index]);
            if (result2) {
              if (index >= ordersLength) {
                return result2;
              }
              var order = orders[index];
              return result2 * (order == "desc" ? -1 : 1);
            }
          }
          return object.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
          while (++leftIndex < leftLength) {
            result2[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result2[leftIndex++] = args[argsIndex++];
          }
          return result2;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
          while (++argsIndex < rangeLength) {
            result2[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result2[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result2;
        }
        function copyArray(source, array2) {
          var index = -1, length = source.length;
          array2 || (array2 = Array2(length));
          while (++index < length) {
            array2[index] = source[index];
          }
          return array2;
        }
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});
          var index = -1, length = props.length;
          while (++index < length) {
            var key = props[index];
            var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
            if (newValue === undefined2) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }
        function createAggregator(setter, initializer) {
          return function(collection, iteratee2) {
            var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
            return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
          };
        }
        function createAssigner(assigner) {
          return baseRest(function(object, sources) {
            var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
            customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined2 : customizer;
              length = 1;
            }
            object = Object2(object);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object, source, index, customizer);
              }
            }
            return object;
          });
        }
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee2) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee2);
            }
            var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
            while (fromRight ? index-- : ++index < length) {
              if (iteratee2(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
        function createBaseFor(fromRight) {
          return function(object, iteratee2, keysFunc) {
            var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee2(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var fn = this && this !== root2 && this instanceof wrapper ? Ctor : func;
            return fn.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
        function createCaseFirst(methodName) {
          return function(string) {
            string = toString(string);
            var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
            var chr = strSymbols ? strSymbols[0] : string.charAt(0);
            var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
            return chr[methodName]() + trailing;
          };
        }
        function createCompounder(callback) {
          return function(string) {
            return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
          };
        }
        function createCtor(Ctor) {
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
            return isObject(result2) ? result2 : thisBinding;
          };
        }
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
            while (index--) {
              args[index] = arguments[index];
            }
            var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
            length -= holders.length;
            if (length < arity) {
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                undefined2,
                args,
                holders,
                undefined2,
                undefined2,
                arity - length
              );
            }
            var fn = this && this !== root2 && this instanceof wrapper ? Ctor : func;
            return apply(fn, this, args);
          }
          return wrapper;
        }
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object2(collection);
            if (!isArrayLike(collection)) {
              var iteratee2 = getIteratee(predicate, 3);
              collection = keys(collection);
              predicate = function(key) {
                return iteratee2(iterable[key], key, iterable);
              };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined2;
          };
        }
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func = funcs[index];
              if (typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length;
            while (++index < length) {
              func = funcs[index];
              var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
              if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments, value = args[0];
              if (wrapper && args.length == 1 && isArray(value)) {
                return wrapper.plant(value).value();
              }
              var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
              while (++index2 < length) {
                result2 = funcs[index2].call(this, result2);
              }
              return result2;
            };
          });
        }
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length;
            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                thisArg,
                args,
                newHolders,
                argPos,
                ary2,
                arity - length
              );
            }
            var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary2 < length) {
              args.length = ary2;
            }
            if (this && this !== root2 && this instanceof wrapper) {
              fn = Ctor || createCtor(fn);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }
        function createInverter(setter, toIteratee) {
          return function(object, iteratee2) {
            return baseInverter(object, setter, toIteratee(iteratee2), {});
          };
        }
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result2;
            if (value === undefined2 && other === undefined2) {
              return defaultValue;
            }
            if (value !== undefined2) {
              result2 = value;
            }
            if (other !== undefined2) {
              if (result2 === undefined2) {
                return other;
              }
              if (typeof value == "string" || typeof other == "string") {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result2 = operator(value, other);
            }
            return result2;
          };
        }
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee2) {
                return apply(iteratee2, thisArg, args);
              });
            });
          });
        }
        function createPadding(length, chars) {
          chars = chars === undefined2 ? " " : baseToString(chars);
          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
          return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
        }
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root2 && this instanceof wrapper ? Ctor : func;
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
        function createRange(fromRight) {
          return function(start2, end, step) {
            if (step && typeof step != "number" && isIterateeCall(start2, end, step)) {
              end = step = undefined2;
            }
            start2 = toFinite(start2);
            if (end === undefined2) {
              end = start2;
              start2 = 0;
            } else {
              end = toFinite(end);
            }
            step = step === undefined2 ? start2 < end ? 1 : -1 : toFinite(step);
            return baseRange(start2, end, step, fromRight);
          };
        }
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value == "string" && typeof other == "string")) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func,
            bitmask,
            thisArg,
            newPartials,
            newHolders,
            newPartialsRight,
            newHoldersRight,
            argPos,
            ary2,
            arity
          ];
          var result2 = wrapFunc.apply(undefined2, newData);
          if (isLaziable(func)) {
            setData(result2, newData);
          }
          result2.placeholder = placeholder;
          return setWrapToString(result2, func, bitmask);
        }
        function createRound(methodName) {
          var func = Math2[methodName];
          return function(number, precision) {
            number = toNumber(number);
            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision && nativeIsFinite(number)) {
              var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
              pair = (toString(value) + "e").split("e");
              return +(pair[0] + "e" + (+pair[1] - precision));
            }
            return func(number);
          };
        }
        var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop3 : function(values2) {
          return new Set2(values2);
        };
        function createToPairs(keysFunc) {
          return function(object) {
            var tag = getTag(object);
            if (tag == mapTag) {
              return mapToArray(object);
            }
            if (tag == setTag) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined2;
          }
          ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
          arity = arity === undefined2 ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials, holdersRight = holders;
            partials = holders = undefined2;
          }
          var data = isBindKey ? undefined2 : getData(func);
          var newData = [
            func,
            bitmask,
            thisArg,
            partials,
            holders,
            partialsRight,
            holdersRight,
            argPos,
            ary2,
            arity
          ];
          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result2 = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result2 = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result2 = createPartial(func, bitmask, thisArg, partials);
          } else {
            result2 = createHybrid.apply(undefined2, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result2, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
          if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
            return srcValue;
          }
          return objValue;
        }
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
          if (isObject(objValue) && isObject(srcValue)) {
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
            stack["delete"](srcValue);
          }
          return objValue;
        }
        function customOmitClone(value) {
          return isPlainObject(value) ? undefined2 : value;
        }
        function equalArrays(array2, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array2.length, othLength = other.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var arrStacked = stack.get(array2);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array2;
          }
          var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
          stack.set(array2, other);
          stack.set(other, array2);
          while (++index < arrLength) {
            var arrValue = array2[index], othValue = other[index];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, arrValue, index, other, array2, stack) : customizer(arrValue, othValue, index, array2, other, stack);
            }
            if (compared !== undefined2) {
              if (compared) {
                continue;
              }
              result2 = false;
              break;
            }
            if (seen) {
              if (!arraySome(other, function(othValue2, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
                result2 = false;
                break;
              }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              result2 = false;
              break;
            }
          }
          stack["delete"](array2);
          stack["delete"](other);
          return result2;
        }
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;
            case arrayBufferTag:
              if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                return false;
              }
              return true;
            case boolTag:
            case dateTag:
            case numberTag:
              return eq(+object, +other);
            case errorTag:
              return object.name == other.name && object.message == other.message;
            case regexpTag:
            case stringTag:
              return object == other + "";
            case mapTag:
              var convert = mapToArray;
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);
              if (object.size != other.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
              stack.set(object, other);
              var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
              stack["delete"](object);
              return result2;
            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
              return false;
            }
          }
          var objStacked = stack.get(object);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object;
          }
          var result2 = true;
          stack.set(object, other);
          stack.set(other, object);
          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key], othValue = other[key];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
            }
            if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
              result2 = false;
              break;
            }
            skipCtor || (skipCtor = key == "constructor");
          }
          if (result2 && !skipCtor) {
            var objCtor = object.constructor, othCtor = other.constructor;
            if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
              result2 = false;
            }
          }
          stack["delete"](object);
          stack["delete"](other);
          return result2;
        }
        function flatRest(func) {
          return setToString(overRest(func, undefined2, flatten2), func + "");
        }
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        var getData = !metaMap ? noop3 : function(func) {
          return metaMap.get(func);
        };
        function getFuncName(func) {
          var result2 = func.name + "", array2 = realNames[result2], length = hasOwnProperty.call(realNames, result2) ? array2.length : 0;
          while (length--) {
            var data = array2[length], otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result2;
        }
        function getHolder(func) {
          var object = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
          return object.placeholder;
        }
        function getIteratee() {
          var result2 = lodash.iteratee || iteratee;
          result2 = result2 === iteratee ? baseIteratee : result2;
          return arguments.length ? result2(arguments[0], arguments[1]) : result2;
        }
        function getMapData(map2, key) {
          var data = map2.__data__;
          return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        function getMatchData(object) {
          var result2 = keys(object), length = result2.length;
          while (length--) {
            var key = result2[length], value = object[key];
            result2[length] = [key, value, isStrictComparable(value)];
          }
          return result2;
        }
        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined2;
        }
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
          try {
            value[symToStringTag] = undefined2;
            var unmasked = true;
          } catch (e4) {
          }
          var result2 = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result2;
        }
        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
          if (object == null) {
            return [];
          }
          object = Object2(object);
          return arrayFilter(nativeGetSymbols(object), function(symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
          var result2 = [];
          while (object) {
            arrayPush(result2, getSymbols(object));
            object = getPrototype(object);
          }
          return result2;
        };
        var getTag = baseGetTag;
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
          getTag = function(value) {
            var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result2;
          };
        }
        function getView(start2, end, transforms) {
          var index = -1, length = transforms.length;
          while (++index < length) {
            var data = transforms[index], size2 = data.size;
            switch (data.type) {
              case "drop":
                start2 += size2;
                break;
              case "dropRight":
                end -= size2;
                break;
              case "take":
                end = nativeMin(end, start2 + size2);
                break;
              case "takeRight":
                start2 = nativeMax(start2, end - size2);
                break;
            }
          }
          return { "start": start2, "end": end };
        }
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }
        function hasPath(object, path, hasFunc) {
          path = castPath(path, object);
          var index = -1, length = path.length, result2 = false;
          while (++index < length) {
            var key = toKey(path[index]);
            if (!(result2 = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result2 || ++index != length) {
            return result2;
          }
          length = object == null ? 0 : object.length;
          return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
        }
        function initCloneArray(array2) {
          var length = array2.length, result2 = new array2.constructor(length);
          if (length && typeof array2[0] == "string" && hasOwnProperty.call(array2, "index")) {
            result2.index = array2.index;
            result2.input = array2.input;
          }
          return result2;
        }
        function initCloneObject(object) {
          return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);
            case boolTag:
            case dateTag:
              return new Ctor(+object);
            case dataViewTag:
              return cloneDataView(object, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object, isDeep);
            case mapTag:
              return new Ctor();
            case numberTag:
            case stringTag:
              return new Ctor(object);
            case regexpTag:
              return cloneRegExp(object);
            case setTag:
              return new Ctor();
            case symbolTag:
              return cloneSymbol(object);
          }
        }
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
          details = details.join(length > 2 ? ", " : " ");
          return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
        }
        function isFlattenable(value) {
          return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        function isIndex(value, length) {
          var type2 = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;
          return !!length && (type2 == "number" || type2 != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
        }
        function isIterateeCall(value, index, object) {
          if (!isObject(object)) {
            return false;
          }
          var type2 = typeof index;
          if (type2 == "number" ? isArrayLike(object) && isIndex(index, object.length) : type2 == "string" && index in object) {
            return eq(object[index], value);
          }
          return false;
        }
        function isKey(value, object) {
          if (isArray(value)) {
            return false;
          }
          var type2 = typeof value;
          if (type2 == "number" || type2 == "symbol" || type2 == "boolean" || value == null || isSymbol(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
        }
        function isKeyable(value) {
          var type2 = typeof value;
          return type2 == "string" || type2 == "number" || type2 == "symbol" || type2 == "boolean" ? value !== "__proto__" : value === null;
        }
        function isLaziable(func) {
          var funcName = getFuncName(func), other = lodash[funcName];
          if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }
        var isMaskable = coreJsData ? isFunction : stubFalse;
        function isPrototype(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
          return value === proto;
        }
        function isStrictComparable(value) {
          return value === value && !isObject(value);
        }
        function matchesStrictComparable(key, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
          };
        }
        function memoizeCapped(func) {
          var result2 = memoize(func, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });
          var cache = result2.cache;
          return result2;
        }
        function mergeData(data, source) {
          var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
          var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
          if (!(isCommon || isCombo)) {
            return data;
          }
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          value = source[7];
          if (value) {
            data[7] = value;
          }
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          if (data[9] == null) {
            data[9] = source[9];
          }
          data[0] = source[0];
          data[1] = newBitmask;
          return data;
        }
        function nativeKeysIn(object) {
          var result2 = [];
          if (object != null) {
            for (var key in Object2(object)) {
              result2.push(key);
            }
          }
          return result2;
        }
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }
        function overRest(func, start2, transform3) {
          start2 = nativeMax(start2 === undefined2 ? func.length - 1 : start2, 0);
          return function() {
            var args = arguments, index = -1, length = nativeMax(args.length - start2, 0), array2 = Array2(length);
            while (++index < length) {
              array2[index] = args[start2 + index];
            }
            index = -1;
            var otherArgs = Array2(start2 + 1);
            while (++index < start2) {
              otherArgs[index] = args[index];
            }
            otherArgs[start2] = transform3(array2);
            return apply(func, this, otherArgs);
          };
        }
        function parent(object, path) {
          return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }
        function reorder(array2, indexes) {
          var arrLength = array2.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array2);
          while (length--) {
            var index = indexes[length];
            array2[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
          }
          return array2;
        }
        function safeGet(object, key) {
          if (key === "constructor" && typeof object[key] === "function") {
            return;
          }
          if (key == "__proto__") {
            return;
          }
          return object[key];
        }
        var setData = shortOut(baseSetData);
        var setTimeout2 = ctxSetTimeout || function(func, wait) {
          return root2.setTimeout(func, wait);
        };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
          var source = reference + "";
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        function shortOut(func) {
          var count = 0, lastCalled = 0;
          return function() {
            var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined2, arguments);
          };
        }
        function shuffleSelf(array2, size2) {
          var index = -1, length = array2.length, lastIndex = length - 1;
          size2 = size2 === undefined2 ? length : size2;
          while (++index < size2) {
            var rand = baseRandom(index, lastIndex), value = array2[rand];
            array2[rand] = array2[index];
            array2[index] = value;
          }
          array2.length = size2;
          return array2;
        }
        var stringToPath = memoizeCapped(function(string) {
          var result2 = [];
          if (string.charCodeAt(0) === 46) {
            result2.push("");
          }
          string.replace(rePropName, function(match, number, quote, subString) {
            result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
          });
          return result2;
        });
        function toKey(value) {
          if (typeof value == "string" || isSymbol(value)) {
            return value;
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e4) {
            }
            try {
              return func + "";
            } catch (e4) {
            }
          }
          return "";
        }
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = "_." + pair[0];
            if (bitmask & pair[1] && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result2.__actions__ = copyArray(wrapper.__actions__);
          result2.__index__ = wrapper.__index__;
          result2.__values__ = wrapper.__values__;
          return result2;
        }
        function chunk(array2, size2, guard) {
          if (guard ? isIterateeCall(array2, size2, guard) : size2 === undefined2) {
            size2 = 1;
          } else {
            size2 = nativeMax(toInteger(size2), 0);
          }
          var length = array2 == null ? 0 : array2.length;
          if (!length || size2 < 1) {
            return [];
          }
          var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
          while (index < length) {
            result2[resIndex++] = baseSlice(array2, index, index += size2);
          }
          return result2;
        }
        function compact(array2) {
          var index = -1, length = array2 == null ? 0 : array2.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array2[index];
            if (value) {
              result2[resIndex++] = value;
            }
          }
          return result2;
        }
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array2(length - 1), array2 = arguments[0], index = length;
          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush(isArray(array2) ? copyArray(array2) : [array2], baseFlatten(args, 1));
        }
        var difference = baseRest(function(array2, values2) {
          return isArrayLikeObject(array2) ? baseDifference(array2, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
        });
        var differenceBy = baseRest(function(array2, values2) {
          var iteratee2 = last(values2);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return isArrayLikeObject(array2) ? baseDifference(array2, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
        });
        var differenceWith = baseRest(function(array2, values2) {
          var comparator = last(values2);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined2;
          }
          return isArrayLikeObject(array2) ? baseDifference(array2, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
        });
        function drop(array2, n5, guard) {
          var length = array2 == null ? 0 : array2.length;
          if (!length) {
            return [];
          }
          n5 = guard || n5 === undefined2 ? 1 : toInteger(n5);
          return baseSlice(array2, n5 < 0 ? 0 : n5, length);
        }
        function dropRight(array2, n5, guard) {
          var length = array2 == null ? 0 : array2.length;
          if (!length) {
            return [];
          }
          n5 = guard || n5 === undefined2 ? 1 : toInteger(n5);
          n5 = length - n5;
          return baseSlice(array2, 0, n5 < 0 ? 0 : n5);
        }
        function dropRightWhile(array2, predicate) {
          return array2 && array2.length ? baseWhile(array2, getIteratee(predicate, 3), true, true) : [];
        }
        function dropWhile(array2, predicate) {
          return array2 && array2.length ? baseWhile(array2, getIteratee(predicate, 3), true) : [];
        }
        function fill(array2, value, start2, end) {
          var length = array2 == null ? 0 : array2.length;
          if (!length) {
            return [];
          }
          if (start2 && typeof start2 != "number" && isIterateeCall(array2, value, start2)) {
            start2 = 0;
            end = length;
          }
          return baseFill(array2, value, start2, end);
        }
        function findIndex(array2, predicate, fromIndex) {
          var length = array2 == null ? 0 : array2.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseFindIndex(array2, getIteratee(predicate, 3), index);
        }
        function findLastIndex(array2, predicate, fromIndex) {
          var length = array2 == null ? 0 : array2.length;
          if (!length) {
            return -1;
          }
          var index = length - 1;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return baseFindIndex(array2, getIteratee(predicate, 3), index, true);
        }
        function flatten2(array2) {
          var length = array2 == null ? 0 : array2.length;
          return length ? baseFlatten(array2, 1) : [];
        }
        function flattenDeep(array2) {
          var length = array2 == null ? 0 : array2.length;
          return length ? baseFlatten(array2, INFINITY) : [];
        }
        function flattenDepth(array2, depth) {
          var length = array2 == null ? 0 : array2.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(array2, depth);
        }
        function fromPairs(pairs) {
          var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
          while (++index < length) {
            var pair = pairs[index];
            result2[pair[0]] = pair[1];
          }
          return result2;
        }
        function head(array2) {
          return array2 && array2.length ? array2[0] : undefined2;
        }
        function indexOf(array2, value, fromIndex) {
          var length = array2 == null ? 0 : array2.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseIndexOf(array2, value, index);
        }
        function initial(array2) {
          var length = array2 == null ? 0 : array2.length;
          return length ? baseSlice(array2, 0, -1) : [];
        }
        var intersection = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersectionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          if (iteratee2 === last(mapped)) {
            iteratee2 = undefined2;
          } else {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
        });
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          if (comparator) {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
        });
        function join(array2, separator) {
          return array2 == null ? "" : nativeJoin.call(array2, separator);
        }
        function last(array2) {
          var length = array2 == null ? 0 : array2.length;
          return length ? array2[length - 1] : undefined2;
        }
        function lastIndexOf(array2, value, fromIndex) {
          var length = array2 == null ? 0 : array2.length;
          if (!length) {
            return -1;
          }
          var index = length;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return value === value ? strictLastIndexOf(array2, value, index) : baseFindIndex(array2, baseIsNaN, index, true);
        }
        function nth(array2, n5) {
          return array2 && array2.length ? baseNth(array2, toInteger(n5)) : undefined2;
        }
        var pull = baseRest(pullAll);
        function pullAll(array2, values2) {
          return array2 && array2.length && values2 && values2.length ? basePullAll(array2, values2) : array2;
        }
        function pullAllBy(array2, values2, iteratee2) {
          return array2 && array2.length && values2 && values2.length ? basePullAll(array2, values2, getIteratee(iteratee2, 2)) : array2;
        }
        function pullAllWith(array2, values2, comparator) {
          return array2 && array2.length && values2 && values2.length ? basePullAll(array2, values2, undefined2, comparator) : array2;
        }
        var pullAt = flatRest(function(array2, indexes) {
          var length = array2 == null ? 0 : array2.length, result2 = baseAt(array2, indexes);
          basePullAt(array2, arrayMap(indexes, function(index) {
            return isIndex(index, length) ? +index : index;
          }).sort(compareAscending));
          return result2;
        });
        function remove2(array2, predicate) {
          var result2 = [];
          if (!(array2 && array2.length)) {
            return result2;
          }
          var index = -1, indexes = [], length = array2.length;
          predicate = getIteratee(predicate, 3);
          while (++index < length) {
            var value = array2[index];
            if (predicate(value, index, array2)) {
              result2.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array2, indexes);
          return result2;
        }
        function reverse(array2) {
          return array2 == null ? array2 : nativeReverse.call(array2);
        }
        function slice(array2, start2, end) {
          var length = array2 == null ? 0 : array2.length;
          if (!length) {
            return [];
          }
          if (end && typeof end != "number" && isIterateeCall(array2, start2, end)) {
            start2 = 0;
            end = length;
          } else {
            start2 = start2 == null ? 0 : toInteger(start2);
            end = end === undefined2 ? length : toInteger(end);
          }
          return baseSlice(array2, start2, end);
        }
        function sortedIndex(array2, value) {
          return baseSortedIndex(array2, value);
        }
        function sortedIndexBy(array2, value, iteratee2) {
          return baseSortedIndexBy(array2, value, getIteratee(iteratee2, 2));
        }
        function sortedIndexOf(array2, value) {
          var length = array2 == null ? 0 : array2.length;
          if (length) {
            var index = baseSortedIndex(array2, value);
            if (index < length && eq(array2[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedLastIndex(array2, value) {
          return baseSortedIndex(array2, value, true);
        }
        function sortedLastIndexBy(array2, value, iteratee2) {
          return baseSortedIndexBy(array2, value, getIteratee(iteratee2, 2), true);
        }
        function sortedLastIndexOf(array2, value) {
          var length = array2 == null ? 0 : array2.length;
          if (length) {
            var index = baseSortedIndex(array2, value, true) - 1;
            if (eq(array2[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedUniq(array2) {
          return array2 && array2.length ? baseSortedUniq(array2) : [];
        }
        function sortedUniqBy(array2, iteratee2) {
          return array2 && array2.length ? baseSortedUniq(array2, getIteratee(iteratee2, 2)) : [];
        }
        function tail(array2) {
          var length = array2 == null ? 0 : array2.length;
          return length ? baseSlice(array2, 1, length) : [];
        }
        function take(array2, n5, guard) {
          if (!(array2 && array2.length)) {
            return [];
          }
          n5 = guard || n5 === undefined2 ? 1 : toInteger(n5);
          return baseSlice(array2, 0, n5 < 0 ? 0 : n5);
        }
        function takeRight(array2, n5, guard) {
          var length = array2 == null ? 0 : array2.length;
          if (!length) {
            return [];
          }
          n5 = guard || n5 === undefined2 ? 1 : toInteger(n5);
          n5 = length - n5;
          return baseSlice(array2, n5 < 0 ? 0 : n5, length);
        }
        function takeRightWhile(array2, predicate) {
          return array2 && array2.length ? baseWhile(array2, getIteratee(predicate, 3), false, true) : [];
        }
        function takeWhile(array2, predicate) {
          return array2 && array2.length ? baseWhile(array2, getIteratee(predicate, 3)) : [];
        }
        var union = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
        });
        var unionWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
        });
        function uniq(array2) {
          return array2 && array2.length ? baseUniq(array2) : [];
        }
        function uniqBy(array2, iteratee2) {
          return array2 && array2.length ? baseUniq(array2, getIteratee(iteratee2, 2)) : [];
        }
        function uniqWith(array2, comparator) {
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return array2 && array2.length ? baseUniq(array2, undefined2, comparator) : [];
        }
        function unzip(array2) {
          if (!(array2 && array2.length)) {
            return [];
          }
          var length = 0;
          array2 = arrayFilter(array2, function(group) {
            if (isArrayLikeObject(group)) {
              length = nativeMax(group.length, length);
              return true;
            }
          });
          return baseTimes(length, function(index) {
            return arrayMap(array2, baseProperty(index));
          });
        }
        function unzipWith(array2, iteratee2) {
          if (!(array2 && array2.length)) {
            return [];
          }
          var result2 = unzip(array2);
          if (iteratee2 == null) {
            return result2;
          }
          return arrayMap(result2, function(group) {
            return apply(iteratee2, undefined2, group);
          });
        }
        var without = baseRest(function(array2, values2) {
          return isArrayLikeObject(array2) ? baseDifference(array2, values2) : [];
        });
        var xor = baseRest(function(arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
        });
        var xorWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
        });
        var zip = baseRest(unzip);
        function zipObject(props, values2) {
          return baseZipObject(props || [], values2 || [], assignValue);
        }
        function zipObjectDeep(props, values2) {
          return baseZipObject(props || [], values2 || [], baseSet);
        }
        var zipWith = baseRest(function(arrays) {
          var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
          iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
          return unzipWith(arrays, iteratee2);
        });
        function chain(value) {
          var result2 = lodash(value);
          result2.__chain__ = true;
          return result2;
        }
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }
        function thru(value, interceptor) {
          return interceptor(value);
        }
        var wrapperAt = flatRest(function(paths) {
          var length = paths.length, start2 = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
            return baseAt(object, paths);
          };
          if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start2)) {
            return this.thru(interceptor);
          }
          value = value.slice(start2, +start2 + (length ? 1 : 0));
          value.__actions__.push({
            "func": thru,
            "args": [interceptor],
            "thisArg": undefined2
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array2) {
            if (length && !array2.length) {
              array2.push(undefined2);
            }
            return array2;
          });
        });
        function wrapperChain() {
          return chain(this);
        }
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
          if (this.__values__ === undefined2) {
            this.__values__ = toArray(this.value());
          }
          var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
          return { "done": done, "value": value };
        }
        function wrapperToIterator() {
          return this;
        }
        function wrapperPlant(value) {
          var result2, parent2 = this;
          while (parent2 instanceof baseLodash) {
            var clone2 = wrapperClone(parent2);
            clone2.__index__ = 0;
            clone2.__values__ = undefined2;
            if (result2) {
              previous.__wrapped__ = clone2;
            } else {
              result2 = clone2;
            }
            var previous = clone2;
            parent2 = parent2.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result2;
        }
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              "func": thru,
              "args": [reverse],
              "thisArg": undefined2
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            ++result2[key];
          } else {
            baseAssignValue(result2, key, 1);
          }
        });
        function every(collection, predicate, guard) {
          var func = isArray(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        function filter2(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }
        var find2 = createFind(findIndex);
        var findLast = createFind(findLastIndex);
        function flatMap(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), 1);
        }
        function flatMapDeep(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), INFINITY);
        }
        function flatMapDepth(collection, iteratee2, depth) {
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(map(collection, iteratee2), depth);
        }
        function forEach(collection, iteratee2) {
          var func = isArray(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function forEachRight(collection, iteratee2) {
          var func = isArray(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee2, 3));
        }
        var groupBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            result2[key].push(value);
          } else {
            baseAssignValue(result2, key, [value]);
          }
        });
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function(collection, path, args) {
          var index = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value) {
            result2[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
          });
          return result2;
        });
        var keyBy = createAggregator(function(result2, value, key) {
          baseAssignValue(result2, key, value);
        });
        function map(collection, iteratee2) {
          var func = isArray(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined2 : orders;
          if (!isArray(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(function(result2, value, key) {
          result2[key ? 0 : 1].push(value);
        }, function() {
          return [[], []];
        });
        function reduce(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
        }
        function reduceRight(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
        }
        function reject(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }
        function sample(collection) {
          var func = isArray(collection) ? arraySample : baseSample;
          return func(collection);
        }
        function sampleSize(collection, n5, guard) {
          if (guard ? isIterateeCall(collection, n5, guard) : n5 === undefined2) {
            n5 = 1;
          } else {
            n5 = toInteger(n5);
          }
          var func = isArray(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n5);
        }
        function shuffle(collection) {
          var func = isArray(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString(collection) ? stringSize(collection) : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }
        function some(collection, predicate, guard) {
          var func = isArray(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now2 = ctxNow || function() {
          return root2.Date.now();
        };
        function after(n5, func) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n5 = toInteger(n5);
          return function() {
            if (--n5 < 1) {
              return func.apply(this, arguments);
            }
          };
        }
        function ary(func, n5, guard) {
          n5 = guard ? undefined2 : n5;
          n5 = func && n5 == null ? func.length : n5;
          return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n5);
        }
        function before(n5, func) {
          var result2;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n5 = toInteger(n5);
          return function() {
            if (--n5 > 0) {
              result2 = func.apply(this, arguments);
            }
            if (n5 <= 1) {
              func = undefined2;
            }
            return result2;
          };
        }
        var bind = baseRest(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });
        var bindKey2 = baseRest(function(object, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey2));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object, partials, holders);
        });
        function curry(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curry.placeholder;
          return result2;
        }
        function curryRight(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curryRight.placeholder;
          return result2;
        }
        function debounce2(func, wait, options) {
          var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject(options)) {
            leading = !!options.leading;
            maxing = "maxWait" in options;
            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          function invokeFunc(time) {
            var args = lastArgs, thisArg = lastThis;
            lastArgs = lastThis = undefined2;
            lastInvokeTime = time;
            result2 = func.apply(thisArg, args);
            return result2;
          }
          function leadingEdge(time) {
            lastInvokeTime = time;
            timerId = setTimeout2(timerExpired, wait);
            return leading ? invokeFunc(time) : result2;
          }
          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
            return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
          }
          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
            return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
          }
          function timerExpired() {
            var time = now2();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            timerId = setTimeout2(timerExpired, remainingWait(time));
          }
          function trailingEdge(time) {
            timerId = undefined2;
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined2;
            return result2;
          }
          function cancel() {
            if (timerId !== undefined2) {
              clearTimeout2(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined2;
          }
          function flush() {
            return timerId === undefined2 ? result2 : trailingEdge(now2());
          }
          function debounced() {
            var time = now2(), isInvoking = shouldInvoke(time);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;
            if (isInvoking) {
              if (timerId === undefined2) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                clearTimeout2(timerId);
                timerId = setTimeout2(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined2) {
              timerId = setTimeout2(timerExpired, wait);
            }
            return result2;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }
        var defer = baseRest(function(func, args) {
          return baseDelay(func, 1, args);
        });
        var delay = baseRest(function(func, wait, args) {
          return baseDelay(func, toNumber(wait) || 0, args);
        });
        function flip(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }
        function memoize(func, resolver) {
          if (typeof func != "function" || resolver != null && typeof resolver != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
            if (cache.has(key)) {
              return cache.get(key);
            }
            var result2 = func.apply(this, args);
            memoized.cache = cache.set(key, result2) || cache;
            return result2;
          };
          memoized.cache = new (memoize.Cache || MapCache)();
          return memoized;
        }
        memoize.Cache = MapCache;
        function negate(predicate) {
          if (typeof predicate != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
        function once(func) {
          return before(2, func);
        }
        var overArgs = castRest(function(func, transforms) {
          transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index = -1, length = nativeMin(args.length, funcsLength);
            while (++index < length) {
              args[index] = transforms[index].call(this, args[index]);
            }
            return apply(func, this, args);
          });
        });
        var partial = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
        });
        var partialRight = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
        });
        var rearg = flatRest(function(func, indexes) {
          return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
        });
        function rest(func, start2) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start2 = start2 === undefined2 ? start2 : toInteger(start2);
          return baseRest(func, start2);
        }
        function spread(func, start2) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start2 = start2 == null ? 0 : nativeMax(toInteger(start2), 0);
          return baseRest(function(args) {
            var array2 = args[start2], otherArgs = castSlice(args, 0, start2);
            if (array2) {
              arrayPush(otherArgs, array2);
            }
            return apply(func, this, otherArgs);
          });
        }
        function throttle(func, wait, options) {
          var leading = true, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          if (isObject(options)) {
            leading = "leading" in options ? !!options.leading : leading;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          return debounce2(func, wait, {
            "leading": leading,
            "maxWait": wait,
            "trailing": trailing
          });
        }
        function unary(func) {
          return ary(func, 1);
        }
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray(value) ? value : [value];
        }
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        function conformsTo(object, source) {
          return source == null || baseConformsTo(object, source, keys(source));
        }
        function eq(value, other) {
          return value === other || value !== value && other !== other;
        }
        var gt = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function(value, other) {
          return value >= other;
        });
        var isArguments = baseIsArguments(/* @__PURE__ */ function() {
          return arguments;
        }()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        var isArray = Array2.isArray;
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }
        function isBoolean(value) {
          return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement(value) {
          return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty.call(value, key)) {
              return false;
            }
          }
          return true;
        }
        function isEqual(value, other) {
          return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          var result2 = customizer ? customizer(value, other) : undefined2;
          return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
        }
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
        }
        function isFinite(value) {
          return typeof value == "number" && nativeIsFinite(value);
        }
        function isFunction(value) {
          if (!isObject(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        function isInteger(value) {
          return typeof value == "number" && value == toInteger(value);
        }
        function isLength(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject(value) {
          var type2 = typeof value;
          return value != null && (type2 == "object" || type2 == "function");
        }
        function isObjectLike(value) {
          return value != null && typeof value == "object";
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch(object, source) {
          return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        function isMatchWith(object, source, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        function isNaN2(value) {
          return isNumber(value) && value != +value;
        }
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error2(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
        function isNull(value) {
          return value === null;
        }
        function isNil(value) {
          return value == null;
        }
        function isNumber(value) {
          return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
          return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
          return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString(value) {
          return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        function isSymbol(value) {
          return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        function isUndefined(value) {
          return value === undefined2;
        }
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        var lt = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function(value, other) {
          return value <= other;
        });
        function toArray(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
          return func(value);
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign2 = value < 0 ? -1 : 1;
            return sign2 * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger(value) {
          var result2 = toFinite(value), remainder = result2 % 1;
          return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
        }
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject(value)) {
            var other = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
          return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        function toString(value) {
          return value == null ? "" : baseToString(value);
        }
        var assign = createAssigner(function(object, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
              assignValue(object, key, source[key]);
            }
          }
        });
        var assignIn = createAssigner(function(object, source) {
          copyObject(source, keysIn(source), object);
        });
        var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object, customizer);
        });
        var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keys(source), object, customizer);
        });
        var at = flatRest(baseAt);
        function create2(prototype, properties) {
          var result2 = baseCreate(prototype);
          return properties == null ? result2 : baseAssign(result2, properties);
        }
        var defaults = baseRest(function(object, sources) {
          object = Object2(object);
          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined2;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }
          while (++index < length) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;
            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object[key];
              if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
                object[key] = source[key];
              }
            }
          }
          return object;
        });
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined2, customDefaultsMerge);
          return apply(mergeWith, undefined2, args);
        });
        function findKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        function forIn(object, iteratee2) {
          return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forInRight(object, iteratee2) {
          return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forOwn(object, iteratee2) {
          return object && baseForOwn(object, getIteratee(iteratee2, 3));
        }
        function forOwnRight(object, iteratee2) {
          return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
        }
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys(object));
        }
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        function get3(object, path, defaultValue) {
          var result2 = object == null ? undefined2 : baseGet(object, path);
          return result2 === undefined2 ? defaultValue : result2;
        }
        function has(object, path) {
          return object != null && hasPath(object, path, baseHas);
        }
        function hasIn(object, path) {
          return object != null && hasPath(object, path, baseHasIn);
        }
        var invert = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          result2[value] = key;
        }, constant(identity3));
        var invertBy = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          if (hasOwnProperty.call(result2, value)) {
            result2[value].push(key);
          } else {
            result2[value] = [key];
          }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        function keysIn(object) {
          return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        function mapKeys(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, iteratee2(value, key, object2), value);
          });
          return result2;
        }
        function mapValues(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, key, iteratee2(value, key, object2));
          });
          return result2;
        }
        var merge2 = createAssigner(function(object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });
        var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
          baseMerge(object, source, srcIndex, customizer);
        });
        var omit = flatRest(function(object, paths) {
          var result2 = {};
          if (object == null) {
            return result2;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path) {
            path = castPath(path, object);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject(object, getAllKeysIn(object), result2);
          if (isDeep) {
            result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result2, paths[length]);
          }
          return result2;
        });
        function omitBy(object, predicate) {
          return pickBy(object, negate(getIteratee(predicate)));
        }
        var pick = flatRest(function(object, paths) {
          return object == null ? {} : basePick(object, paths);
        });
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object, props, function(value, path) {
            return predicate(value, path[0]);
          });
        }
        function result(object, path, defaultValue) {
          path = castPath(path, object);
          var index = -1, length = path.length;
          if (!length) {
            length = 1;
            object = undefined2;
          }
          while (++index < length) {
            var value = object == null ? undefined2 : object[toKey(path[index])];
            if (value === undefined2) {
              index = length;
              value = defaultValue;
            }
            object = isFunction(value) ? value.call(object) : value;
          }
          return object;
        }
        function set3(object, path, value) {
          return object == null ? object : baseSet(object, path, value);
        }
        function setWith(object, path, value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseSet(object, path, value, customizer);
        }
        var toPairs = createToPairs(keys);
        var toPairsIn = createToPairs(keysIn);
        function transform2(object, iteratee2, accumulator) {
          var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
          iteratee2 = getIteratee(iteratee2, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor() : [];
            } else if (isObject(object)) {
              accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
            } else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
            return iteratee2(accumulator, value, index, object2);
          });
          return accumulator;
        }
        function unset(object, path) {
          return object == null ? true : baseUnset(object, path);
        }
        function update(object, path, updater) {
          return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }
        function updateWith(object, path, updater, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }
        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn(object));
        }
        function clamp(number, lower2, upper) {
          if (upper === undefined2) {
            upper = lower2;
            lower2 = undefined2;
          }
          if (upper !== undefined2) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower2 !== undefined2) {
            lower2 = toNumber(lower2);
            lower2 = lower2 === lower2 ? lower2 : 0;
          }
          return baseClamp(toNumber(number), lower2, upper);
        }
        function inRange(number, start2, end) {
          start2 = toFinite(start2);
          if (end === undefined2) {
            end = start2;
            start2 = 0;
          } else {
            end = toFinite(end);
          }
          number = toNumber(number);
          return baseInRange(number, start2, end);
        }
        function random(lower2, upper, floating) {
          if (floating && typeof floating != "boolean" && isIterateeCall(lower2, upper, floating)) {
            upper = floating = undefined2;
          }
          if (floating === undefined2) {
            if (typeof upper == "boolean") {
              floating = upper;
              upper = undefined2;
            } else if (typeof lower2 == "boolean") {
              floating = lower2;
              lower2 = undefined2;
            }
          }
          if (lower2 === undefined2 && upper === undefined2) {
            lower2 = 0;
            upper = 1;
          } else {
            lower2 = toFinite(lower2);
            if (upper === undefined2) {
              upper = lower2;
              lower2 = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower2 > upper) {
            var temp = lower2;
            lower2 = upper;
            upper = temp;
          }
          if (floating || lower2 % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(lower2 + rand * (upper - lower2 + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
          }
          return baseRandom(lower2, upper);
        }
        var camelCase = createCompounder(function(result2, word, index) {
          word = word.toLowerCase();
          return result2 + (index ? capitalize(word) : word);
        });
        function capitalize(string) {
          return upperFirst(toString(string).toLowerCase());
        }
        function deburr(string) {
          string = toString(string);
          return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        function endsWith(string, target, position) {
          string = toString(string);
          target = baseToString(target);
          var length = string.length;
          position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
          var end = position;
          position -= target.length;
          return position >= 0 && string.slice(position, end) == target;
        }
        function escape(string) {
          string = toString(string);
          return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        function escapeRegExp(string) {
          string = toString(string);
          return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
        }
        var kebabCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "-" : "") + word.toLowerCase();
        });
        var lowerCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst("toLowerCase");
        function pad(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          if (!length || strLength >= length) {
            return string;
          }
          var mid = (length - strLength) / 2;
          return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
        }
        function padEnd(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
        }
        function padStart(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
        }
        function parseInt2(string, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
        }
        function repeat(string, n5, guard) {
          if (guard ? isIterateeCall(string, n5, guard) : n5 === undefined2) {
            n5 = 1;
          } else {
            n5 = toInteger(n5);
          }
          return baseRepeat(toString(string), n5);
        }
        function replace() {
          var args = arguments, string = toString(args[0]);
          return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "_" : "") + word.toLowerCase();
        });
        function split(string, separator, limit) {
          if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
            separator = limit = undefined2;
          }
          limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string = toString(string);
          if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string)) {
              return castSlice(stringToArray(string), 0, limit);
            }
          }
          return string.split(separator, limit);
        }
        var startCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + upperFirst(word);
        });
        function startsWith(string, target, position) {
          string = toString(string);
          position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
          target = baseToString(target);
          return string.slice(position, position + target.length) == target;
        }
        function template(string, options, guard) {
          var settings = lodash.templateSettings;
          if (guard && isIterateeCall(string, options, guard)) {
            options = undefined2;
          }
          string = toString(string);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
          var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
          var reDelimiters = RegExp2(
            (options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
            "g"
          );
          var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
          string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
            interpolateValue || (interpolateValue = esTemplateValue);
            source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index = offset + match.length;
            return match;
          });
          source += "';\n";
          var variable = hasOwnProperty.call(options, "variable") && options.variable;
          if (!variable) {
            source = "with (obj) {\n" + source + "\n}\n";
          } else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
          }
          source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
          source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
          var result2 = attempt(function() {
            return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
          });
          result2.source = source;
          if (isError(result2)) {
            throw result2;
          }
          return result2;
        }
        function toLower(value) {
          return toString(value).toLowerCase();
        }
        function toUpper(value) {
          return toString(value).toUpperCase();
        }
        function trim(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return baseTrim(string);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start2 = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start2, end).join("");
        }
        function trimEnd(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.slice(0, trimmedEndIndex(string) + 1);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
          return castSlice(strSymbols, 0, end).join("");
        }
        function trimStart(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.replace(reTrimStart, "");
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), start2 = charsStartIndex(strSymbols, stringToArray(chars));
          return castSlice(strSymbols, start2).join("");
        }
        function truncate(string, options) {
          var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
          if (isObject(options)) {
            var separator = "separator" in options ? options.separator : separator;
            length = "length" in options ? toInteger(options.length) : length;
            omission = "omission" in options ? baseToString(options.omission) : omission;
          }
          string = toString(string);
          var strLength = string.length;
          if (hasUnicode(string)) {
            var strSymbols = stringToArray(string);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
          if (separator === undefined2) {
            return result2 + omission;
          }
          if (strSymbols) {
            end += result2.length - end;
          }
          if (isRegExp(separator)) {
            if (string.slice(end).search(separator)) {
              var match, substring = result2;
              if (!separator.global) {
                separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
              }
              separator.lastIndex = 0;
              while (match = separator.exec(substring)) {
                var newEnd = match.index;
              }
              result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
            }
          } else if (string.indexOf(baseToString(separator), end) != end) {
            var index = result2.lastIndexOf(separator);
            if (index > -1) {
              result2 = result2.slice(0, index);
            }
          }
          return result2 + omission;
        }
        function unescape(string) {
          string = toString(string);
          return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        var upperCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toUpperCase();
        });
        var upperFirst = createCaseFirst("toUpperCase");
        function words(string, pattern, guard) {
          string = toString(string);
          pattern = guard ? undefined2 : pattern;
          if (pattern === undefined2) {
            return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
          }
          return string.match(pattern) || [];
        }
        var attempt = baseRest(function(func, args) {
          try {
            return apply(func, undefined2, args);
          } catch (e4) {
            return isError(e4) ? e4 : new Error2(e4);
          }
        });
        var bindAll = flatRest(function(object, methodNames) {
          arrayEach(methodNames, function(key) {
            key = toKey(key);
            baseAssignValue(object, key, bind(object[key], object));
          });
          return object;
        });
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
          pairs = !length ? [] : arrayMap(pairs, function(pair) {
            if (typeof pair[1] != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return [toIteratee(pair[0]), pair[1]];
          });
          return baseRest(function(args) {
            var index = -1;
            while (++index < length) {
              var pair = pairs[index];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant(value) {
          return function() {
            return value;
          };
        }
        function defaultTo(value, defaultValue) {
          return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity3(value) {
          return value;
        }
        function iteratee(func) {
          return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        function matches(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path, srcValue) {
          return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        var method = baseRest(function(path, args) {
          return function(object) {
            return baseInvoke(object, path, args);
          };
        });
        var methodOf = baseRest(function(object, args) {
          return function(path) {
            return baseInvoke(object, path, args);
          };
        });
        function mixin(object, source, options) {
          var props = keys(source), methodNames = baseFunctions(source, props);
          if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys(source));
          }
          var chain2 = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object);
          arrayEach(methodNames, function(methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
              object.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain2 || chainAll) {
                  var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                  actions.push({ "func": func, "args": arguments, "thisArg": object });
                  result2.__chain__ = chainAll;
                  return result2;
                }
                return func.apply(object, arrayPush([this.value()], arguments));
              };
            }
          });
          return object;
        }
        function noConflict() {
          if (root2._ === this) {
            root2._ = oldDash;
          }
          return this;
        }
        function noop3() {
        }
        function nthArg(n5) {
          n5 = toInteger(n5);
          return baseRest(function(args) {
            return baseNth(args, n5);
          });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path) {
          return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
        function propertyOf(object) {
          return function(path) {
            return object == null ? undefined2 : baseGet(object, path);
          };
        }
        var range = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
          return [];
        }
        function stubFalse() {
          return false;
        }
        function stubObject() {
          return {};
        }
        function stubString() {
          return "";
        }
        function stubTrue() {
          return true;
        }
        function times(n5, iteratee2) {
          n5 = toInteger(n5);
          if (n5 < 1 || n5 > MAX_SAFE_INTEGER) {
            return [];
          }
          var index = MAX_ARRAY_LENGTH, length = nativeMin(n5, MAX_ARRAY_LENGTH);
          iteratee2 = getIteratee(iteratee2);
          n5 -= MAX_ARRAY_LENGTH;
          var result2 = baseTimes(length, iteratee2);
          while (++index < n5) {
            iteratee2(index);
          }
          return result2;
        }
        function toPath(value) {
          if (isArray(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
        }
        function uniqueId(prefix) {
          var id2 = ++idCounter;
          return toString(prefix) + id2;
        }
        var add = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);
        var ceil = createRound("ceil");
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);
        var floor = createRound("floor");
        function max2(array2) {
          return array2 && array2.length ? baseExtremum(array2, identity3, baseGt) : undefined2;
        }
        function maxBy(array2, iteratee2) {
          return array2 && array2.length ? baseExtremum(array2, getIteratee(iteratee2, 2), baseGt) : undefined2;
        }
        function mean(array2) {
          return baseMean(array2, identity3);
        }
        function meanBy(array2, iteratee2) {
          return baseMean(array2, getIteratee(iteratee2, 2));
        }
        function min2(array2) {
          return array2 && array2.length ? baseExtremum(array2, identity3, baseLt) : undefined2;
        }
        function minBy(array2, iteratee2) {
          return array2 && array2.length ? baseExtremum(array2, getIteratee(iteratee2, 2), baseLt) : undefined2;
        }
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
        var round = createRound("round");
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
        function sum(array2) {
          return array2 && array2.length ? baseSum(array2, identity3) : 0;
        }
        function sumBy(array2, iteratee2) {
          return array2 && array2.length ? baseSum(array2, getIteratee(iteratee2, 2)) : 0;
        }
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey2;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create2;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce2;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter2;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten2;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge2;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove2;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set3;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform2;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        mixin(lodash, lodash);
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find2;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get3;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity3;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN2;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max2;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min2;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop3;
        lodash.now = now2;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt2;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext2;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, function() {
          var source = {};
          baseForOwn(lodash, function(func, methodName) {
            if (!hasOwnProperty.call(lodash.prototype, methodName)) {
              source[methodName] = func;
            }
          });
          return source;
        }(), { "chain": false });
        lodash.VERSION = VERSION;
        arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
          lodash[methodName].placeholder = lodash;
        });
        arrayEach(["drop", "take"], function(methodName, index) {
          LazyWrapper.prototype[methodName] = function(n5) {
            n5 = n5 === undefined2 ? 1 : nativeMax(toInteger(n5), 0);
            var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
            if (result2.__filtered__) {
              result2.__takeCount__ = nativeMin(n5, result2.__takeCount__);
            } else {
              result2.__views__.push({
                "size": nativeMin(n5, MAX_ARRAY_LENGTH),
                "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
              });
            }
            return result2;
          };
          LazyWrapper.prototype[methodName + "Right"] = function(n5) {
            return this.reverse()[methodName](n5).reverse();
          };
        });
        arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
          var type2 = index + 1, isFilter = type2 == LAZY_FILTER_FLAG || type2 == LAZY_WHILE_FLAG;
          LazyWrapper.prototype[methodName] = function(iteratee2) {
            var result2 = this.clone();
            result2.__iteratees__.push({
              "iteratee": getIteratee(iteratee2, 3),
              "type": type2
            });
            result2.__filtered__ = result2.__filtered__ || isFilter;
            return result2;
          };
        });
        arrayEach(["head", "last"], function(methodName, index) {
          var takeName = "take" + (index ? "Right" : "");
          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });
        arrayEach(["initial", "tail"], function(methodName, index) {
          var dropName = "drop" + (index ? "" : "Right");
          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });
        LazyWrapper.prototype.compact = function() {
          return this.filter(identity3);
        };
        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
          if (typeof path == "function") {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path, args);
          });
        });
        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start2, end) {
          start2 = toInteger(start2);
          var result2 = this;
          if (result2.__filtered__ && (start2 > 0 || end < 0)) {
            return new LazyWrapper(result2);
          }
          if (start2 < 0) {
            result2 = result2.takeRight(-start2);
          } else if (start2) {
            result2 = result2.drop(start2);
          }
          if (end !== undefined2) {
            end = toInteger(end);
            result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start2);
          }
          return result2;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
          if (!lodashFunc) {
            return;
          }
          lodash.prototype[methodName] = function() {
            var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
            var interceptor = function(value2) {
              var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
              return isTaker && chainAll ? result3[0] : result3;
            };
            if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result2 = func.apply(value, args);
              result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
              return new LodashWrapper(result2, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result2 = this.thru(interceptor);
            return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
          };
        });
        arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
          var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
          lodash.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func.apply(isArray(value) ? value : [], args);
            }
            return this[chainName](function(value2) {
              return func.apply(isArray(value2) ? value2 : [], args);
            });
          };
        });
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + "";
            if (!hasOwnProperty.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({ "name": methodName, "func": lodashFunc });
          }
        });
        realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
          "name": "wrapper",
          "func": undefined2
        }];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) {
          lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
      };
      var _2 = runInContext();
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        root2._ = _2;
        define(function() {
          return _2;
        });
      } else if (freeModule) {
        (freeModule.exports = _2)._ = _2;
        freeExports._ = _2;
      } else {
        root2._ = _2;
      }
    }).call(exports);
  }
});

// apps/simulator/src/eventsShim.js
var require_eventsShim = __commonJS({
  "apps/simulator/src/eventsShim.js"(exports, module) {
    var EventEmitter2 = class {
      constructor() {
        this.events = {};
      }
      on(eventName, listener) {
        if (!this.events[eventName]) {
          this.events[eventName] = [];
        }
        this.events[eventName].push(listener);
      }
      emit(eventName, ...args) {
        if (this.events[eventName]) {
          this.events[eventName].forEach((listener) => {
            listener(...args);
          });
        }
      }
    };
    module.exports = {
      EventEmitter: EventEmitter2
    };
  }
});

// node_modules/@lit-labs/ssr-dom-shim/lib/element-internals.js
var ElementInternalsShim = class ElementInternals {
  get shadowRoot() {
    return this.__host.__shadowRoot;
  }
  constructor(_host) {
    this.ariaAtomic = "";
    this.ariaAutoComplete = "";
    this.ariaBraileLabel = "";
    this.ariaBraileRoleDescription = "";
    this.ariaBusy = "";
    this.ariaChecked = "";
    this.ariaColCount = "";
    this.ariaColIndex = "";
    this.ariaColSpan = "";
    this.ariaCurrent = "";
    this.ariaDescription = "";
    this.ariaDisabled = "";
    this.ariaExpanded = "";
    this.ariaHasPopup = "";
    this.ariaHidden = "";
    this.ariaInvalid = "";
    this.ariaKeyShortcuts = "";
    this.ariaLabel = "";
    this.ariaLevel = "";
    this.ariaLive = "";
    this.ariaModal = "";
    this.ariaMultiLine = "";
    this.ariaMultiSelectable = "";
    this.ariaOrientation = "";
    this.ariaPlaceholder = "";
    this.ariaPosInSet = "";
    this.ariaPressed = "";
    this.ariaReadOnly = "";
    this.ariaRequired = "";
    this.ariaRoleDescription = "";
    this.ariaRowCount = "";
    this.ariaRowIndex = "";
    this.ariaRowSpan = "";
    this.ariaSelected = "";
    this.ariaSetSize = "";
    this.ariaSort = "";
    this.ariaValueMax = "";
    this.ariaValueMin = "";
    this.ariaValueNow = "";
    this.ariaValueText = "";
    this.role = "";
    this.form = null;
    this.labels = [];
    this.states = /* @__PURE__ */ new Set();
    this.validationMessage = "";
    this.validity = {};
    this.willValidate = true;
    this.__host = _host;
  }
  checkValidity() {
    console.warn("`ElementInternals.checkValidity()` was called on the server.This method always returns true.");
    return true;
  }
  reportValidity() {
    return true;
  }
  setFormValue() {
  }
  setValidity() {
  }
};

// node_modules/@lit-labs/ssr-dom-shim/index.js
var attributes = /* @__PURE__ */ new WeakMap();
var attributesForElement = (element) => {
  let attrs = attributes.get(element);
  if (attrs === void 0) {
    attributes.set(element, attrs = /* @__PURE__ */ new Map());
  }
  return attrs;
};
var ElementShim = class Element {
  constructor() {
    this.__shadowRootMode = null;
    this.__shadowRoot = null;
    this.__internals = null;
  }
  get attributes() {
    return Array.from(attributesForElement(this)).map(([name, value]) => ({
      name,
      value
    }));
  }
  get shadowRoot() {
    if (this.__shadowRootMode === "closed") {
      return null;
    }
    return this.__shadowRoot;
  }
  setAttribute(name, value) {
    attributesForElement(this).set(name, String(value));
  }
  removeAttribute(name) {
    attributesForElement(this).delete(name);
  }
  toggleAttribute(name, force) {
    if (this.hasAttribute(name)) {
      if (force === void 0 || !force) {
        this.removeAttribute(name);
        return false;
      }
    } else {
      if (force === void 0 || force) {
        this.setAttribute(name, "");
        return true;
      } else {
        return false;
      }
    }
    return true;
  }
  hasAttribute(name) {
    return attributesForElement(this).has(name);
  }
  attachShadow(init2) {
    const shadowRoot = { host: this };
    this.__shadowRootMode = init2.mode;
    if (init2 && init2.mode === "open") {
      this.__shadowRoot = shadowRoot;
    }
    return shadowRoot;
  }
  attachInternals() {
    if (this.__internals !== null) {
      throw new Error(`Failed to execute 'attachInternals' on 'HTMLElement': ElementInternals for the specified element was already attached.`);
    }
    const internals = new ElementInternalsShim(this);
    this.__internals = internals;
    return internals;
  }
  getAttribute(name) {
    const value = attributesForElement(this).get(name);
    return value ?? null;
  }
};
var HTMLElementShim = class HTMLElement extends ElementShim {
};
var HTMLElementShimWithRealType = HTMLElementShim;
var CustomElementRegistryShim = class CustomElementRegistry {
  constructor() {
    this.__definitions = /* @__PURE__ */ new Map();
  }
  define(name, ctor) {
    if (this.__definitions.has(name)) {
      if (process.env.NODE_ENV === "development") {
        console.warn(`'CustomElementRegistry' already has "${name}" defined. This may have been caused by live reload or hot module replacement in which case it can be safely ignored.
Make sure to test your application with a production build as repeat registrations will throw in production.`);
      } else {
        throw new Error(`Failed to execute 'define' on 'CustomElementRegistry': the name "${name}" has already been used with this registry`);
      }
    }
    this.__definitions.set(name, {
      ctor,
      // Note it's important we read `observedAttributes` in case it is a getter
      // with side-effects, as is the case in Lit, where it triggers class
      // finalization.
      //
      // TODO(aomarks) To be spec compliant, we should also capture the
      // registration-time lifecycle methods like `connectedCallback`. For them
      // to be actually accessible to e.g. the Lit SSR element renderer, though,
      // we'd need to introduce a new API for accessing them (since `get` only
      // returns the constructor).
      observedAttributes: ctor.observedAttributes ?? []
    });
  }
  get(name) {
    const definition = this.__definitions.get(name);
    return definition?.ctor;
  }
};
var CustomElementRegistryShimWithRealType = CustomElementRegistryShim;
var customElements2 = new CustomElementRegistryShimWithRealType();

// node_modules/@lit/reactive-element/node/css-tag.js
var t = globalThis;
var e = t.ShadowRoot && (void 0 === t.ShadyCSS || t.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype;
var s = Symbol();
var o = /* @__PURE__ */ new WeakMap();
var n = class {
  constructor(t4, e4, o5) {
    if (this._$cssResult$ = true, o5 !== s)
      throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
    this.cssText = t4, this.t = e4;
  }
  get styleSheet() {
    let t4 = this.o;
    const s4 = this.t;
    if (e && void 0 === t4) {
      const e4 = void 0 !== s4 && 1 === s4.length;
      e4 && (t4 = o.get(s4)), void 0 === t4 && ((this.o = t4 = new CSSStyleSheet()).replaceSync(this.cssText), e4 && o.set(s4, t4));
    }
    return t4;
  }
  toString() {
    return this.cssText;
  }
};
var r = (t4) => new n("string" == typeof t4 ? t4 : t4 + "", void 0, s);
var i = (t4, ...e4) => {
  const o5 = 1 === t4.length ? t4[0] : e4.reduce((e5, s4, o6) => e5 + ((t5) => {
    if (true === t5._$cssResult$)
      return t5.cssText;
    if ("number" == typeof t5)
      return t5;
    throw Error("Value passed to 'css' function must be a 'css' function result: " + t5 + ". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.");
  })(s4) + t4[o6 + 1], t4[0]);
  return new n(o5, t4, s);
};
var S = (s4, o5) => {
  if (e)
    s4.adoptedStyleSheets = o5.map((t4) => t4 instanceof CSSStyleSheet ? t4 : t4.styleSheet);
  else
    for (const e4 of o5) {
      const o6 = document.createElement("style"), n5 = t.litNonce;
      void 0 !== n5 && o6.setAttribute("nonce", n5), o6.textContent = e4.cssText, s4.appendChild(o6);
    }
};
var c = e || void 0 === t.CSSStyleSheet ? (t4) => t4 : (t4) => t4 instanceof CSSStyleSheet ? ((t5) => {
  let e4 = "";
  for (const s4 of t5.cssRules)
    e4 += s4.cssText;
  return r(e4);
})(t4) : t4;

// node_modules/@lit/reactive-element/node/reactive-element.js
var { is: r2, defineProperty: h, getOwnPropertyDescriptor: o2, getOwnPropertyNames: n2, getOwnPropertySymbols: a, getPrototypeOf: c2 } = Object;
var l = globalThis;
l.customElements ??= customElements2;
var p = l.trustedTypes;
var d = p ? p.emptyScript : "";
var u = l.reactiveElementPolyfillSupport;
var f = (t4, s4) => t4;
var b = { toAttribute(t4, s4) {
  switch (s4) {
    case Boolean:
      t4 = t4 ? d : null;
      break;
    case Object:
    case Array:
      t4 = null == t4 ? t4 : JSON.stringify(t4);
  }
  return t4;
}, fromAttribute(t4, s4) {
  let i3 = t4;
  switch (s4) {
    case Boolean:
      i3 = null !== t4;
      break;
    case Number:
      i3 = null === t4 ? null : Number(t4);
      break;
    case Object:
    case Array:
      try {
        i3 = JSON.parse(t4);
      } catch (t5) {
        i3 = null;
      }
  }
  return i3;
} };
var y = (t4, s4) => !r2(t4, s4);
var m = { attribute: true, type: String, converter: b, reflect: false, hasChanged: y };
Symbol.metadata ??= Symbol("metadata"), l.litPropertyMetadata ??= /* @__PURE__ */ new WeakMap();
var g = class extends (globalThis.HTMLElement ?? HTMLElementShimWithRealType) {
  static addInitializer(t4) {
    this._$Ei(), (this.l ??= []).push(t4);
  }
  static get observedAttributes() {
    return this.finalize(), this._$Eh && [...this._$Eh.keys()];
  }
  static createProperty(t4, s4 = m) {
    if (s4.state && (s4.attribute = false), this._$Ei(), this.elementProperties.set(t4, s4), !s4.noAccessor) {
      const i3 = Symbol(), e4 = this.getPropertyDescriptor(t4, i3, s4);
      void 0 !== e4 && h(this.prototype, t4, e4);
    }
  }
  static getPropertyDescriptor(t4, s4, i3) {
    const { get: e4, set: r6 } = o2(this.prototype, t4) ?? { get() {
      return this[s4];
    }, set(t5) {
      this[s4] = t5;
    } };
    return { get() {
      return e4?.call(this);
    }, set(s5) {
      const h3 = e4?.call(this);
      r6.call(this, s5), this.requestUpdate(t4, h3, i3);
    }, configurable: true, enumerable: true };
  }
  static getPropertyOptions(t4) {
    return this.elementProperties.get(t4) ?? m;
  }
  static _$Ei() {
    if (this.hasOwnProperty(f("elementProperties")))
      return;
    const t4 = c2(this);
    t4.finalize(), void 0 !== t4.l && (this.l = [...t4.l]), this.elementProperties = new Map(t4.elementProperties);
  }
  static finalize() {
    if (this.hasOwnProperty(f("finalized")))
      return;
    if (this.finalized = true, this._$Ei(), this.hasOwnProperty(f("properties"))) {
      const t5 = this.properties, s4 = [...n2(t5), ...a(t5)];
      for (const i3 of s4)
        this.createProperty(i3, t5[i3]);
    }
    const t4 = this[Symbol.metadata];
    if (null !== t4) {
      const s4 = litPropertyMetadata.get(t4);
      if (void 0 !== s4)
        for (const [t5, i3] of s4)
          this.elementProperties.set(t5, i3);
    }
    this._$Eh = /* @__PURE__ */ new Map();
    for (const [t5, s4] of this.elementProperties) {
      const i3 = this._$Eu(t5, s4);
      void 0 !== i3 && this._$Eh.set(i3, t5);
    }
    this.elementStyles = this.finalizeStyles(this.styles);
  }
  static finalizeStyles(t4) {
    const s4 = [];
    if (Array.isArray(t4)) {
      const e4 = new Set(t4.flat(1 / 0).reverse());
      for (const t5 of e4)
        s4.unshift(c(t5));
    } else
      void 0 !== t4 && s4.push(c(t4));
    return s4;
  }
  static _$Eu(t4, s4) {
    const i3 = s4.attribute;
    return false === i3 ? void 0 : "string" == typeof i3 ? i3 : "string" == typeof t4 ? t4.toLowerCase() : void 0;
  }
  constructor() {
    super(), this._$Ep = void 0, this.isUpdatePending = false, this.hasUpdated = false, this._$Em = null, this._$Ev();
  }
  _$Ev() {
    this._$ES = new Promise((t4) => this.enableUpdating = t4), this._$AL = /* @__PURE__ */ new Map(), this._$E_(), this.requestUpdate(), this.constructor.l?.forEach((t4) => t4(this));
  }
  addController(t4) {
    (this._$EO ??= /* @__PURE__ */ new Set()).add(t4), void 0 !== this.renderRoot && this.isConnected && t4.hostConnected?.();
  }
  removeController(t4) {
    this._$EO?.delete(t4);
  }
  _$E_() {
    const t4 = /* @__PURE__ */ new Map(), s4 = this.constructor.elementProperties;
    for (const i3 of s4.keys())
      this.hasOwnProperty(i3) && (t4.set(i3, this[i3]), delete this[i3]);
    t4.size > 0 && (this._$Ep = t4);
  }
  createRenderRoot() {
    const t4 = this.shadowRoot ?? this.attachShadow(this.constructor.shadowRootOptions);
    return S(t4, this.constructor.elementStyles), t4;
  }
  connectedCallback() {
    this.renderRoot ??= this.createRenderRoot(), this.enableUpdating(true), this._$EO?.forEach((t4) => t4.hostConnected?.());
  }
  enableUpdating(t4) {
  }
  disconnectedCallback() {
    this._$EO?.forEach((t4) => t4.hostDisconnected?.());
  }
  attributeChangedCallback(t4, s4, i3) {
    this._$AK(t4, i3);
  }
  _$EC(t4, s4) {
    const i3 = this.constructor.elementProperties.get(t4), e4 = this.constructor._$Eu(t4, i3);
    if (void 0 !== e4 && true === i3.reflect) {
      const r6 = (void 0 !== i3.converter?.toAttribute ? i3.converter : b).toAttribute(s4, i3.type);
      this._$Em = t4, null == r6 ? this.removeAttribute(e4) : this.setAttribute(e4, r6), this._$Em = null;
    }
  }
  _$AK(t4, s4) {
    const i3 = this.constructor, e4 = i3._$Eh.get(t4);
    if (void 0 !== e4 && this._$Em !== e4) {
      const t5 = i3.getPropertyOptions(e4), r6 = "function" == typeof t5.converter ? { fromAttribute: t5.converter } : void 0 !== t5.converter?.fromAttribute ? t5.converter : b;
      this._$Em = e4, this[e4] = r6.fromAttribute(s4, t5.type), this._$Em = null;
    }
  }
  requestUpdate(t4, s4, i3) {
    if (void 0 !== t4) {
      if (i3 ??= this.constructor.getPropertyOptions(t4), !(i3.hasChanged ?? y)(this[t4], s4))
        return;
      this.P(t4, s4, i3);
    }
    false === this.isUpdatePending && (this._$ES = this._$ET());
  }
  P(t4, s4, i3) {
    this._$AL.has(t4) || this._$AL.set(t4, s4), true === i3.reflect && this._$Em !== t4 && (this._$Ej ??= /* @__PURE__ */ new Set()).add(t4);
  }
  async _$ET() {
    this.isUpdatePending = true;
    try {
      await this._$ES;
    } catch (t5) {
      Promise.reject(t5);
    }
    const t4 = this.scheduleUpdate();
    return null != t4 && await t4, !this.isUpdatePending;
  }
  scheduleUpdate() {
    return this.performUpdate();
  }
  performUpdate() {
    if (!this.isUpdatePending)
      return;
    if (!this.hasUpdated) {
      if (this.renderRoot ??= this.createRenderRoot(), this._$Ep) {
        for (const [t6, s5] of this._$Ep)
          this[t6] = s5;
        this._$Ep = void 0;
      }
      const t5 = this.constructor.elementProperties;
      if (t5.size > 0)
        for (const [s5, i3] of t5)
          true !== i3.wrapped || this._$AL.has(s5) || void 0 === this[s5] || this.P(s5, this[s5], i3);
    }
    let t4 = false;
    const s4 = this._$AL;
    try {
      t4 = this.shouldUpdate(s4), t4 ? (this.willUpdate(s4), this._$EO?.forEach((t5) => t5.hostUpdate?.()), this.update(s4)) : this._$EU();
    } catch (s5) {
      throw t4 = false, this._$EU(), s5;
    }
    t4 && this._$AE(s4);
  }
  willUpdate(t4) {
  }
  _$AE(t4) {
    this._$EO?.forEach((t5) => t5.hostUpdated?.()), this.hasUpdated || (this.hasUpdated = true, this.firstUpdated(t4)), this.updated(t4);
  }
  _$EU() {
    this._$AL = /* @__PURE__ */ new Map(), this.isUpdatePending = false;
  }
  get updateComplete() {
    return this.getUpdateComplete();
  }
  getUpdateComplete() {
    return this._$ES;
  }
  shouldUpdate(t4) {
    return true;
  }
  update(t4) {
    this._$Ej &&= this._$Ej.forEach((t5) => this._$EC(t5, this[t5])), this._$EU();
  }
  updated(t4) {
  }
  firstUpdated(t4) {
  }
};
g.elementStyles = [], g.shadowRootOptions = { mode: "open" }, g[f("elementProperties")] = /* @__PURE__ */ new Map(), g[f("finalized")] = /* @__PURE__ */ new Map(), u?.({ ReactiveElement: g }), (l.reactiveElementVersions ??= []).push("2.0.4");

// node_modules/lit-html/node/lit-html.js
var t2 = globalThis;
var i2 = t2.trustedTypes;
var s2 = i2 ? i2.createPolicy("lit-html", { createHTML: (t4) => t4 }) : void 0;
var e2 = "$lit$";
var h2 = `lit$${(Math.random() + "").slice(9)}$`;
var o3 = "?" + h2;
var n3 = `<${o3}>`;
var r3 = void 0 === t2.document ? { createTreeWalker: () => ({}) } : document;
var l2 = () => r3.createComment("");
var c3 = (t4) => null === t4 || "object" != typeof t4 && "function" != typeof t4;
var a2 = Array.isArray;
var u2 = (t4) => a2(t4) || "function" == typeof t4?.[Symbol.iterator];
var d2 = "[ 	\n\f\r]";
var f2 = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g;
var v = /-->/g;
var _ = />/g;
var m2 = RegExp(`>|${d2}(?:([^\\s"'>=/]+)(${d2}*=${d2}*(?:[^ 	
\f\r"'\`<>=]|("|')|))|$)`, "g");
var p2 = /'/g;
var g2 = /"/g;
var $ = /^(?:script|style|textarea|title)$/i;
var y2 = (t4) => (i3, ...s4) => ({ _$litType$: t4, strings: i3, values: s4 });
var x = y2(1);
var T = y2(2);
var b2 = Symbol.for("lit-noChange");
var w = Symbol.for("lit-nothing");
var A = /* @__PURE__ */ new WeakMap();
var E = r3.createTreeWalker(r3, 129);
function C(t4, i3) {
  if (!Array.isArray(t4) || !t4.hasOwnProperty("raw"))
    throw Error("invalid template strings array");
  return void 0 !== s2 ? s2.createHTML(i3) : i3;
}
var P = (t4, i3) => {
  const s4 = t4.length - 1, o5 = [];
  let r6, l3 = 2 === i3 ? "<svg>" : "", c4 = f2;
  for (let i4 = 0; i4 < s4; i4++) {
    const s5 = t4[i4];
    let a3, u3, d3 = -1, y3 = 0;
    for (; y3 < s5.length && (c4.lastIndex = y3, u3 = c4.exec(s5), null !== u3); )
      y3 = c4.lastIndex, c4 === f2 ? "!--" === u3[1] ? c4 = v : void 0 !== u3[1] ? c4 = _ : void 0 !== u3[2] ? ($.test(u3[2]) && (r6 = RegExp("</" + u3[2], "g")), c4 = m2) : void 0 !== u3[3] && (c4 = m2) : c4 === m2 ? ">" === u3[0] ? (c4 = r6 ?? f2, d3 = -1) : void 0 === u3[1] ? d3 = -2 : (d3 = c4.lastIndex - u3[2].length, a3 = u3[1], c4 = void 0 === u3[3] ? m2 : '"' === u3[3] ? g2 : p2) : c4 === g2 || c4 === p2 ? c4 = m2 : c4 === v || c4 === _ ? c4 = f2 : (c4 = m2, r6 = void 0);
    const x2 = c4 === m2 && t4[i4 + 1].startsWith("/>") ? " " : "";
    l3 += c4 === f2 ? s5 + n3 : d3 >= 0 ? (o5.push(a3), s5.slice(0, d3) + e2 + s5.slice(d3) + h2 + x2) : s5 + h2 + (-2 === d3 ? i4 : x2);
  }
  return [C(t4, l3 + (t4[s4] || "<?>") + (2 === i3 ? "</svg>" : "")), o5];
};
var V = class _V {
  constructor({ strings: t4, _$litType$: s4 }, n5) {
    let r6;
    this.parts = [];
    let c4 = 0, a3 = 0;
    const u3 = t4.length - 1, d3 = this.parts, [f3, v2] = P(t4, s4);
    if (this.el = _V.createElement(f3, n5), E.currentNode = this.el.content, 2 === s4) {
      const t5 = this.el.content.firstChild;
      t5.replaceWith(...t5.childNodes);
    }
    for (; null !== (r6 = E.nextNode()) && d3.length < u3; ) {
      if (1 === r6.nodeType) {
        if (r6.hasAttributes())
          for (const t5 of r6.getAttributeNames())
            if (t5.endsWith(e2)) {
              const i3 = v2[a3++], s5 = r6.getAttribute(t5).split(h2), e4 = /([.?@])?(.*)/.exec(i3);
              d3.push({ type: 1, index: c4, name: e4[2], strings: s5, ctor: "." === e4[1] ? R : "?" === e4[1] ? H : "@" === e4[1] ? I : k }), r6.removeAttribute(t5);
            } else
              t5.startsWith(h2) && (d3.push({ type: 6, index: c4 }), r6.removeAttribute(t5));
        if ($.test(r6.tagName)) {
          const t5 = r6.textContent.split(h2), s5 = t5.length - 1;
          if (s5 > 0) {
            r6.textContent = i2 ? i2.emptyScript : "";
            for (let i3 = 0; i3 < s5; i3++)
              r6.append(t5[i3], l2()), E.nextNode(), d3.push({ type: 2, index: ++c4 });
            r6.append(t5[s5], l2());
          }
        }
      } else if (8 === r6.nodeType)
        if (r6.data === o3)
          d3.push({ type: 2, index: c4 });
        else {
          let t5 = -1;
          for (; -1 !== (t5 = r6.data.indexOf(h2, t5 + 1)); )
            d3.push({ type: 7, index: c4 }), t5 += h2.length - 1;
        }
      c4++;
    }
  }
  static createElement(t4, i3) {
    const s4 = r3.createElement("template");
    return s4.innerHTML = t4, s4;
  }
};
function N(t4, i3, s4 = t4, e4) {
  if (i3 === b2)
    return i3;
  let h3 = void 0 !== e4 ? s4._$Co?.[e4] : s4._$Cl;
  const o5 = c3(i3) ? void 0 : i3._$litDirective$;
  return h3?.constructor !== o5 && (h3?._$AO?.(false), void 0 === o5 ? h3 = void 0 : (h3 = new o5(t4), h3._$AT(t4, s4, e4)), void 0 !== e4 ? (s4._$Co ??= [])[e4] = h3 : s4._$Cl = h3), void 0 !== h3 && (i3 = N(t4, h3._$AS(t4, i3.values), h3, e4)), i3;
}
var S2 = class {
  constructor(t4, i3) {
    this._$AV = [], this._$AN = void 0, this._$AD = t4, this._$AM = i3;
  }
  get parentNode() {
    return this._$AM.parentNode;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  u(t4) {
    const { el: { content: i3 }, parts: s4 } = this._$AD, e4 = (t4?.creationScope ?? r3).importNode(i3, true);
    E.currentNode = e4;
    let h3 = E.nextNode(), o5 = 0, n5 = 0, l3 = s4[0];
    for (; void 0 !== l3; ) {
      if (o5 === l3.index) {
        let i4;
        2 === l3.type ? i4 = new M(h3, h3.nextSibling, this, t4) : 1 === l3.type ? i4 = new l3.ctor(h3, l3.name, l3.strings, this, t4) : 6 === l3.type && (i4 = new L(h3, this, t4)), this._$AV.push(i4), l3 = s4[++n5];
      }
      o5 !== l3?.index && (h3 = E.nextNode(), o5++);
    }
    return E.currentNode = r3, e4;
  }
  p(t4) {
    let i3 = 0;
    for (const s4 of this._$AV)
      void 0 !== s4 && (void 0 !== s4.strings ? (s4._$AI(t4, s4, i3), i3 += s4.strings.length - 2) : s4._$AI(t4[i3])), i3++;
  }
};
var M = class _M {
  get _$AU() {
    return this._$AM?._$AU ?? this._$Cv;
  }
  constructor(t4, i3, s4, e4) {
    this.type = 2, this._$AH = w, this._$AN = void 0, this._$AA = t4, this._$AB = i3, this._$AM = s4, this.options = e4, this._$Cv = e4?.isConnected ?? true;
  }
  get parentNode() {
    let t4 = this._$AA.parentNode;
    const i3 = this._$AM;
    return void 0 !== i3 && 11 === t4?.nodeType && (t4 = i3.parentNode), t4;
  }
  get startNode() {
    return this._$AA;
  }
  get endNode() {
    return this._$AB;
  }
  _$AI(t4, i3 = this) {
    t4 = N(this, t4, i3), c3(t4) ? t4 === w || null == t4 || "" === t4 ? (this._$AH !== w && this._$AR(), this._$AH = w) : t4 !== this._$AH && t4 !== b2 && this._(t4) : void 0 !== t4._$litType$ ? this.$(t4) : void 0 !== t4.nodeType ? this.T(t4) : u2(t4) ? this.k(t4) : this._(t4);
  }
  S(t4) {
    return this._$AA.parentNode.insertBefore(t4, this._$AB);
  }
  T(t4) {
    this._$AH !== t4 && (this._$AR(), this._$AH = this.S(t4));
  }
  _(t4) {
    this._$AH !== w && c3(this._$AH) ? this._$AA.nextSibling.data = t4 : this.T(r3.createTextNode(t4)), this._$AH = t4;
  }
  $(t4) {
    const { values: i3, _$litType$: s4 } = t4, e4 = "number" == typeof s4 ? this._$AC(t4) : (void 0 === s4.el && (s4.el = V.createElement(C(s4.h, s4.h[0]), this.options)), s4);
    if (this._$AH?._$AD === e4)
      this._$AH.p(i3);
    else {
      const t5 = new S2(e4, this), s5 = t5.u(this.options);
      t5.p(i3), this.T(s5), this._$AH = t5;
    }
  }
  _$AC(t4) {
    let i3 = A.get(t4.strings);
    return void 0 === i3 && A.set(t4.strings, i3 = new V(t4)), i3;
  }
  k(t4) {
    a2(this._$AH) || (this._$AH = [], this._$AR());
    const i3 = this._$AH;
    let s4, e4 = 0;
    for (const h3 of t4)
      e4 === i3.length ? i3.push(s4 = new _M(this.S(l2()), this.S(l2()), this, this.options)) : s4 = i3[e4], s4._$AI(h3), e4++;
    e4 < i3.length && (this._$AR(s4 && s4._$AB.nextSibling, e4), i3.length = e4);
  }
  _$AR(t4 = this._$AA.nextSibling, i3) {
    for (this._$AP?.(false, true, i3); t4 && t4 !== this._$AB; ) {
      const i4 = t4.nextSibling;
      t4.remove(), t4 = i4;
    }
  }
  setConnected(t4) {
    void 0 === this._$AM && (this._$Cv = t4, this._$AP?.(t4));
  }
};
var k = class {
  get tagName() {
    return this.element.tagName;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  constructor(t4, i3, s4, e4, h3) {
    this.type = 1, this._$AH = w, this._$AN = void 0, this.element = t4, this.name = i3, this._$AM = e4, this.options = h3, s4.length > 2 || "" !== s4[0] || "" !== s4[1] ? (this._$AH = Array(s4.length - 1).fill(new String()), this.strings = s4) : this._$AH = w;
  }
  _$AI(t4, i3 = this, s4, e4) {
    const h3 = this.strings;
    let o5 = false;
    if (void 0 === h3)
      t4 = N(this, t4, i3, 0), o5 = !c3(t4) || t4 !== this._$AH && t4 !== b2, o5 && (this._$AH = t4);
    else {
      const e5 = t4;
      let n5, r6;
      for (t4 = h3[0], n5 = 0; n5 < h3.length - 1; n5++)
        r6 = N(this, e5[s4 + n5], i3, n5), r6 === b2 && (r6 = this._$AH[n5]), o5 ||= !c3(r6) || r6 !== this._$AH[n5], r6 === w ? t4 = w : t4 !== w && (t4 += (r6 ?? "") + h3[n5 + 1]), this._$AH[n5] = r6;
    }
    o5 && !e4 && this.j(t4);
  }
  j(t4) {
    t4 === w ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, t4 ?? "");
  }
};
var R = class extends k {
  constructor() {
    super(...arguments), this.type = 3;
  }
  j(t4) {
    this.element[this.name] = t4 === w ? void 0 : t4;
  }
};
var H = class extends k {
  constructor() {
    super(...arguments), this.type = 4;
  }
  j(t4) {
    this.element.toggleAttribute(this.name, !!t4 && t4 !== w);
  }
};
var I = class extends k {
  constructor(t4, i3, s4, e4, h3) {
    super(t4, i3, s4, e4, h3), this.type = 5;
  }
  _$AI(t4, i3 = this) {
    if ((t4 = N(this, t4, i3, 0) ?? w) === b2)
      return;
    const s4 = this._$AH, e4 = t4 === w && s4 !== w || t4.capture !== s4.capture || t4.once !== s4.once || t4.passive !== s4.passive, h3 = t4 !== w && (s4 === w || e4);
    e4 && this.element.removeEventListener(this.name, this, s4), h3 && this.element.addEventListener(this.name, this, t4), this._$AH = t4;
  }
  handleEvent(t4) {
    "function" == typeof this._$AH ? this._$AH.call(this.options?.host ?? this.element, t4) : this._$AH.handleEvent(t4);
  }
};
var L = class {
  constructor(t4, i3, s4) {
    this.element = t4, this.type = 6, this._$AN = void 0, this._$AM = i3, this.options = s4;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  _$AI(t4) {
    N(this, t4);
  }
};
var W = t2.litHtmlPolyfillSupport;
W?.(V, M), (t2.litHtmlVersions ??= []).push("3.1.2");
var Z = (t4, i3, s4) => {
  const e4 = s4?.renderBefore ?? i3;
  let h3 = e4._$litPart$;
  if (void 0 === h3) {
    const t5 = s4?.renderBefore ?? null;
    e4._$litPart$ = h3 = new M(i3.insertBefore(l2(), t5), t5, void 0, s4 ?? {});
  }
  return h3._$AI(t4), h3;
};

// node_modules/lit-element/lit-element.js
var s3 = class extends g {
  constructor() {
    super(...arguments), this.renderOptions = { host: this }, this._$Do = void 0;
  }
  createRenderRoot() {
    const t4 = super.createRenderRoot();
    return this.renderOptions.renderBefore ??= t4.firstChild, t4;
  }
  update(t4) {
    const i3 = this.render();
    this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(t4), this._$Do = Z(i3, this.renderRoot, this.renderOptions);
  }
  connectedCallback() {
    super.connectedCallback(), this._$Do?.setConnected(true);
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this._$Do?.setConnected(false);
  }
  render() {
    return b2;
  }
};
s3._$litElement$ = true, s3["finalized", "finalized"] = true, globalThis.litElementHydrateSupport?.({ LitElement: s3 });
var r4 = globalThis.litElementPolyfillSupport;
r4?.({ LitElement: s3 });
(globalThis.litElementVersions ??= []).push("4.0.4");

// node_modules/d3-array/src/fsum.js
var Adder = class {
  constructor() {
    this._partials = new Float64Array(32);
    this._n = 0;
  }
  add(x2) {
    const p3 = this._partials;
    let i3 = 0;
    for (let j = 0; j < this._n && j < 32; j++) {
      const y3 = p3[j], hi = x2 + y3, lo = Math.abs(x2) < Math.abs(y3) ? x2 - (hi - y3) : y3 - (hi - x2);
      if (lo)
        p3[i3++] = lo;
      x2 = hi;
    }
    p3[i3] = x2;
    this._n = i3 + 1;
    return this;
  }
  valueOf() {
    const p3 = this._partials;
    let n5 = this._n, x2, y3, lo, hi = 0;
    if (n5 > 0) {
      hi = p3[--n5];
      while (n5 > 0) {
        x2 = hi;
        y3 = p3[--n5];
        hi = x2 + y3;
        lo = y3 - (hi - x2);
        if (lo)
          break;
      }
      if (n5 > 0 && (lo < 0 && p3[n5 - 1] < 0 || lo > 0 && p3[n5 - 1] > 0)) {
        y3 = lo * 2;
        x2 = hi + y3;
        if (y3 == x2 - hi)
          hi = x2;
      }
    }
    return hi;
  }
};

// node_modules/d3-array/src/merge.js
function* flatten(arrays) {
  for (const array2 of arrays) {
    yield* array2;
  }
}
function merge(arrays) {
  return Array.from(flatten(arrays));
}

// node_modules/d3-dispatch/src/dispatch.js
var noop = { value: () => {
} };
function dispatch() {
  for (var i3 = 0, n5 = arguments.length, _2 = {}, t4; i3 < n5; ++i3) {
    if (!(t4 = arguments[i3] + "") || t4 in _2 || /[\s.]/.test(t4))
      throw new Error("illegal type: " + t4);
    _2[t4] = [];
  }
  return new Dispatch(_2);
}
function Dispatch(_2) {
  this._ = _2;
}
function parseTypenames(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function(t4) {
    var name = "", i3 = t4.indexOf(".");
    if (i3 >= 0)
      name = t4.slice(i3 + 1), t4 = t4.slice(0, i3);
    if (t4 && !types.hasOwnProperty(t4))
      throw new Error("unknown type: " + t4);
    return { type: t4, name };
  });
}
Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function(typename, callback) {
    var _2 = this._, T2 = parseTypenames(typename + "", _2), t4, i3 = -1, n5 = T2.length;
    if (arguments.length < 2) {
      while (++i3 < n5)
        if ((t4 = (typename = T2[i3]).type) && (t4 = get(_2[t4], typename.name)))
          return t4;
      return;
    }
    if (callback != null && typeof callback !== "function")
      throw new Error("invalid callback: " + callback);
    while (++i3 < n5) {
      if (t4 = (typename = T2[i3]).type)
        _2[t4] = set(_2[t4], typename.name, callback);
      else if (callback == null)
        for (t4 in _2)
          _2[t4] = set(_2[t4], typename.name, null);
    }
    return this;
  },
  copy: function() {
    var copy = {}, _2 = this._;
    for (var t4 in _2)
      copy[t4] = _2[t4].slice();
    return new Dispatch(copy);
  },
  call: function(type2, that) {
    if ((n5 = arguments.length - 2) > 0)
      for (var args = new Array(n5), i3 = 0, n5, t4; i3 < n5; ++i3)
        args[i3] = arguments[i3 + 2];
    if (!this._.hasOwnProperty(type2))
      throw new Error("unknown type: " + type2);
    for (t4 = this._[type2], i3 = 0, n5 = t4.length; i3 < n5; ++i3)
      t4[i3].value.apply(that, args);
  },
  apply: function(type2, that, args) {
    if (!this._.hasOwnProperty(type2))
      throw new Error("unknown type: " + type2);
    for (var t4 = this._[type2], i3 = 0, n5 = t4.length; i3 < n5; ++i3)
      t4[i3].value.apply(that, args);
  }
};
function get(type2, name) {
  for (var i3 = 0, n5 = type2.length, c4; i3 < n5; ++i3) {
    if ((c4 = type2[i3]).name === name) {
      return c4.value;
    }
  }
}
function set(type2, name, callback) {
  for (var i3 = 0, n5 = type2.length; i3 < n5; ++i3) {
    if (type2[i3].name === name) {
      type2[i3] = noop, type2 = type2.slice(0, i3).concat(type2.slice(i3 + 1));
      break;
    }
  }
  if (callback != null)
    type2.push({ name, value: callback });
  return type2;
}
var dispatch_default = dispatch;

// node_modules/d3-selection/src/namespaces.js
var xhtml = "http://www.w3.org/1999/xhtml";
var namespaces_default = {
  svg: "http://www.w3.org/2000/svg",
  xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};

// node_modules/d3-selection/src/namespace.js
function namespace_default(name) {
  var prefix = name += "", i3 = prefix.indexOf(":");
  if (i3 >= 0 && (prefix = name.slice(0, i3)) !== "xmlns")
    name = name.slice(i3 + 1);
  return namespaces_default.hasOwnProperty(prefix) ? { space: namespaces_default[prefix], local: name } : name;
}

// node_modules/d3-selection/src/creator.js
function creatorInherit(name) {
  return function() {
    var document2 = this.ownerDocument, uri = this.namespaceURI;
    return uri === xhtml && document2.documentElement.namespaceURI === xhtml ? document2.createElement(name) : document2.createElementNS(uri, name);
  };
}
function creatorFixed(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}
function creator_default(name) {
  var fullname = namespace_default(name);
  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
}

// node_modules/d3-selection/src/selector.js
function none() {
}
function selector_default(selector) {
  return selector == null ? none : function() {
    return this.querySelector(selector);
  };
}

// node_modules/d3-selection/src/selection/select.js
function select_default(select) {
  if (typeof select !== "function")
    select = selector_default(select);
  for (var groups = this._groups, m3 = groups.length, subgroups = new Array(m3), j = 0; j < m3; ++j) {
    for (var group = groups[j], n5 = group.length, subgroup = subgroups[j] = new Array(n5), node, subnode, i3 = 0; i3 < n5; ++i3) {
      if ((node = group[i3]) && (subnode = select.call(node, node.__data__, i3, group))) {
        if ("__data__" in node)
          subnode.__data__ = node.__data__;
        subgroup[i3] = subnode;
      }
    }
  }
  return new Selection(subgroups, this._parents);
}

// node_modules/d3-selection/src/array.js
function array(x2) {
  return x2 == null ? [] : Array.isArray(x2) ? x2 : Array.from(x2);
}

// node_modules/d3-selection/src/selectorAll.js
function empty() {
  return [];
}
function selectorAll_default(selector) {
  return selector == null ? empty : function() {
    return this.querySelectorAll(selector);
  };
}

// node_modules/d3-selection/src/selection/selectAll.js
function arrayAll(select) {
  return function() {
    return array(select.apply(this, arguments));
  };
}
function selectAll_default(select) {
  if (typeof select === "function")
    select = arrayAll(select);
  else
    select = selectorAll_default(select);
  for (var groups = this._groups, m3 = groups.length, subgroups = [], parents = [], j = 0; j < m3; ++j) {
    for (var group = groups[j], n5 = group.length, node, i3 = 0; i3 < n5; ++i3) {
      if (node = group[i3]) {
        subgroups.push(select.call(node, node.__data__, i3, group));
        parents.push(node);
      }
    }
  }
  return new Selection(subgroups, parents);
}

// node_modules/d3-selection/src/matcher.js
function matcher_default(selector) {
  return function() {
    return this.matches(selector);
  };
}
function childMatcher(selector) {
  return function(node) {
    return node.matches(selector);
  };
}

// node_modules/d3-selection/src/selection/selectChild.js
var find = Array.prototype.find;
function childFind(match) {
  return function() {
    return find.call(this.children, match);
  };
}
function childFirst() {
  return this.firstElementChild;
}
function selectChild_default(match) {
  return this.select(match == null ? childFirst : childFind(typeof match === "function" ? match : childMatcher(match)));
}

// node_modules/d3-selection/src/selection/selectChildren.js
var filter = Array.prototype.filter;
function children() {
  return Array.from(this.children);
}
function childrenFilter(match) {
  return function() {
    return filter.call(this.children, match);
  };
}
function selectChildren_default(match) {
  return this.selectAll(match == null ? children : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
}

// node_modules/d3-selection/src/selection/filter.js
function filter_default(match) {
  if (typeof match !== "function")
    match = matcher_default(match);
  for (var groups = this._groups, m3 = groups.length, subgroups = new Array(m3), j = 0; j < m3; ++j) {
    for (var group = groups[j], n5 = group.length, subgroup = subgroups[j] = [], node, i3 = 0; i3 < n5; ++i3) {
      if ((node = group[i3]) && match.call(node, node.__data__, i3, group)) {
        subgroup.push(node);
      }
    }
  }
  return new Selection(subgroups, this._parents);
}

// node_modules/d3-selection/src/selection/sparse.js
function sparse_default(update) {
  return new Array(update.length);
}

// node_modules/d3-selection/src/selection/enter.js
function enter_default() {
  return new Selection(this._enter || this._groups.map(sparse_default), this._parents);
}
function EnterNode(parent, datum2) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum2;
}
EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function(child) {
    return this._parent.insertBefore(child, this._next);
  },
  insertBefore: function(child, next) {
    return this._parent.insertBefore(child, next);
  },
  querySelector: function(selector) {
    return this._parent.querySelector(selector);
  },
  querySelectorAll: function(selector) {
    return this._parent.querySelectorAll(selector);
  }
};

// node_modules/d3-selection/src/constant.js
function constant_default(x2) {
  return function() {
    return x2;
  };
}

// node_modules/d3-selection/src/selection/data.js
function bindIndex(parent, group, enter, update, exit, data) {
  var i3 = 0, node, groupLength = group.length, dataLength = data.length;
  for (; i3 < dataLength; ++i3) {
    if (node = group[i3]) {
      node.__data__ = data[i3];
      update[i3] = node;
    } else {
      enter[i3] = new EnterNode(parent, data[i3]);
    }
  }
  for (; i3 < groupLength; ++i3) {
    if (node = group[i3]) {
      exit[i3] = node;
    }
  }
}
function bindKey(parent, group, enter, update, exit, data, key) {
  var i3, node, nodeByKeyValue = /* @__PURE__ */ new Map(), groupLength = group.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
  for (i3 = 0; i3 < groupLength; ++i3) {
    if (node = group[i3]) {
      keyValues[i3] = keyValue = key.call(node, node.__data__, i3, group) + "";
      if (nodeByKeyValue.has(keyValue)) {
        exit[i3] = node;
      } else {
        nodeByKeyValue.set(keyValue, node);
      }
    }
  }
  for (i3 = 0; i3 < dataLength; ++i3) {
    keyValue = key.call(parent, data[i3], i3, data) + "";
    if (node = nodeByKeyValue.get(keyValue)) {
      update[i3] = node;
      node.__data__ = data[i3];
      nodeByKeyValue.delete(keyValue);
    } else {
      enter[i3] = new EnterNode(parent, data[i3]);
    }
  }
  for (i3 = 0; i3 < groupLength; ++i3) {
    if ((node = group[i3]) && nodeByKeyValue.get(keyValues[i3]) === node) {
      exit[i3] = node;
    }
  }
}
function datum(node) {
  return node.__data__;
}
function data_default(value, key) {
  if (!arguments.length)
    return Array.from(this, datum);
  var bind = key ? bindKey : bindIndex, parents = this._parents, groups = this._groups;
  if (typeof value !== "function")
    value = constant_default(value);
  for (var m3 = groups.length, update = new Array(m3), enter = new Array(m3), exit = new Array(m3), j = 0; j < m3; ++j) {
    var parent = parents[j], group = groups[j], groupLength = group.length, data = arraylike(value.call(parent, parent && parent.__data__, j, parents)), dataLength = data.length, enterGroup = enter[j] = new Array(dataLength), updateGroup = update[j] = new Array(dataLength), exitGroup = exit[j] = new Array(groupLength);
    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1)
          i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength)
          ;
        previous._next = next || null;
      }
    }
  }
  update = new Selection(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}
function arraylike(data) {
  return typeof data === "object" && "length" in data ? data : Array.from(data);
}

// node_modules/d3-selection/src/selection/exit.js
function exit_default() {
  return new Selection(this._exit || this._groups.map(sparse_default), this._parents);
}

// node_modules/d3-selection/src/selection/join.js
function join_default(onenter, onupdate, onexit) {
  var enter = this.enter(), update = this, exit = this.exit();
  if (typeof onenter === "function") {
    enter = onenter(enter);
    if (enter)
      enter = enter.selection();
  } else {
    enter = enter.append(onenter + "");
  }
  if (onupdate != null) {
    update = onupdate(update);
    if (update)
      update = update.selection();
  }
  if (onexit == null)
    exit.remove();
  else
    onexit(exit);
  return enter && update ? enter.merge(update).order() : update;
}

// node_modules/d3-selection/src/selection/merge.js
function merge_default(context) {
  var selection2 = context.selection ? context.selection() : context;
  for (var groups0 = this._groups, groups1 = selection2._groups, m0 = groups0.length, m1 = groups1.length, m3 = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m3; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n5 = group0.length, merge2 = merges[j] = new Array(n5), node, i3 = 0; i3 < n5; ++i3) {
      if (node = group0[i3] || group1[i3]) {
        merge2[i3] = node;
      }
    }
  }
  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }
  return new Selection(merges, this._parents);
}

// node_modules/d3-selection/src/selection/order.js
function order_default() {
  for (var groups = this._groups, j = -1, m3 = groups.length; ++j < m3; ) {
    for (var group = groups[j], i3 = group.length - 1, next = group[i3], node; --i3 >= 0; ) {
      if (node = group[i3]) {
        if (next && node.compareDocumentPosition(next) ^ 4)
          next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }
  return this;
}

// node_modules/d3-selection/src/selection/sort.js
function sort_default(compare) {
  if (!compare)
    compare = ascending;
  function compareNode(a3, b3) {
    return a3 && b3 ? compare(a3.__data__, b3.__data__) : !a3 - !b3;
  }
  for (var groups = this._groups, m3 = groups.length, sortgroups = new Array(m3), j = 0; j < m3; ++j) {
    for (var group = groups[j], n5 = group.length, sortgroup = sortgroups[j] = new Array(n5), node, i3 = 0; i3 < n5; ++i3) {
      if (node = group[i3]) {
        sortgroup[i3] = node;
      }
    }
    sortgroup.sort(compareNode);
  }
  return new Selection(sortgroups, this._parents).order();
}
function ascending(a3, b3) {
  return a3 < b3 ? -1 : a3 > b3 ? 1 : a3 >= b3 ? 0 : NaN;
}

// node_modules/d3-selection/src/selection/call.js
function call_default() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}

// node_modules/d3-selection/src/selection/nodes.js
function nodes_default() {
  return Array.from(this);
}

// node_modules/d3-selection/src/selection/node.js
function node_default() {
  for (var groups = this._groups, j = 0, m3 = groups.length; j < m3; ++j) {
    for (var group = groups[j], i3 = 0, n5 = group.length; i3 < n5; ++i3) {
      var node = group[i3];
      if (node)
        return node;
    }
  }
  return null;
}

// node_modules/d3-selection/src/selection/size.js
function size_default() {
  let size = 0;
  for (const node of this)
    ++size;
  return size;
}

// node_modules/d3-selection/src/selection/empty.js
function empty_default() {
  return !this.node();
}

// node_modules/d3-selection/src/selection/each.js
function each_default(callback) {
  for (var groups = this._groups, j = 0, m3 = groups.length; j < m3; ++j) {
    for (var group = groups[j], i3 = 0, n5 = group.length, node; i3 < n5; ++i3) {
      if (node = group[i3])
        callback.call(node, node.__data__, i3, group);
    }
  }
  return this;
}

// node_modules/d3-selection/src/selection/attr.js
function attrRemove(name) {
  return function() {
    this.removeAttribute(name);
  };
}
function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant(name, value) {
  return function() {
    this.setAttribute(name, value);
  };
}
function attrConstantNS(fullname, value) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}
function attrFunction(name, value) {
  return function() {
    var v2 = value.apply(this, arguments);
    if (v2 == null)
      this.removeAttribute(name);
    else
      this.setAttribute(name, v2);
  };
}
function attrFunctionNS(fullname, value) {
  return function() {
    var v2 = value.apply(this, arguments);
    if (v2 == null)
      this.removeAttributeNS(fullname.space, fullname.local);
    else
      this.setAttributeNS(fullname.space, fullname.local, v2);
  };
}
function attr_default(name, value) {
  var fullname = namespace_default(name);
  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
  }
  return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
}

// node_modules/d3-selection/src/window.js
function window_default(node) {
  return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;
}

// node_modules/d3-selection/src/selection/style.js
function styleRemove(name) {
  return function() {
    this.style.removeProperty(name);
  };
}
function styleConstant(name, value, priority) {
  return function() {
    this.style.setProperty(name, value, priority);
  };
}
function styleFunction(name, value, priority) {
  return function() {
    var v2 = value.apply(this, arguments);
    if (v2 == null)
      this.style.removeProperty(name);
    else
      this.style.setProperty(name, v2, priority);
  };
}
function style_default(name, value, priority) {
  return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
}
function styleValue(node, name) {
  return node.style.getPropertyValue(name) || window_default(node).getComputedStyle(node, null).getPropertyValue(name);
}

// node_modules/d3-selection/src/selection/property.js
function propertyRemove(name) {
  return function() {
    delete this[name];
  };
}
function propertyConstant(name, value) {
  return function() {
    this[name] = value;
  };
}
function propertyFunction(name, value) {
  return function() {
    var v2 = value.apply(this, arguments);
    if (v2 == null)
      delete this[name];
    else
      this[name] = v2;
  };
}
function property_default(name, value) {
  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
}

// node_modules/d3-selection/src/selection/classed.js
function classArray(string) {
  return string.trim().split(/^|\s+/);
}
function classList(node) {
  return node.classList || new ClassList(node);
}
function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}
ClassList.prototype = {
  add: function(name) {
    var i3 = this._names.indexOf(name);
    if (i3 < 0) {
      this._names.push(name);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function(name) {
    var i3 = this._names.indexOf(name);
    if (i3 >= 0) {
      this._names.splice(i3, 1);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function(name) {
    return this._names.indexOf(name) >= 0;
  }
};
function classedAdd(node, names) {
  var list = classList(node), i3 = -1, n5 = names.length;
  while (++i3 < n5)
    list.add(names[i3]);
}
function classedRemove(node, names) {
  var list = classList(node), i3 = -1, n5 = names.length;
  while (++i3 < n5)
    list.remove(names[i3]);
}
function classedTrue(names) {
  return function() {
    classedAdd(this, names);
  };
}
function classedFalse(names) {
  return function() {
    classedRemove(this, names);
  };
}
function classedFunction(names, value) {
  return function() {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}
function classed_default(name, value) {
  var names = classArray(name + "");
  if (arguments.length < 2) {
    var list = classList(this.node()), i3 = -1, n5 = names.length;
    while (++i3 < n5)
      if (!list.contains(names[i3]))
        return false;
    return true;
  }
  return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
}

// node_modules/d3-selection/src/selection/text.js
function textRemove() {
  this.textContent = "";
}
function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}
function textFunction(value) {
  return function() {
    var v2 = value.apply(this, arguments);
    this.textContent = v2 == null ? "" : v2;
  };
}
function text_default(value) {
  return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
}

// node_modules/d3-selection/src/selection/html.js
function htmlRemove() {
  this.innerHTML = "";
}
function htmlConstant(value) {
  return function() {
    this.innerHTML = value;
  };
}
function htmlFunction(value) {
  return function() {
    var v2 = value.apply(this, arguments);
    this.innerHTML = v2 == null ? "" : v2;
  };
}
function html_default(value) {
  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
}

// node_modules/d3-selection/src/selection/raise.js
function raise() {
  if (this.nextSibling)
    this.parentNode.appendChild(this);
}
function raise_default() {
  return this.each(raise);
}

// node_modules/d3-selection/src/selection/lower.js
function lower() {
  if (this.previousSibling)
    this.parentNode.insertBefore(this, this.parentNode.firstChild);
}
function lower_default() {
  return this.each(lower);
}

// node_modules/d3-selection/src/selection/append.js
function append_default(name) {
  var create2 = typeof name === "function" ? name : creator_default(name);
  return this.select(function() {
    return this.appendChild(create2.apply(this, arguments));
  });
}

// node_modules/d3-selection/src/selection/insert.js
function constantNull() {
  return null;
}
function insert_default(name, before) {
  var create2 = typeof name === "function" ? name : creator_default(name), select = before == null ? constantNull : typeof before === "function" ? before : selector_default(before);
  return this.select(function() {
    return this.insertBefore(create2.apply(this, arguments), select.apply(this, arguments) || null);
  });
}

// node_modules/d3-selection/src/selection/remove.js
function remove() {
  var parent = this.parentNode;
  if (parent)
    parent.removeChild(this);
}
function remove_default() {
  return this.each(remove);
}

// node_modules/d3-selection/src/selection/clone.js
function selection_cloneShallow() {
  var clone = this.cloneNode(false), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
function selection_cloneDeep() {
  var clone = this.cloneNode(true), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
function clone_default(deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}

// node_modules/d3-selection/src/selection/datum.js
function datum_default(value) {
  return arguments.length ? this.property("__data__", value) : this.node().__data__;
}

// node_modules/d3-selection/src/selection/on.js
function contextListener(listener) {
  return function(event) {
    listener.call(this, event, this.__data__);
  };
}
function parseTypenames2(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t4) {
    var name = "", i3 = t4.indexOf(".");
    if (i3 >= 0)
      name = t4.slice(i3 + 1), t4 = t4.slice(0, i3);
    return { type: t4, name };
  });
}
function onRemove(typename) {
  return function() {
    var on = this.__on;
    if (!on)
      return;
    for (var j = 0, i3 = -1, m3 = on.length, o5; j < m3; ++j) {
      if (o5 = on[j], (!typename.type || o5.type === typename.type) && o5.name === typename.name) {
        this.removeEventListener(o5.type, o5.listener, o5.options);
      } else {
        on[++i3] = o5;
      }
    }
    if (++i3)
      on.length = i3;
    else
      delete this.__on;
  };
}
function onAdd(typename, value, options) {
  return function() {
    var on = this.__on, o5, listener = contextListener(value);
    if (on)
      for (var j = 0, m3 = on.length; j < m3; ++j) {
        if ((o5 = on[j]).type === typename.type && o5.name === typename.name) {
          this.removeEventListener(o5.type, o5.listener, o5.options);
          this.addEventListener(o5.type, o5.listener = listener, o5.options = options);
          o5.value = value;
          return;
        }
      }
    this.addEventListener(typename.type, listener, options);
    o5 = { type: typename.type, name: typename.name, value, listener, options };
    if (!on)
      this.__on = [o5];
    else
      on.push(o5);
  };
}
function on_default(typename, value, options) {
  var typenames = parseTypenames2(typename + ""), i3, n5 = typenames.length, t4;
  if (arguments.length < 2) {
    var on = this.node().__on;
    if (on)
      for (var j = 0, m3 = on.length, o5; j < m3; ++j) {
        for (i3 = 0, o5 = on[j]; i3 < n5; ++i3) {
          if ((t4 = typenames[i3]).type === o5.type && t4.name === o5.name) {
            return o5.value;
          }
        }
      }
    return;
  }
  on = value ? onAdd : onRemove;
  for (i3 = 0; i3 < n5; ++i3)
    this.each(on(typenames[i3], value, options));
  return this;
}

// node_modules/d3-selection/src/selection/dispatch.js
function dispatchEvent(node, type2, params) {
  var window2 = window_default(node), event = window2.CustomEvent;
  if (typeof event === "function") {
    event = new event(type2, params);
  } else {
    event = window2.document.createEvent("Event");
    if (params)
      event.initEvent(type2, params.bubbles, params.cancelable), event.detail = params.detail;
    else
      event.initEvent(type2, false, false);
  }
  node.dispatchEvent(event);
}
function dispatchConstant(type2, params) {
  return function() {
    return dispatchEvent(this, type2, params);
  };
}
function dispatchFunction(type2, params) {
  return function() {
    return dispatchEvent(this, type2, params.apply(this, arguments));
  };
}
function dispatch_default2(type2, params) {
  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type2, params));
}

// node_modules/d3-selection/src/selection/iterator.js
function* iterator_default() {
  for (var groups = this._groups, j = 0, m3 = groups.length; j < m3; ++j) {
    for (var group = groups[j], i3 = 0, n5 = group.length, node; i3 < n5; ++i3) {
      if (node = group[i3])
        yield node;
    }
  }
}

// node_modules/d3-selection/src/selection/index.js
var root = [null];
function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}
function selection() {
  return new Selection([[document.documentElement]], root);
}
function selection_selection() {
  return this;
}
Selection.prototype = selection.prototype = {
  constructor: Selection,
  select: select_default,
  selectAll: selectAll_default,
  selectChild: selectChild_default,
  selectChildren: selectChildren_default,
  filter: filter_default,
  data: data_default,
  enter: enter_default,
  exit: exit_default,
  join: join_default,
  merge: merge_default,
  selection: selection_selection,
  order: order_default,
  sort: sort_default,
  call: call_default,
  nodes: nodes_default,
  node: node_default,
  size: size_default,
  empty: empty_default,
  each: each_default,
  attr: attr_default,
  style: style_default,
  property: property_default,
  classed: classed_default,
  text: text_default,
  html: html_default,
  raise: raise_default,
  lower: lower_default,
  append: append_default,
  insert: insert_default,
  remove: remove_default,
  clone: clone_default,
  datum: datum_default,
  on: on_default,
  dispatch: dispatch_default2,
  [Symbol.iterator]: iterator_default
};
var selection_default = selection;

// node_modules/d3-selection/src/select.js
function select_default2(selector) {
  return typeof selector === "string" ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root);
}

// node_modules/d3-selection/src/sourceEvent.js
function sourceEvent_default(event) {
  let sourceEvent;
  while (sourceEvent = event.sourceEvent)
    event = sourceEvent;
  return event;
}

// node_modules/d3-selection/src/pointer.js
function pointer_default(event, node) {
  event = sourceEvent_default(event);
  if (node === void 0)
    node = event.currentTarget;
  if (node) {
    var svg = node.ownerSVGElement || node;
    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      point.x = event.clientX, point.y = event.clientY;
      point = point.matrixTransform(node.getScreenCTM().inverse());
      return [point.x, point.y];
    }
    if (node.getBoundingClientRect) {
      var rect = node.getBoundingClientRect();
      return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
    }
  }
  return [event.pageX, event.pageY];
}

// node_modules/d3-drag/src/noevent.js
var nonpassivecapture = { capture: true, passive: false };
function noevent_default(event) {
  event.preventDefault();
  event.stopImmediatePropagation();
}

// node_modules/d3-drag/src/nodrag.js
function nodrag_default(view) {
  var root2 = view.document.documentElement, selection2 = select_default2(view).on("dragstart.drag", noevent_default, nonpassivecapture);
  if ("onselectstart" in root2) {
    selection2.on("selectstart.drag", noevent_default, nonpassivecapture);
  } else {
    root2.__noselect = root2.style.MozUserSelect;
    root2.style.MozUserSelect = "none";
  }
}
function yesdrag(view, noclick) {
  var root2 = view.document.documentElement, selection2 = select_default2(view).on("dragstart.drag", null);
  if (noclick) {
    selection2.on("click.drag", noevent_default, nonpassivecapture);
    setTimeout(function() {
      selection2.on("click.drag", null);
    }, 0);
  }
  if ("onselectstart" in root2) {
    selection2.on("selectstart.drag", null);
  } else {
    root2.style.MozUserSelect = root2.__noselect;
    delete root2.__noselect;
  }
}

// node_modules/d3-color/src/define.js
function define_default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition)
    prototype[key] = definition[key];
  return prototype;
}

// node_modules/d3-color/src/color.js
function Color() {
}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*";
var reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex = /^#([0-9a-f]{3,8})$/;
var reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`);
var reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`);
var reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`);
var reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`);
var reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`);
var reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
var named = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define_default(Color, color, {
  copy(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable() {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHex8: color_formatHex8,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHex8() {
  return this.rgb().formatHex8();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format) {
  var m3, l3;
  format = (format + "").trim().toLowerCase();
  return (m3 = reHex.exec(format)) ? (l3 = m3[1].length, m3 = parseInt(m3[1], 16), l3 === 6 ? rgbn(m3) : l3 === 3 ? new Rgb(m3 >> 8 & 15 | m3 >> 4 & 240, m3 >> 4 & 15 | m3 & 240, (m3 & 15) << 4 | m3 & 15, 1) : l3 === 8 ? rgba(m3 >> 24 & 255, m3 >> 16 & 255, m3 >> 8 & 255, (m3 & 255) / 255) : l3 === 4 ? rgba(m3 >> 12 & 15 | m3 >> 8 & 240, m3 >> 8 & 15 | m3 >> 4 & 240, m3 >> 4 & 15 | m3 & 240, ((m3 & 15) << 4 | m3 & 15) / 255) : null) : (m3 = reRgbInteger.exec(format)) ? new Rgb(m3[1], m3[2], m3[3], 1) : (m3 = reRgbPercent.exec(format)) ? new Rgb(m3[1] * 255 / 100, m3[2] * 255 / 100, m3[3] * 255 / 100, 1) : (m3 = reRgbaInteger.exec(format)) ? rgba(m3[1], m3[2], m3[3], m3[4]) : (m3 = reRgbaPercent.exec(format)) ? rgba(m3[1] * 255 / 100, m3[2] * 255 / 100, m3[3] * 255 / 100, m3[4]) : (m3 = reHslPercent.exec(format)) ? hsla(m3[1], m3[2] / 100, m3[3] / 100, 1) : (m3 = reHslaPercent.exec(format)) ? hsla(m3[1], m3[2] / 100, m3[3] / 100, m3[4]) : named.hasOwnProperty(format) ? rgbn(named[format]) : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n5) {
  return new Rgb(n5 >> 16 & 255, n5 >> 8 & 255, n5 & 255, 1);
}
function rgba(r6, g3, b3, a3) {
  if (a3 <= 0)
    r6 = g3 = b3 = NaN;
  return new Rgb(r6, g3, b3, a3);
}
function rgbConvert(o5) {
  if (!(o5 instanceof Color))
    o5 = color(o5);
  if (!o5)
    return new Rgb();
  o5 = o5.rgb();
  return new Rgb(o5.r, o5.g, o5.b, o5.opacity);
}
function rgb(r6, g3, b3, opacity) {
  return arguments.length === 1 ? rgbConvert(r6) : new Rgb(r6, g3, b3, opacity == null ? 1 : opacity);
}
function Rgb(r6, g3, b3, opacity) {
  this.r = +r6;
  this.g = +g3;
  this.b = +b3;
  this.opacity = +opacity;
}
define_default(Rgb, rgb, extend(Color, {
  brighter(k2) {
    k2 = k2 == null ? brighter : Math.pow(brighter, k2);
    return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
  },
  darker(k2) {
    k2 = k2 == null ? darker : Math.pow(darker, k2);
    return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
  },
  rgb() {
    return this;
  },
  clamp() {
    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
  },
  displayable() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatHex8: rgb_formatHex8,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));
function rgb_formatHex() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
}
function rgb_formatHex8() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}
function rgb_formatRgb() {
  const a3 = clampa(this.opacity);
  return `${a3 === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a3 === 1 ? ")" : `, ${a3})`}`;
}
function clampa(opacity) {
  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}
function clampi(value) {
  return Math.max(0, Math.min(255, Math.round(value) || 0));
}
function hex(value) {
  value = clampi(value);
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h3, s4, l3, a3) {
  if (a3 <= 0)
    h3 = s4 = l3 = NaN;
  else if (l3 <= 0 || l3 >= 1)
    h3 = s4 = NaN;
  else if (s4 <= 0)
    h3 = NaN;
  return new Hsl(h3, s4, l3, a3);
}
function hslConvert(o5) {
  if (o5 instanceof Hsl)
    return new Hsl(o5.h, o5.s, o5.l, o5.opacity);
  if (!(o5 instanceof Color))
    o5 = color(o5);
  if (!o5)
    return new Hsl();
  if (o5 instanceof Hsl)
    return o5;
  o5 = o5.rgb();
  var r6 = o5.r / 255, g3 = o5.g / 255, b3 = o5.b / 255, min2 = Math.min(r6, g3, b3), max2 = Math.max(r6, g3, b3), h3 = NaN, s4 = max2 - min2, l3 = (max2 + min2) / 2;
  if (s4) {
    if (r6 === max2)
      h3 = (g3 - b3) / s4 + (g3 < b3) * 6;
    else if (g3 === max2)
      h3 = (b3 - r6) / s4 + 2;
    else
      h3 = (r6 - g3) / s4 + 4;
    s4 /= l3 < 0.5 ? max2 + min2 : 2 - max2 - min2;
    h3 *= 60;
  } else {
    s4 = l3 > 0 && l3 < 1 ? 0 : h3;
  }
  return new Hsl(h3, s4, l3, o5.opacity);
}
function hsl(h3, s4, l3, opacity) {
  return arguments.length === 1 ? hslConvert(h3) : new Hsl(h3, s4, l3, opacity == null ? 1 : opacity);
}
function Hsl(h3, s4, l3, opacity) {
  this.h = +h3;
  this.s = +s4;
  this.l = +l3;
  this.opacity = +opacity;
}
define_default(Hsl, hsl, extend(Color, {
  brighter(k2) {
    k2 = k2 == null ? brighter : Math.pow(brighter, k2);
    return new Hsl(this.h, this.s, this.l * k2, this.opacity);
  },
  darker(k2) {
    k2 = k2 == null ? darker : Math.pow(darker, k2);
    return new Hsl(this.h, this.s, this.l * k2, this.opacity);
  },
  rgb() {
    var h3 = this.h % 360 + (this.h < 0) * 360, s4 = isNaN(h3) || isNaN(this.s) ? 0 : this.s, l3 = this.l, m22 = l3 + (l3 < 0.5 ? l3 : 1 - l3) * s4, m1 = 2 * l3 - m22;
    return new Rgb(
      hsl2rgb(h3 >= 240 ? h3 - 240 : h3 + 120, m1, m22),
      hsl2rgb(h3, m1, m22),
      hsl2rgb(h3 < 120 ? h3 + 240 : h3 - 120, m1, m22),
      this.opacity
    );
  },
  clamp() {
    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
  },
  displayable() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl() {
    const a3 = clampa(this.opacity);
    return `${a3 === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a3 === 1 ? ")" : `, ${a3})`}`;
  }
}));
function clamph(value) {
  value = (value || 0) % 360;
  return value < 0 ? value + 360 : value;
}
function clampt(value) {
  return Math.max(0, Math.min(1, value || 0));
}
function hsl2rgb(h3, m1, m22) {
  return (h3 < 60 ? m1 + (m22 - m1) * h3 / 60 : h3 < 180 ? m22 : h3 < 240 ? m1 + (m22 - m1) * (240 - h3) / 60 : m1) * 255;
}

// node_modules/d3-interpolate/src/basis.js
function basis(t1, v0, v1, v2, v3) {
  var t22 = t1 * t1, t32 = t22 * t1;
  return ((1 - 3 * t1 + 3 * t22 - t32) * v0 + (4 - 6 * t22 + 3 * t32) * v1 + (1 + 3 * t1 + 3 * t22 - 3 * t32) * v2 + t32 * v3) / 6;
}
function basis_default(values) {
  var n5 = values.length - 1;
  return function(t4) {
    var i3 = t4 <= 0 ? t4 = 0 : t4 >= 1 ? (t4 = 1, n5 - 1) : Math.floor(t4 * n5), v1 = values[i3], v2 = values[i3 + 1], v0 = i3 > 0 ? values[i3 - 1] : 2 * v1 - v2, v3 = i3 < n5 - 1 ? values[i3 + 2] : 2 * v2 - v1;
    return basis((t4 - i3 / n5) * n5, v0, v1, v2, v3);
  };
}

// node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default(values) {
  var n5 = values.length;
  return function(t4) {
    var i3 = Math.floor(((t4 %= 1) < 0 ? ++t4 : t4) * n5), v0 = values[(i3 + n5 - 1) % n5], v1 = values[i3 % n5], v2 = values[(i3 + 1) % n5], v3 = values[(i3 + 2) % n5];
    return basis((t4 - i3 / n5) * n5, v0, v1, v2, v3);
  };
}

// node_modules/d3-interpolate/src/constant.js
var constant_default2 = (x2) => () => x2;

// node_modules/d3-interpolate/src/color.js
function linear(a3, d3) {
  return function(t4) {
    return a3 + t4 * d3;
  };
}
function exponential(a3, b3, y3) {
  return a3 = Math.pow(a3, y3), b3 = Math.pow(b3, y3) - a3, y3 = 1 / y3, function(t4) {
    return Math.pow(a3 + t4 * b3, y3);
  };
}
function gamma(y3) {
  return (y3 = +y3) === 1 ? nogamma : function(a3, b3) {
    return b3 - a3 ? exponential(a3, b3, y3) : constant_default2(isNaN(a3) ? b3 : a3);
  };
}
function nogamma(a3, b3) {
  var d3 = b3 - a3;
  return d3 ? linear(a3, d3) : constant_default2(isNaN(a3) ? b3 : a3);
}

// node_modules/d3-interpolate/src/rgb.js
var rgb_default = function rgbGamma(y3) {
  var color2 = gamma(y3);
  function rgb2(start2, end) {
    var r6 = color2((start2 = rgb(start2)).r, (end = rgb(end)).r), g3 = color2(start2.g, end.g), b3 = color2(start2.b, end.b), opacity = nogamma(start2.opacity, end.opacity);
    return function(t4) {
      start2.r = r6(t4);
      start2.g = g3(t4);
      start2.b = b3(t4);
      start2.opacity = opacity(t4);
      return start2 + "";
    };
  }
  rgb2.gamma = rgbGamma;
  return rgb2;
}(1);
function rgbSpline(spline) {
  return function(colors) {
    var n5 = colors.length, r6 = new Array(n5), g3 = new Array(n5), b3 = new Array(n5), i3, color2;
    for (i3 = 0; i3 < n5; ++i3) {
      color2 = rgb(colors[i3]);
      r6[i3] = color2.r || 0;
      g3[i3] = color2.g || 0;
      b3[i3] = color2.b || 0;
    }
    r6 = spline(r6);
    g3 = spline(g3);
    b3 = spline(b3);
    color2.opacity = 1;
    return function(t4) {
      color2.r = r6(t4);
      color2.g = g3(t4);
      color2.b = b3(t4);
      return color2 + "";
    };
  };
}
var rgbBasis = rgbSpline(basis_default);
var rgbBasisClosed = rgbSpline(basisClosed_default);

// node_modules/d3-interpolate/src/number.js
function number_default(a3, b3) {
  return a3 = +a3, b3 = +b3, function(t4) {
    return a3 * (1 - t4) + b3 * t4;
  };
}

// node_modules/d3-interpolate/src/string.js
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB = new RegExp(reA.source, "g");
function zero(b3) {
  return function() {
    return b3;
  };
}
function one(b3) {
  return function(t4) {
    return b3(t4) + "";
  };
}
function string_default(a3, b3) {
  var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i3 = -1, s4 = [], q = [];
  a3 = a3 + "", b3 = b3 + "";
  while ((am = reA.exec(a3)) && (bm = reB.exec(b3))) {
    if ((bs = bm.index) > bi) {
      bs = b3.slice(bi, bs);
      if (s4[i3])
        s4[i3] += bs;
      else
        s4[++i3] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s4[i3])
        s4[i3] += bm;
      else
        s4[++i3] = bm;
    } else {
      s4[++i3] = null;
      q.push({ i: i3, x: number_default(am, bm) });
    }
    bi = reB.lastIndex;
  }
  if (bi < b3.length) {
    bs = b3.slice(bi);
    if (s4[i3])
      s4[i3] += bs;
    else
      s4[++i3] = bs;
  }
  return s4.length < 2 ? q[0] ? one(q[0].x) : zero(b3) : (b3 = q.length, function(t4) {
    for (var i4 = 0, o5; i4 < b3; ++i4)
      s4[(o5 = q[i4]).i] = o5.x(t4);
    return s4.join("");
  });
}

// node_modules/d3-interpolate/src/transform/decompose.js
var degrees = 180 / Math.PI;
var identity = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function decompose_default(a3, b3, c4, d3, e4, f3) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a3 * a3 + b3 * b3))
    a3 /= scaleX, b3 /= scaleX;
  if (skewX = a3 * c4 + b3 * d3)
    c4 -= a3 * skewX, d3 -= b3 * skewX;
  if (scaleY = Math.sqrt(c4 * c4 + d3 * d3))
    c4 /= scaleY, d3 /= scaleY, skewX /= scaleY;
  if (a3 * d3 < b3 * c4)
    a3 = -a3, b3 = -b3, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e4,
    translateY: f3,
    rotate: Math.atan2(b3, a3) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX,
    scaleY
  };
}

// node_modules/d3-interpolate/src/transform/parse.js
var svgNode;
function parseCss(value) {
  const m3 = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m3.isIdentity ? identity : decompose_default(m3.a, m3.b, m3.c, m3.d, m3.e, m3.f);
}
function parseSvg(value) {
  if (value == null)
    return identity;
  if (!svgNode)
    svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate()))
    return identity;
  value = value.matrix;
  return decompose_default(value.a, value.b, value.c, value.d, value.e, value.f);
}

// node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform(parse, pxComma, pxParen, degParen) {
  function pop(s4) {
    return s4.length ? s4.pop() + " " : "";
  }
  function translate(xa, ya, xb, yb, s4, q) {
    if (xa !== xb || ya !== yb) {
      var i3 = s4.push("translate(", null, pxComma, null, pxParen);
      q.push({ i: i3 - 4, x: number_default(xa, xb) }, { i: i3 - 2, x: number_default(ya, yb) });
    } else if (xb || yb) {
      s4.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a3, b3, s4, q) {
    if (a3 !== b3) {
      if (a3 - b3 > 180)
        b3 += 360;
      else if (b3 - a3 > 180)
        a3 += 360;
      q.push({ i: s4.push(pop(s4) + "rotate(", null, degParen) - 2, x: number_default(a3, b3) });
    } else if (b3) {
      s4.push(pop(s4) + "rotate(" + b3 + degParen);
    }
  }
  function skewX(a3, b3, s4, q) {
    if (a3 !== b3) {
      q.push({ i: s4.push(pop(s4) + "skewX(", null, degParen) - 2, x: number_default(a3, b3) });
    } else if (b3) {
      s4.push(pop(s4) + "skewX(" + b3 + degParen);
    }
  }
  function scale(xa, ya, xb, yb, s4, q) {
    if (xa !== xb || ya !== yb) {
      var i3 = s4.push(pop(s4) + "scale(", null, ",", null, ")");
      q.push({ i: i3 - 4, x: number_default(xa, xb) }, { i: i3 - 2, x: number_default(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s4.push(pop(s4) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a3, b3) {
    var s4 = [], q = [];
    a3 = parse(a3), b3 = parse(b3);
    translate(a3.translateX, a3.translateY, b3.translateX, b3.translateY, s4, q);
    rotate(a3.rotate, b3.rotate, s4, q);
    skewX(a3.skewX, b3.skewX, s4, q);
    scale(a3.scaleX, a3.scaleY, b3.scaleX, b3.scaleY, s4, q);
    a3 = b3 = null;
    return function(t4) {
      var i3 = -1, n5 = q.length, o5;
      while (++i3 < n5)
        s4[(o5 = q[i3]).i] = o5.x(t4);
      return s4.join("");
    };
  };
}
var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

// node_modules/d3-interpolate/src/zoom.js
var epsilon2 = 1e-12;
function cosh(x2) {
  return ((x2 = Math.exp(x2)) + 1 / x2) / 2;
}
function sinh(x2) {
  return ((x2 = Math.exp(x2)) - 1 / x2) / 2;
}
function tanh(x2) {
  return ((x2 = Math.exp(2 * x2)) - 1) / (x2 + 1);
}
var zoom_default = function zoomRho(rho, rho2, rho4) {
  function zoom(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d22 = dx * dx + dy * dy, i3, S3;
    if (d22 < epsilon2) {
      S3 = Math.log(w1 / w0) / rho;
      i3 = function(t4) {
        return [
          ux0 + t4 * dx,
          uy0 + t4 * dy,
          w0 * Math.exp(rho * t4 * S3)
        ];
      };
    } else {
      var d1 = Math.sqrt(d22), b0 = (w1 * w1 - w0 * w0 + rho4 * d22) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d22) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S3 = (r1 - r0) / rho;
      i3 = function(t4) {
        var s4 = t4 * S3, coshr0 = cosh(r0), u3 = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s4 + r0) - sinh(r0));
        return [
          ux0 + u3 * dx,
          uy0 + u3 * dy,
          w0 * coshr0 / cosh(rho * s4 + r0)
        ];
      };
    }
    i3.duration = S3 * 1e3 * rho / Math.SQRT2;
    return i3;
  }
  zoom.rho = function(_2) {
    var _1 = Math.max(1e-3, +_2), _22 = _1 * _1, _4 = _22 * _22;
    return zoomRho(_1, _22, _4);
  };
  return zoom;
}(Math.SQRT2, 2, 4);

// node_modules/d3-timer/src/timer.js
var frame = 0;
var timeout = 0;
var interval = 0;
var pokeDelay = 1e3;
var taskHead;
var taskTail;
var clockLast = 0;
var clockNow = 0;
var clockSkew = 0;
var clock = typeof performance === "object" && performance.now ? performance : Date;
var setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f3) {
  setTimeout(f3, 17);
};
function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}
function clearNow() {
  clockNow = 0;
}
function Timer() {
  this._call = this._time = this._next = null;
}
Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function(callback, delay, time) {
    if (typeof callback !== "function")
      throw new TypeError("callback is not a function");
    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
    if (!this._next && taskTail !== this) {
      if (taskTail)
        taskTail._next = this;
      else
        taskHead = this;
      taskTail = this;
    }
    this._call = callback;
    this._time = time;
    sleep();
  },
  stop: function() {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};
function timer(callback, delay, time) {
  var t4 = new Timer();
  t4.restart(callback, delay, time);
  return t4;
}
function timerFlush() {
  now();
  ++frame;
  var t4 = taskHead, e4;
  while (t4) {
    if ((e4 = clockNow - t4._time) >= 0)
      t4._call.call(void 0, e4);
    t4 = t4._next;
  }
  --frame;
}
function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;
  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}
function poke() {
  var now2 = clock.now(), delay = now2 - clockLast;
  if (delay > pokeDelay)
    clockSkew -= delay, clockLast = now2;
}
function nap() {
  var t0, t1 = taskHead, t22, time = Infinity;
  while (t1) {
    if (t1._call) {
      if (time > t1._time)
        time = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t22 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t22 : taskHead = t22;
    }
  }
  taskTail = t0;
  sleep(time);
}
function sleep(time) {
  if (frame)
    return;
  if (timeout)
    timeout = clearTimeout(timeout);
  var delay = time - clockNow;
  if (delay > 24) {
    if (time < Infinity)
      timeout = setTimeout(wake, time - clock.now() - clockSkew);
    if (interval)
      interval = clearInterval(interval);
  } else {
    if (!interval)
      clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}

// node_modules/d3-timer/src/timeout.js
function timeout_default(callback, delay, time) {
  var t4 = new Timer();
  delay = delay == null ? 0 : +delay;
  t4.restart((elapsed) => {
    t4.stop();
    callback(elapsed + delay);
  }, delay, time);
  return t4;
}

// node_modules/d3-transition/src/transition/schedule.js
var emptyOn = dispatch_default("start", "end", "cancel", "interrupt");
var emptyTween = [];
var CREATED = 0;
var SCHEDULED = 1;
var STARTING = 2;
var STARTED = 3;
var RUNNING = 4;
var ENDING = 5;
var ENDED = 6;
function schedule_default(node, name, id2, index, group, timing) {
  var schedules = node.__transition;
  if (!schedules)
    node.__transition = {};
  else if (id2 in schedules)
    return;
  create(node, id2, {
    name,
    index,
    // For context during callback.
    group,
    // For context during callback.
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
}
function init(node, id2) {
  var schedule = get2(node, id2);
  if (schedule.state > CREATED)
    throw new Error("too late; already scheduled");
  return schedule;
}
function set2(node, id2) {
  var schedule = get2(node, id2);
  if (schedule.state > STARTED)
    throw new Error("too late; already running");
  return schedule;
}
function get2(node, id2) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id2]))
    throw new Error("transition not found");
  return schedule;
}
function create(node, id2, self2) {
  var schedules = node.__transition, tween;
  schedules[id2] = self2;
  self2.timer = timer(schedule, 0, self2.time);
  function schedule(elapsed) {
    self2.state = SCHEDULED;
    self2.timer.restart(start2, self2.delay, self2.time);
    if (self2.delay <= elapsed)
      start2(elapsed - self2.delay);
  }
  function start2(elapsed) {
    var i3, j, n5, o5;
    if (self2.state !== SCHEDULED)
      return stop();
    for (i3 in schedules) {
      o5 = schedules[i3];
      if (o5.name !== self2.name)
        continue;
      if (o5.state === STARTED)
        return timeout_default(start2);
      if (o5.state === RUNNING) {
        o5.state = ENDED;
        o5.timer.stop();
        o5.on.call("interrupt", node, node.__data__, o5.index, o5.group);
        delete schedules[i3];
      } else if (+i3 < id2) {
        o5.state = ENDED;
        o5.timer.stop();
        o5.on.call("cancel", node, node.__data__, o5.index, o5.group);
        delete schedules[i3];
      }
    }
    timeout_default(function() {
      if (self2.state === STARTED) {
        self2.state = RUNNING;
        self2.timer.restart(tick, self2.delay, self2.time);
        tick(elapsed);
      }
    });
    self2.state = STARTING;
    self2.on.call("start", node, node.__data__, self2.index, self2.group);
    if (self2.state !== STARTING)
      return;
    self2.state = STARTED;
    tween = new Array(n5 = self2.tween.length);
    for (i3 = 0, j = -1; i3 < n5; ++i3) {
      if (o5 = self2.tween[i3].value.call(node, node.__data__, self2.index, self2.group)) {
        tween[++j] = o5;
      }
    }
    tween.length = j + 1;
  }
  function tick(elapsed) {
    var t4 = elapsed < self2.duration ? self2.ease.call(null, elapsed / self2.duration) : (self2.timer.restart(stop), self2.state = ENDING, 1), i3 = -1, n5 = tween.length;
    while (++i3 < n5) {
      tween[i3].call(node, t4);
    }
    if (self2.state === ENDING) {
      self2.on.call("end", node, node.__data__, self2.index, self2.group);
      stop();
    }
  }
  function stop() {
    self2.state = ENDED;
    self2.timer.stop();
    delete schedules[id2];
    for (var i3 in schedules)
      return;
    delete node.__transition;
  }
}

// node_modules/d3-transition/src/interrupt.js
function interrupt_default(node, name) {
  var schedules = node.__transition, schedule, active, empty2 = true, i3;
  if (!schedules)
    return;
  name = name == null ? null : name + "";
  for (i3 in schedules) {
    if ((schedule = schedules[i3]).name !== name) {
      empty2 = false;
      continue;
    }
    active = schedule.state > STARTING && schedule.state < ENDING;
    schedule.state = ENDED;
    schedule.timer.stop();
    schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
    delete schedules[i3];
  }
  if (empty2)
    delete node.__transition;
}

// node_modules/d3-transition/src/selection/interrupt.js
function interrupt_default2(name) {
  return this.each(function() {
    interrupt_default(this, name);
  });
}

// node_modules/d3-transition/src/transition/tween.js
function tweenRemove(id2, name) {
  var tween0, tween1;
  return function() {
    var schedule = set2(this, id2), tween = schedule.tween;
    if (tween !== tween0) {
      tween1 = tween0 = tween;
      for (var i3 = 0, n5 = tween1.length; i3 < n5; ++i3) {
        if (tween1[i3].name === name) {
          tween1 = tween1.slice();
          tween1.splice(i3, 1);
          break;
        }
      }
    }
    schedule.tween = tween1;
  };
}
function tweenFunction(id2, name, value) {
  var tween0, tween1;
  if (typeof value !== "function")
    throw new Error();
  return function() {
    var schedule = set2(this, id2), tween = schedule.tween;
    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();
      for (var t4 = { name, value }, i3 = 0, n5 = tween1.length; i3 < n5; ++i3) {
        if (tween1[i3].name === name) {
          tween1[i3] = t4;
          break;
        }
      }
      if (i3 === n5)
        tween1.push(t4);
    }
    schedule.tween = tween1;
  };
}
function tween_default(name, value) {
  var id2 = this._id;
  name += "";
  if (arguments.length < 2) {
    var tween = get2(this.node(), id2).tween;
    for (var i3 = 0, n5 = tween.length, t4; i3 < n5; ++i3) {
      if ((t4 = tween[i3]).name === name) {
        return t4.value;
      }
    }
    return null;
  }
  return this.each((value == null ? tweenRemove : tweenFunction)(id2, name, value));
}
function tweenValue(transition2, name, value) {
  var id2 = transition2._id;
  transition2.each(function() {
    var schedule = set2(this, id2);
    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
  });
  return function(node) {
    return get2(node, id2).value[name];
  };
}

// node_modules/d3-transition/src/transition/interpolate.js
function interpolate_default(a3, b3) {
  var c4;
  return (typeof b3 === "number" ? number_default : b3 instanceof color ? rgb_default : (c4 = color(b3)) ? (b3 = c4, rgb_default) : string_default)(a3, b3);
}

// node_modules/d3-transition/src/transition/attr.js
function attrRemove2(name) {
  return function() {
    this.removeAttribute(name);
  };
}
function attrRemoveNS2(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant2(name, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = this.getAttribute(name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function attrConstantNS2(fullname, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = this.getAttributeNS(fullname.space, fullname.local);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function attrFunction2(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null)
      return void this.removeAttribute(name);
    string0 = this.getAttribute(name);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function attrFunctionNS2(fullname, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null)
      return void this.removeAttributeNS(fullname.space, fullname.local);
    string0 = this.getAttributeNS(fullname.space, fullname.local);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function attr_default2(name, value) {
  var fullname = namespace_default(name), i3 = fullname === "transform" ? interpolateTransformSvg : interpolate_default;
  return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS2 : attrFunction2)(fullname, i3, tweenValue(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS2 : attrRemove2)(fullname) : (fullname.local ? attrConstantNS2 : attrConstant2)(fullname, i3, value));
}

// node_modules/d3-transition/src/transition/attrTween.js
function attrInterpolate(name, i3) {
  return function(t4) {
    this.setAttribute(name, i3.call(this, t4));
  };
}
function attrInterpolateNS(fullname, i3) {
  return function(t4) {
    this.setAttributeNS(fullname.space, fullname.local, i3.call(this, t4));
  };
}
function attrTweenNS(fullname, value) {
  var t0, i0;
  function tween() {
    var i3 = value.apply(this, arguments);
    if (i3 !== i0)
      t0 = (i0 = i3) && attrInterpolateNS(fullname, i3);
    return t0;
  }
  tween._value = value;
  return tween;
}
function attrTween(name, value) {
  var t0, i0;
  function tween() {
    var i3 = value.apply(this, arguments);
    if (i3 !== i0)
      t0 = (i0 = i3) && attrInterpolate(name, i3);
    return t0;
  }
  tween._value = value;
  return tween;
}
function attrTween_default(name, value) {
  var key = "attr." + name;
  if (arguments.length < 2)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  var fullname = namespace_default(name);
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
}

// node_modules/d3-transition/src/transition/delay.js
function delayFunction(id2, value) {
  return function() {
    init(this, id2).delay = +value.apply(this, arguments);
  };
}
function delayConstant(id2, value) {
  return value = +value, function() {
    init(this, id2).delay = value;
  };
}
function delay_default(value) {
  var id2 = this._id;
  return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id2, value)) : get2(this.node(), id2).delay;
}

// node_modules/d3-transition/src/transition/duration.js
function durationFunction(id2, value) {
  return function() {
    set2(this, id2).duration = +value.apply(this, arguments);
  };
}
function durationConstant(id2, value) {
  return value = +value, function() {
    set2(this, id2).duration = value;
  };
}
function duration_default(value) {
  var id2 = this._id;
  return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id2, value)) : get2(this.node(), id2).duration;
}

// node_modules/d3-transition/src/transition/ease.js
function easeConstant(id2, value) {
  if (typeof value !== "function")
    throw new Error();
  return function() {
    set2(this, id2).ease = value;
  };
}
function ease_default(value) {
  var id2 = this._id;
  return arguments.length ? this.each(easeConstant(id2, value)) : get2(this.node(), id2).ease;
}

// node_modules/d3-transition/src/transition/easeVarying.js
function easeVarying(id2, value) {
  return function() {
    var v2 = value.apply(this, arguments);
    if (typeof v2 !== "function")
      throw new Error();
    set2(this, id2).ease = v2;
  };
}
function easeVarying_default(value) {
  if (typeof value !== "function")
    throw new Error();
  return this.each(easeVarying(this._id, value));
}

// node_modules/d3-transition/src/transition/filter.js
function filter_default2(match) {
  if (typeof match !== "function")
    match = matcher_default(match);
  for (var groups = this._groups, m3 = groups.length, subgroups = new Array(m3), j = 0; j < m3; ++j) {
    for (var group = groups[j], n5 = group.length, subgroup = subgroups[j] = [], node, i3 = 0; i3 < n5; ++i3) {
      if ((node = group[i3]) && match.call(node, node.__data__, i3, group)) {
        subgroup.push(node);
      }
    }
  }
  return new Transition(subgroups, this._parents, this._name, this._id);
}

// node_modules/d3-transition/src/transition/merge.js
function merge_default2(transition2) {
  if (transition2._id !== this._id)
    throw new Error();
  for (var groups0 = this._groups, groups1 = transition2._groups, m0 = groups0.length, m1 = groups1.length, m3 = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m3; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n5 = group0.length, merge2 = merges[j] = new Array(n5), node, i3 = 0; i3 < n5; ++i3) {
      if (node = group0[i3] || group1[i3]) {
        merge2[i3] = node;
      }
    }
  }
  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }
  return new Transition(merges, this._parents, this._name, this._id);
}

// node_modules/d3-transition/src/transition/on.js
function start(name) {
  return (name + "").trim().split(/^|\s+/).every(function(t4) {
    var i3 = t4.indexOf(".");
    if (i3 >= 0)
      t4 = t4.slice(0, i3);
    return !t4 || t4 === "start";
  });
}
function onFunction(id2, name, listener) {
  var on0, on1, sit = start(name) ? init : set2;
  return function() {
    var schedule = sit(this, id2), on = schedule.on;
    if (on !== on0)
      (on1 = (on0 = on).copy()).on(name, listener);
    schedule.on = on1;
  };
}
function on_default2(name, listener) {
  var id2 = this._id;
  return arguments.length < 2 ? get2(this.node(), id2).on.on(name) : this.each(onFunction(id2, name, listener));
}

// node_modules/d3-transition/src/transition/remove.js
function removeFunction(id2) {
  return function() {
    var parent = this.parentNode;
    for (var i3 in this.__transition)
      if (+i3 !== id2)
        return;
    if (parent)
      parent.removeChild(this);
  };
}
function remove_default2() {
  return this.on("end.remove", removeFunction(this._id));
}

// node_modules/d3-transition/src/transition/select.js
function select_default3(select) {
  var name = this._name, id2 = this._id;
  if (typeof select !== "function")
    select = selector_default(select);
  for (var groups = this._groups, m3 = groups.length, subgroups = new Array(m3), j = 0; j < m3; ++j) {
    for (var group = groups[j], n5 = group.length, subgroup = subgroups[j] = new Array(n5), node, subnode, i3 = 0; i3 < n5; ++i3) {
      if ((node = group[i3]) && (subnode = select.call(node, node.__data__, i3, group))) {
        if ("__data__" in node)
          subnode.__data__ = node.__data__;
        subgroup[i3] = subnode;
        schedule_default(subgroup[i3], name, id2, i3, subgroup, get2(node, id2));
      }
    }
  }
  return new Transition(subgroups, this._parents, name, id2);
}

// node_modules/d3-transition/src/transition/selectAll.js
function selectAll_default2(select) {
  var name = this._name, id2 = this._id;
  if (typeof select !== "function")
    select = selectorAll_default(select);
  for (var groups = this._groups, m3 = groups.length, subgroups = [], parents = [], j = 0; j < m3; ++j) {
    for (var group = groups[j], n5 = group.length, node, i3 = 0; i3 < n5; ++i3) {
      if (node = group[i3]) {
        for (var children2 = select.call(node, node.__data__, i3, group), child, inherit2 = get2(node, id2), k2 = 0, l3 = children2.length; k2 < l3; ++k2) {
          if (child = children2[k2]) {
            schedule_default(child, name, id2, k2, children2, inherit2);
          }
        }
        subgroups.push(children2);
        parents.push(node);
      }
    }
  }
  return new Transition(subgroups, parents, name, id2);
}

// node_modules/d3-transition/src/transition/selection.js
var Selection2 = selection_default.prototype.constructor;
function selection_default2() {
  return new Selection2(this._groups, this._parents);
}

// node_modules/d3-transition/src/transition/style.js
function styleNull(name, interpolate) {
  var string00, string10, interpolate0;
  return function() {
    var string0 = styleValue(this, name), string1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
  };
}
function styleRemove2(name) {
  return function() {
    this.style.removeProperty(name);
  };
}
function styleConstant2(name, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = styleValue(this, name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function styleFunction2(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0 = styleValue(this, name), value1 = value(this), string1 = value1 + "";
    if (value1 == null)
      string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function styleMaybeRemove(id2, name) {
  var on0, on1, listener0, key = "style." + name, event = "end." + key, remove2;
  return function() {
    var schedule = set2(this, id2), on = schedule.on, listener = schedule.value[key] == null ? remove2 || (remove2 = styleRemove2(name)) : void 0;
    if (on !== on0 || listener0 !== listener)
      (on1 = (on0 = on).copy()).on(event, listener0 = listener);
    schedule.on = on1;
  };
}
function style_default2(name, value, priority) {
  var i3 = (name += "") === "transform" ? interpolateTransformCss : interpolate_default;
  return value == null ? this.styleTween(name, styleNull(name, i3)).on("end.style." + name, styleRemove2(name)) : typeof value === "function" ? this.styleTween(name, styleFunction2(name, i3, tweenValue(this, "style." + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant2(name, i3, value), priority).on("end.style." + name, null);
}

// node_modules/d3-transition/src/transition/styleTween.js
function styleInterpolate(name, i3, priority) {
  return function(t4) {
    this.style.setProperty(name, i3.call(this, t4), priority);
  };
}
function styleTween(name, value, priority) {
  var t4, i0;
  function tween() {
    var i3 = value.apply(this, arguments);
    if (i3 !== i0)
      t4 = (i0 = i3) && styleInterpolate(name, i3, priority);
    return t4;
  }
  tween._value = value;
  return tween;
}
function styleTween_default(name, value, priority) {
  var key = "style." + (name += "");
  if (arguments.length < 2)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
}

// node_modules/d3-transition/src/transition/text.js
function textConstant2(value) {
  return function() {
    this.textContent = value;
  };
}
function textFunction2(value) {
  return function() {
    var value1 = value(this);
    this.textContent = value1 == null ? "" : value1;
  };
}
function text_default2(value) {
  return this.tween("text", typeof value === "function" ? textFunction2(tweenValue(this, "text", value)) : textConstant2(value == null ? "" : value + ""));
}

// node_modules/d3-transition/src/transition/textTween.js
function textInterpolate(i3) {
  return function(t4) {
    this.textContent = i3.call(this, t4);
  };
}
function textTween(value) {
  var t0, i0;
  function tween() {
    var i3 = value.apply(this, arguments);
    if (i3 !== i0)
      t0 = (i0 = i3) && textInterpolate(i3);
    return t0;
  }
  tween._value = value;
  return tween;
}
function textTween_default(value) {
  var key = "text";
  if (arguments.length < 1)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  return this.tween(key, textTween(value));
}

// node_modules/d3-transition/src/transition/transition.js
function transition_default() {
  var name = this._name, id0 = this._id, id1 = newId();
  for (var groups = this._groups, m3 = groups.length, j = 0; j < m3; ++j) {
    for (var group = groups[j], n5 = group.length, node, i3 = 0; i3 < n5; ++i3) {
      if (node = group[i3]) {
        var inherit2 = get2(node, id0);
        schedule_default(node, name, id1, i3, group, {
          time: inherit2.time + inherit2.delay + inherit2.duration,
          delay: 0,
          duration: inherit2.duration,
          ease: inherit2.ease
        });
      }
    }
  }
  return new Transition(groups, this._parents, name, id1);
}

// node_modules/d3-transition/src/transition/end.js
function end_default() {
  var on0, on1, that = this, id2 = that._id, size = that.size();
  return new Promise(function(resolve, reject) {
    var cancel = { value: reject }, end = { value: function() {
      if (--size === 0)
        resolve();
    } };
    that.each(function() {
      var schedule = set2(this, id2), on = schedule.on;
      if (on !== on0) {
        on1 = (on0 = on).copy();
        on1._.cancel.push(cancel);
        on1._.interrupt.push(cancel);
        on1._.end.push(end);
      }
      schedule.on = on1;
    });
    if (size === 0)
      resolve();
  });
}

// node_modules/d3-transition/src/transition/index.js
var id = 0;
function Transition(groups, parents, name, id2) {
  this._groups = groups;
  this._parents = parents;
  this._name = name;
  this._id = id2;
}
function transition(name) {
  return selection_default().transition(name);
}
function newId() {
  return ++id;
}
var selection_prototype = selection_default.prototype;
Transition.prototype = transition.prototype = {
  constructor: Transition,
  select: select_default3,
  selectAll: selectAll_default2,
  selectChild: selection_prototype.selectChild,
  selectChildren: selection_prototype.selectChildren,
  filter: filter_default2,
  merge: merge_default2,
  selection: selection_default2,
  transition: transition_default,
  call: selection_prototype.call,
  nodes: selection_prototype.nodes,
  node: selection_prototype.node,
  size: selection_prototype.size,
  empty: selection_prototype.empty,
  each: selection_prototype.each,
  on: on_default2,
  attr: attr_default2,
  attrTween: attrTween_default,
  style: style_default2,
  styleTween: styleTween_default,
  text: text_default2,
  textTween: textTween_default,
  remove: remove_default2,
  tween: tween_default,
  delay: delay_default,
  duration: duration_default,
  ease: ease_default,
  easeVarying: easeVarying_default,
  end: end_default,
  [Symbol.iterator]: selection_prototype[Symbol.iterator]
};

// node_modules/d3-ease/src/cubic.js
function cubicInOut(t4) {
  return ((t4 *= 2) <= 1 ? t4 * t4 * t4 : (t4 -= 2) * t4 * t4 + 2) / 2;
}

// node_modules/d3-transition/src/selection/transition.js
var defaultTiming = {
  time: null,
  // Set on use.
  delay: 0,
  duration: 250,
  ease: cubicInOut
};
function inherit(node, id2) {
  var timing;
  while (!(timing = node.__transition) || !(timing = timing[id2])) {
    if (!(node = node.parentNode)) {
      throw new Error(`transition ${id2} not found`);
    }
  }
  return timing;
}
function transition_default2(name) {
  var id2, timing;
  if (name instanceof Transition) {
    id2 = name._id, name = name._name;
  } else {
    id2 = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
  }
  for (var groups = this._groups, m3 = groups.length, j = 0; j < m3; ++j) {
    for (var group = groups[j], n5 = group.length, node, i3 = 0; i3 < n5; ++i3) {
      if (node = group[i3]) {
        schedule_default(node, name, id2, i3, group, timing || inherit(node, id2));
      }
    }
  }
  return new Transition(groups, this._parents, name, id2);
}

// node_modules/d3-transition/src/selection/index.js
selection_default.prototype.interrupt = interrupt_default2;
selection_default.prototype.transition = transition_default2;

// node_modules/d3-brush/src/brush.js
var { abs, max, min } = Math;
function number1(e4) {
  return [+e4[0], +e4[1]];
}
function number2(e4) {
  return [number1(e4[0]), number1(e4[1])];
}
var X = {
  name: "x",
  handles: ["w", "e"].map(type),
  input: function(x2, e4) {
    return x2 == null ? null : [[+x2[0], e4[0][1]], [+x2[1], e4[1][1]]];
  },
  output: function(xy) {
    return xy && [xy[0][0], xy[1][0]];
  }
};
var Y = {
  name: "y",
  handles: ["n", "s"].map(type),
  input: function(y3, e4) {
    return y3 == null ? null : [[e4[0][0], +y3[0]], [e4[1][0], +y3[1]]];
  },
  output: function(xy) {
    return xy && [xy[0][1], xy[1][1]];
  }
};
var XY = {
  name: "xy",
  handles: ["n", "w", "e", "s", "nw", "ne", "sw", "se"].map(type),
  input: function(xy) {
    return xy == null ? null : number2(xy);
  },
  output: function(xy) {
    return xy;
  }
};
function type(t4) {
  return { type: t4 };
}

// node_modules/d3-geo/src/math.js
var epsilon = 1e-6;
var epsilon22 = 1e-12;
var pi = Math.PI;
var halfPi = pi / 2;
var quarterPi = pi / 4;
var tau = pi * 2;
var degrees2 = 180 / pi;
var radians = pi / 180;
var abs2 = Math.abs;
var atan = Math.atan;
var atan2 = Math.atan2;
var cos = Math.cos;
var exp = Math.exp;
var log = Math.log;
var sin = Math.sin;
var sign = Math.sign || function(x2) {
  return x2 > 0 ? 1 : x2 < 0 ? -1 : 0;
};
var sqrt = Math.sqrt;
var tan = Math.tan;
function acos(x2) {
  return x2 > 1 ? 0 : x2 < -1 ? pi : Math.acos(x2);
}
function asin(x2) {
  return x2 > 1 ? halfPi : x2 < -1 ? -halfPi : Math.asin(x2);
}

// node_modules/d3-geo/src/noop.js
function noop2() {
}

// node_modules/d3-geo/src/stream.js
function streamGeometry(geometry, stream) {
  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
    streamGeometryType[geometry.type](geometry, stream);
  }
}
var streamObjectType = {
  Feature: function(object, stream) {
    streamGeometry(object.geometry, stream);
  },
  FeatureCollection: function(object, stream) {
    var features = object.features, i3 = -1, n5 = features.length;
    while (++i3 < n5)
      streamGeometry(features[i3].geometry, stream);
  }
};
var streamGeometryType = {
  Sphere: function(object, stream) {
    stream.sphere();
  },
  Point: function(object, stream) {
    object = object.coordinates;
    stream.point(object[0], object[1], object[2]);
  },
  MultiPoint: function(object, stream) {
    var coordinates = object.coordinates, i3 = -1, n5 = coordinates.length;
    while (++i3 < n5)
      object = coordinates[i3], stream.point(object[0], object[1], object[2]);
  },
  LineString: function(object, stream) {
    streamLine(object.coordinates, stream, 0);
  },
  MultiLineString: function(object, stream) {
    var coordinates = object.coordinates, i3 = -1, n5 = coordinates.length;
    while (++i3 < n5)
      streamLine(coordinates[i3], stream, 0);
  },
  Polygon: function(object, stream) {
    streamPolygon(object.coordinates, stream);
  },
  MultiPolygon: function(object, stream) {
    var coordinates = object.coordinates, i3 = -1, n5 = coordinates.length;
    while (++i3 < n5)
      streamPolygon(coordinates[i3], stream);
  },
  GeometryCollection: function(object, stream) {
    var geometries = object.geometries, i3 = -1, n5 = geometries.length;
    while (++i3 < n5)
      streamGeometry(geometries[i3], stream);
  }
};
function streamLine(coordinates, stream, closed) {
  var i3 = -1, n5 = coordinates.length - closed, coordinate;
  stream.lineStart();
  while (++i3 < n5)
    coordinate = coordinates[i3], stream.point(coordinate[0], coordinate[1], coordinate[2]);
  stream.lineEnd();
}
function streamPolygon(coordinates, stream) {
  var i3 = -1, n5 = coordinates.length;
  stream.polygonStart();
  while (++i3 < n5)
    streamLine(coordinates[i3], stream, 1);
  stream.polygonEnd();
}
function stream_default(object, stream) {
  if (object && streamObjectType.hasOwnProperty(object.type)) {
    streamObjectType[object.type](object, stream);
  } else {
    streamGeometry(object, stream);
  }
}

// node_modules/d3-geo/src/cartesian.js
function spherical(cartesian2) {
  return [atan2(cartesian2[1], cartesian2[0]), asin(cartesian2[2])];
}
function cartesian(spherical2) {
  var lambda = spherical2[0], phi = spherical2[1], cosPhi = cos(phi);
  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];
}
function cartesianDot(a3, b3) {
  return a3[0] * b3[0] + a3[1] * b3[1] + a3[2] * b3[2];
}
function cartesianCross(a3, b3) {
  return [a3[1] * b3[2] - a3[2] * b3[1], a3[2] * b3[0] - a3[0] * b3[2], a3[0] * b3[1] - a3[1] * b3[0]];
}
function cartesianAddInPlace(a3, b3) {
  a3[0] += b3[0], a3[1] += b3[1], a3[2] += b3[2];
}
function cartesianScale(vector, k2) {
  return [vector[0] * k2, vector[1] * k2, vector[2] * k2];
}
function cartesianNormalizeInPlace(d3) {
  var l3 = sqrt(d3[0] * d3[0] + d3[1] * d3[1] + d3[2] * d3[2]);
  d3[0] /= l3, d3[1] /= l3, d3[2] /= l3;
}

// node_modules/d3-geo/src/compose.js
function compose_default(a3, b3) {
  function compose(x2, y3) {
    return x2 = a3(x2, y3), b3(x2[0], x2[1]);
  }
  if (a3.invert && b3.invert)
    compose.invert = function(x2, y3) {
      return x2 = b3.invert(x2, y3), x2 && a3.invert(x2[0], x2[1]);
    };
  return compose;
}

// node_modules/d3-geo/src/rotation.js
function rotationIdentity(lambda, phi) {
  if (abs2(lambda) > pi)
    lambda -= Math.round(lambda / tau) * tau;
  return [lambda, phi];
}
rotationIdentity.invert = rotationIdentity;
function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
  return (deltaLambda %= tau) ? deltaPhi || deltaGamma ? compose_default(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
}
function forwardRotationLambda(deltaLambda) {
  return function(lambda, phi) {
    lambda += deltaLambda;
    if (abs2(lambda) > pi)
      lambda -= Math.round(lambda / tau) * tau;
    return [lambda, phi];
  };
}
function rotationLambda(deltaLambda) {
  var rotation = forwardRotationLambda(deltaLambda);
  rotation.invert = forwardRotationLambda(-deltaLambda);
  return rotation;
}
function rotationPhiGamma(deltaPhi, deltaGamma) {
  var cosDeltaPhi = cos(deltaPhi), sinDeltaPhi = sin(deltaPhi), cosDeltaGamma = cos(deltaGamma), sinDeltaGamma = sin(deltaGamma);
  function rotation(lambda, phi) {
    var cosPhi = cos(phi), x2 = cos(lambda) * cosPhi, y3 = sin(lambda) * cosPhi, z = sin(phi), k2 = z * cosDeltaPhi + x2 * sinDeltaPhi;
    return [
      atan2(y3 * cosDeltaGamma - k2 * sinDeltaGamma, x2 * cosDeltaPhi - z * sinDeltaPhi),
      asin(k2 * cosDeltaGamma + y3 * sinDeltaGamma)
    ];
  }
  rotation.invert = function(lambda, phi) {
    var cosPhi = cos(phi), x2 = cos(lambda) * cosPhi, y3 = sin(lambda) * cosPhi, z = sin(phi), k2 = z * cosDeltaGamma - y3 * sinDeltaGamma;
    return [
      atan2(y3 * cosDeltaGamma + z * sinDeltaGamma, x2 * cosDeltaPhi + k2 * sinDeltaPhi),
      asin(k2 * cosDeltaPhi - x2 * sinDeltaPhi)
    ];
  };
  return rotation;
}
function rotation_default(rotate) {
  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);
  function forward(coordinates) {
    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);
    return coordinates[0] *= degrees2, coordinates[1] *= degrees2, coordinates;
  }
  forward.invert = function(coordinates) {
    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);
    return coordinates[0] *= degrees2, coordinates[1] *= degrees2, coordinates;
  };
  return forward;
}

// node_modules/d3-geo/src/circle.js
function circleStream(stream, radius, delta, direction, t0, t1) {
  if (!delta)
    return;
  var cosRadius = cos(radius), sinRadius = sin(radius), step = direction * delta;
  if (t0 == null) {
    t0 = radius + direction * tau;
    t1 = radius - step / 2;
  } else {
    t0 = circleRadius(cosRadius, t0);
    t1 = circleRadius(cosRadius, t1);
    if (direction > 0 ? t0 < t1 : t0 > t1)
      t0 += direction * tau;
  }
  for (var point, t4 = t0; direction > 0 ? t4 > t1 : t4 < t1; t4 -= step) {
    point = spherical([cosRadius, -sinRadius * cos(t4), -sinRadius * sin(t4)]);
    stream.point(point[0], point[1]);
  }
}
function circleRadius(cosRadius, point) {
  point = cartesian(point), point[0] -= cosRadius;
  cartesianNormalizeInPlace(point);
  var radius = acos(-point[1]);
  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;
}

// node_modules/d3-geo/src/clip/buffer.js
function buffer_default() {
  var lines = [], line;
  return {
    point: function(x2, y3, m3) {
      line.push([x2, y3, m3]);
    },
    lineStart: function() {
      lines.push(line = []);
    },
    lineEnd: noop2,
    rejoin: function() {
      if (lines.length > 1)
        lines.push(lines.pop().concat(lines.shift()));
    },
    result: function() {
      var result = lines;
      lines = [];
      line = null;
      return result;
    }
  };
}

// node_modules/d3-geo/src/pointEqual.js
function pointEqual_default(a3, b3) {
  return abs2(a3[0] - b3[0]) < epsilon && abs2(a3[1] - b3[1]) < epsilon;
}

// node_modules/d3-geo/src/clip/rejoin.js
function Intersection(point, points, other, entry) {
  this.x = point;
  this.z = points;
  this.o = other;
  this.e = entry;
  this.v = false;
  this.n = this.p = null;
}
function rejoin_default(segments, compareIntersection2, startInside, interpolate, stream) {
  var subject = [], clip = [], i3, n5;
  segments.forEach(function(segment) {
    if ((n6 = segment.length - 1) <= 0)
      return;
    var n6, p0 = segment[0], p1 = segment[n6], x2;
    if (pointEqual_default(p0, p1)) {
      if (!p0[2] && !p1[2]) {
        stream.lineStart();
        for (i3 = 0; i3 < n6; ++i3)
          stream.point((p0 = segment[i3])[0], p0[1]);
        stream.lineEnd();
        return;
      }
      p1[0] += 2 * epsilon;
    }
    subject.push(x2 = new Intersection(p0, segment, null, true));
    clip.push(x2.o = new Intersection(p0, null, x2, false));
    subject.push(x2 = new Intersection(p1, segment, null, false));
    clip.push(x2.o = new Intersection(p1, null, x2, true));
  });
  if (!subject.length)
    return;
  clip.sort(compareIntersection2);
  link(subject);
  link(clip);
  for (i3 = 0, n5 = clip.length; i3 < n5; ++i3) {
    clip[i3].e = startInside = !startInside;
  }
  var start2 = subject[0], points, point;
  while (1) {
    var current = start2, isSubject = true;
    while (current.v)
      if ((current = current.n) === start2)
        return;
    points = current.z;
    stream.lineStart();
    do {
      current.v = current.o.v = true;
      if (current.e) {
        if (isSubject) {
          for (i3 = 0, n5 = points.length; i3 < n5; ++i3)
            stream.point((point = points[i3])[0], point[1]);
        } else {
          interpolate(current.x, current.n.x, 1, stream);
        }
        current = current.n;
      } else {
        if (isSubject) {
          points = current.p.z;
          for (i3 = points.length - 1; i3 >= 0; --i3)
            stream.point((point = points[i3])[0], point[1]);
        } else {
          interpolate(current.x, current.p.x, -1, stream);
        }
        current = current.p;
      }
      current = current.o;
      points = current.z;
      isSubject = !isSubject;
    } while (!current.v);
    stream.lineEnd();
  }
}
function link(array2) {
  if (!(n5 = array2.length))
    return;
  var n5, i3 = 0, a3 = array2[0], b3;
  while (++i3 < n5) {
    a3.n = b3 = array2[i3];
    b3.p = a3;
    a3 = b3;
  }
  a3.n = b3 = array2[0];
  b3.p = a3;
}

// node_modules/d3-geo/src/polygonContains.js
function longitude(point) {
  return abs2(point[0]) <= pi ? point[0] : sign(point[0]) * ((abs2(point[0]) + pi) % tau - pi);
}
function polygonContains_default(polygon, point) {
  var lambda = longitude(point), phi = point[1], sinPhi = sin(phi), normal = [sin(lambda), -cos(lambda), 0], angle = 0, winding = 0;
  var sum = new Adder();
  if (sinPhi === 1)
    phi = halfPi + epsilon;
  else if (sinPhi === -1)
    phi = -halfPi - epsilon;
  for (var i3 = 0, n5 = polygon.length; i3 < n5; ++i3) {
    if (!(m3 = (ring = polygon[i3]).length))
      continue;
    var ring, m3, point0 = ring[m3 - 1], lambda0 = longitude(point0), phi0 = point0[1] / 2 + quarterPi, sinPhi0 = sin(phi0), cosPhi0 = cos(phi0);
    for (var j = 0; j < m3; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
      var point1 = ring[j], lambda1 = longitude(point1), phi1 = point1[1] / 2 + quarterPi, sinPhi1 = sin(phi1), cosPhi1 = cos(phi1), delta = lambda1 - lambda0, sign2 = delta >= 0 ? 1 : -1, absDelta = sign2 * delta, antimeridian = absDelta > pi, k2 = sinPhi0 * sinPhi1;
      sum.add(atan2(k2 * sign2 * sin(absDelta), cosPhi0 * cosPhi1 + k2 * cos(absDelta)));
      angle += antimeridian ? delta + sign2 * tau : delta;
      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
        var arc = cartesianCross(cartesian(point0), cartesian(point1));
        cartesianNormalizeInPlace(arc);
        var intersection = cartesianCross(normal, arc);
        cartesianNormalizeInPlace(intersection);
        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);
        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
          winding += antimeridian ^ delta >= 0 ? 1 : -1;
        }
      }
    }
  }
  return (angle < -epsilon || angle < epsilon && sum < -epsilon22) ^ winding & 1;
}

// node_modules/d3-geo/src/clip/index.js
function clip_default(pointVisible, clipLine, interpolate, start2) {
  return function(sink) {
    var line = clipLine(sink), ringBuffer = buffer_default(), ringSink = clipLine(ringBuffer), polygonStarted = false, polygon, segments, ring;
    var clip = {
      point,
      lineStart,
      lineEnd,
      polygonStart: function() {
        clip.point = pointRing;
        clip.lineStart = ringStart;
        clip.lineEnd = ringEnd;
        segments = [];
        polygon = [];
      },
      polygonEnd: function() {
        clip.point = point;
        clip.lineStart = lineStart;
        clip.lineEnd = lineEnd;
        segments = merge(segments);
        var startInside = polygonContains_default(polygon, start2);
        if (segments.length) {
          if (!polygonStarted)
            sink.polygonStart(), polygonStarted = true;
          rejoin_default(segments, compareIntersection, startInside, interpolate, sink);
        } else if (startInside) {
          if (!polygonStarted)
            sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          interpolate(null, null, 1, sink);
          sink.lineEnd();
        }
        if (polygonStarted)
          sink.polygonEnd(), polygonStarted = false;
        segments = polygon = null;
      },
      sphere: function() {
        sink.polygonStart();
        sink.lineStart();
        interpolate(null, null, 1, sink);
        sink.lineEnd();
        sink.polygonEnd();
      }
    };
    function point(lambda, phi) {
      if (pointVisible(lambda, phi))
        sink.point(lambda, phi);
    }
    function pointLine(lambda, phi) {
      line.point(lambda, phi);
    }
    function lineStart() {
      clip.point = pointLine;
      line.lineStart();
    }
    function lineEnd() {
      clip.point = point;
      line.lineEnd();
    }
    function pointRing(lambda, phi) {
      ring.push([lambda, phi]);
      ringSink.point(lambda, phi);
    }
    function ringStart() {
      ringSink.lineStart();
      ring = [];
    }
    function ringEnd() {
      pointRing(ring[0][0], ring[0][1]);
      ringSink.lineEnd();
      var clean = ringSink.clean(), ringSegments = ringBuffer.result(), i3, n5 = ringSegments.length, m3, segment, point2;
      ring.pop();
      polygon.push(ring);
      ring = null;
      if (!n5)
        return;
      if (clean & 1) {
        segment = ringSegments[0];
        if ((m3 = segment.length - 1) > 0) {
          if (!polygonStarted)
            sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          for (i3 = 0; i3 < m3; ++i3)
            sink.point((point2 = segment[i3])[0], point2[1]);
          sink.lineEnd();
        }
        return;
      }
      if (n5 > 1 && clean & 2)
        ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
      segments.push(ringSegments.filter(validSegment));
    }
    return clip;
  };
}
function validSegment(segment) {
  return segment.length > 1;
}
function compareIntersection(a3, b3) {
  return ((a3 = a3.x)[0] < 0 ? a3[1] - halfPi - epsilon : halfPi - a3[1]) - ((b3 = b3.x)[0] < 0 ? b3[1] - halfPi - epsilon : halfPi - b3[1]);
}

// node_modules/d3-geo/src/clip/antimeridian.js
var antimeridian_default = clip_default(
  function() {
    return true;
  },
  clipAntimeridianLine,
  clipAntimeridianInterpolate,
  [-pi, -halfPi]
);
function clipAntimeridianLine(stream) {
  var lambda0 = NaN, phi0 = NaN, sign0 = NaN, clean;
  return {
    lineStart: function() {
      stream.lineStart();
      clean = 1;
    },
    point: function(lambda1, phi1) {
      var sign1 = lambda1 > 0 ? pi : -pi, delta = abs2(lambda1 - lambda0);
      if (abs2(delta - pi) < epsilon) {
        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        stream.point(lambda1, phi0);
        clean = 0;
      } else if (sign0 !== sign1 && delta >= pi) {
        if (abs2(lambda0 - sign0) < epsilon)
          lambda0 -= sign0 * epsilon;
        if (abs2(lambda1 - sign1) < epsilon)
          lambda1 -= sign1 * epsilon;
        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        clean = 0;
      }
      stream.point(lambda0 = lambda1, phi0 = phi1);
      sign0 = sign1;
    },
    lineEnd: function() {
      stream.lineEnd();
      lambda0 = phi0 = NaN;
    },
    clean: function() {
      return 2 - clean;
    }
  };
}
function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
  var cosPhi0, cosPhi1, sinLambda0Lambda1 = sin(lambda0 - lambda1);
  return abs2(sinLambda0Lambda1) > epsilon ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1) - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;
}
function clipAntimeridianInterpolate(from, to, direction, stream) {
  var phi;
  if (from == null) {
    phi = direction * halfPi;
    stream.point(-pi, phi);
    stream.point(0, phi);
    stream.point(pi, phi);
    stream.point(pi, 0);
    stream.point(pi, -phi);
    stream.point(0, -phi);
    stream.point(-pi, -phi);
    stream.point(-pi, 0);
    stream.point(-pi, phi);
  } else if (abs2(from[0] - to[0]) > epsilon) {
    var lambda = from[0] < to[0] ? pi : -pi;
    phi = direction * lambda / 2;
    stream.point(-lambda, phi);
    stream.point(0, phi);
    stream.point(lambda, phi);
  } else {
    stream.point(to[0], to[1]);
  }
}

// node_modules/d3-geo/src/clip/circle.js
function circle_default(radius) {
  var cr = cos(radius), delta = 2 * radians, smallRadius = cr > 0, notHemisphere = abs2(cr) > epsilon;
  function interpolate(from, to, direction, stream) {
    circleStream(stream, radius, delta, direction, from, to);
  }
  function visible(lambda, phi) {
    return cos(lambda) * cos(phi) > cr;
  }
  function clipLine(stream) {
    var point0, c0, v0, v00, clean;
    return {
      lineStart: function() {
        v00 = v0 = false;
        clean = 1;
      },
      point: function(lambda, phi) {
        var point1 = [lambda, phi], point2, v2 = visible(lambda, phi), c4 = smallRadius ? v2 ? 0 : code(lambda, phi) : v2 ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;
        if (!point0 && (v00 = v0 = v2))
          stream.lineStart();
        if (v2 !== v0) {
          point2 = intersect(point0, point1);
          if (!point2 || pointEqual_default(point0, point2) || pointEqual_default(point1, point2))
            point1[2] = 1;
        }
        if (v2 !== v0) {
          clean = 0;
          if (v2) {
            stream.lineStart();
            point2 = intersect(point1, point0);
            stream.point(point2[0], point2[1]);
          } else {
            point2 = intersect(point0, point1);
            stream.point(point2[0], point2[1], 2);
            stream.lineEnd();
          }
          point0 = point2;
        } else if (notHemisphere && point0 && smallRadius ^ v2) {
          var t4;
          if (!(c4 & c0) && (t4 = intersect(point1, point0, true))) {
            clean = 0;
            if (smallRadius) {
              stream.lineStart();
              stream.point(t4[0][0], t4[0][1]);
              stream.point(t4[1][0], t4[1][1]);
              stream.lineEnd();
            } else {
              stream.point(t4[1][0], t4[1][1]);
              stream.lineEnd();
              stream.lineStart();
              stream.point(t4[0][0], t4[0][1], 3);
            }
          }
        }
        if (v2 && (!point0 || !pointEqual_default(point0, point1))) {
          stream.point(point1[0], point1[1]);
        }
        point0 = point1, v0 = v2, c0 = c4;
      },
      lineEnd: function() {
        if (v0)
          stream.lineEnd();
        point0 = null;
      },
      // Rejoin first and last segments if there were intersections and the first
      // and last points were visible.
      clean: function() {
        return clean | (v00 && v0) << 1;
      }
    };
  }
  function intersect(a3, b3, two) {
    var pa = cartesian(a3), pb = cartesian(b3);
    var n1 = [1, 0, 0], n22 = cartesianCross(pa, pb), n2n2 = cartesianDot(n22, n22), n1n2 = n22[0], determinant = n2n2 - n1n2 * n1n2;
    if (!determinant)
      return !two && a3;
    var c1 = cr * n2n2 / determinant, c22 = -cr * n1n2 / determinant, n1xn2 = cartesianCross(n1, n22), A2 = cartesianScale(n1, c1), B = cartesianScale(n22, c22);
    cartesianAddInPlace(A2, B);
    var u3 = n1xn2, w2 = cartesianDot(A2, u3), uu = cartesianDot(u3, u3), t22 = w2 * w2 - uu * (cartesianDot(A2, A2) - 1);
    if (t22 < 0)
      return;
    var t4 = sqrt(t22), q = cartesianScale(u3, (-w2 - t4) / uu);
    cartesianAddInPlace(q, A2);
    q = spherical(q);
    if (!two)
      return q;
    var lambda0 = a3[0], lambda1 = b3[0], phi0 = a3[1], phi1 = b3[1], z;
    if (lambda1 < lambda0)
      z = lambda0, lambda0 = lambda1, lambda1 = z;
    var delta2 = lambda1 - lambda0, polar = abs2(delta2 - pi) < epsilon, meridian = polar || delta2 < epsilon;
    if (!polar && phi1 < phi0)
      z = phi0, phi0 = phi1, phi1 = z;
    if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < (abs2(q[0] - lambda0) < epsilon ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta2 > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
      var q1 = cartesianScale(u3, (-w2 + t4) / uu);
      cartesianAddInPlace(q1, A2);
      return [q, spherical(q1)];
    }
  }
  function code(lambda, phi) {
    var r6 = smallRadius ? radius : pi - radius, code2 = 0;
    if (lambda < -r6)
      code2 |= 1;
    else if (lambda > r6)
      code2 |= 2;
    if (phi < -r6)
      code2 |= 4;
    else if (phi > r6)
      code2 |= 8;
    return code2;
  }
  return clip_default(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);
}

// node_modules/d3-geo/src/clip/line.js
function line_default(a3, b3, x05, y05, x12, y12) {
  var ax = a3[0], ay = a3[1], bx = b3[0], by = b3[1], t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r6;
  r6 = x05 - ax;
  if (!dx && r6 > 0)
    return;
  r6 /= dx;
  if (dx < 0) {
    if (r6 < t0)
      return;
    if (r6 < t1)
      t1 = r6;
  } else if (dx > 0) {
    if (r6 > t1)
      return;
    if (r6 > t0)
      t0 = r6;
  }
  r6 = x12 - ax;
  if (!dx && r6 < 0)
    return;
  r6 /= dx;
  if (dx < 0) {
    if (r6 > t1)
      return;
    if (r6 > t0)
      t0 = r6;
  } else if (dx > 0) {
    if (r6 < t0)
      return;
    if (r6 < t1)
      t1 = r6;
  }
  r6 = y05 - ay;
  if (!dy && r6 > 0)
    return;
  r6 /= dy;
  if (dy < 0) {
    if (r6 < t0)
      return;
    if (r6 < t1)
      t1 = r6;
  } else if (dy > 0) {
    if (r6 > t1)
      return;
    if (r6 > t0)
      t0 = r6;
  }
  r6 = y12 - ay;
  if (!dy && r6 < 0)
    return;
  r6 /= dy;
  if (dy < 0) {
    if (r6 > t1)
      return;
    if (r6 > t0)
      t0 = r6;
  } else if (dy > 0) {
    if (r6 < t0)
      return;
    if (r6 < t1)
      t1 = r6;
  }
  if (t0 > 0)
    a3[0] = ax + t0 * dx, a3[1] = ay + t0 * dy;
  if (t1 < 1)
    b3[0] = ax + t1 * dx, b3[1] = ay + t1 * dy;
  return true;
}

// node_modules/d3-geo/src/clip/rectangle.js
var clipMax = 1e9;
var clipMin = -clipMax;
function clipRectangle(x05, y05, x12, y12) {
  function visible(x2, y3) {
    return x05 <= x2 && x2 <= x12 && y05 <= y3 && y3 <= y12;
  }
  function interpolate(from, to, direction, stream) {
    var a3 = 0, a1 = 0;
    if (from == null || (a3 = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
      do
        stream.point(a3 === 0 || a3 === 3 ? x05 : x12, a3 > 1 ? y12 : y05);
      while ((a3 = (a3 + direction + 4) % 4) !== a1);
    } else {
      stream.point(to[0], to[1]);
    }
  }
  function corner(p3, direction) {
    return abs2(p3[0] - x05) < epsilon ? direction > 0 ? 0 : 3 : abs2(p3[0] - x12) < epsilon ? direction > 0 ? 2 : 1 : abs2(p3[1] - y05) < epsilon ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
  }
  function compareIntersection2(a3, b3) {
    return comparePoint(a3.x, b3.x);
  }
  function comparePoint(a3, b3) {
    var ca = corner(a3, 1), cb = corner(b3, 1);
    return ca !== cb ? ca - cb : ca === 0 ? b3[1] - a3[1] : ca === 1 ? a3[0] - b3[0] : ca === 2 ? a3[1] - b3[1] : b3[0] - a3[0];
  }
  return function(stream) {
    var activeStream = stream, bufferStream = buffer_default(), segments, polygon, ring, x__, y__, v__, x_, y_, v_, first, clean;
    var clipStream = {
      point,
      lineStart,
      lineEnd,
      polygonStart,
      polygonEnd
    };
    function point(x2, y3) {
      if (visible(x2, y3))
        activeStream.point(x2, y3);
    }
    function polygonInside() {
      var winding = 0;
      for (var i3 = 0, n5 = polygon.length; i3 < n5; ++i3) {
        for (var ring2 = polygon[i3], j = 1, m3 = ring2.length, point2 = ring2[0], a0, a1, b0 = point2[0], b1 = point2[1]; j < m3; ++j) {
          a0 = b0, a1 = b1, point2 = ring2[j], b0 = point2[0], b1 = point2[1];
          if (a1 <= y12) {
            if (b1 > y12 && (b0 - a0) * (y12 - a1) > (b1 - a1) * (x05 - a0))
              ++winding;
          } else {
            if (b1 <= y12 && (b0 - a0) * (y12 - a1) < (b1 - a1) * (x05 - a0))
              --winding;
          }
        }
      }
      return winding;
    }
    function polygonStart() {
      activeStream = bufferStream, segments = [], polygon = [], clean = true;
    }
    function polygonEnd() {
      var startInside = polygonInside(), cleanInside = clean && startInside, visible2 = (segments = merge(segments)).length;
      if (cleanInside || visible2) {
        stream.polygonStart();
        if (cleanInside) {
          stream.lineStart();
          interpolate(null, null, 1, stream);
          stream.lineEnd();
        }
        if (visible2) {
          rejoin_default(segments, compareIntersection2, startInside, interpolate, stream);
        }
        stream.polygonEnd();
      }
      activeStream = stream, segments = polygon = ring = null;
    }
    function lineStart() {
      clipStream.point = linePoint;
      if (polygon)
        polygon.push(ring = []);
      first = true;
      v_ = false;
      x_ = y_ = NaN;
    }
    function lineEnd() {
      if (segments) {
        linePoint(x__, y__);
        if (v__ && v_)
          bufferStream.rejoin();
        segments.push(bufferStream.result());
      }
      clipStream.point = point;
      if (v_)
        activeStream.lineEnd();
    }
    function linePoint(x2, y3) {
      var v2 = visible(x2, y3);
      if (polygon)
        ring.push([x2, y3]);
      if (first) {
        x__ = x2, y__ = y3, v__ = v2;
        first = false;
        if (v2) {
          activeStream.lineStart();
          activeStream.point(x2, y3);
        }
      } else {
        if (v2 && v_)
          activeStream.point(x2, y3);
        else {
          var a3 = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))], b3 = [x2 = Math.max(clipMin, Math.min(clipMax, x2)), y3 = Math.max(clipMin, Math.min(clipMax, y3))];
          if (line_default(a3, b3, x05, y05, x12, y12)) {
            if (!v_) {
              activeStream.lineStart();
              activeStream.point(a3[0], a3[1]);
            }
            activeStream.point(b3[0], b3[1]);
            if (!v2)
              activeStream.lineEnd();
            clean = false;
          } else if (v2) {
            activeStream.lineStart();
            activeStream.point(x2, y3);
            clean = false;
          }
        }
      }
      x_ = x2, y_ = y3, v_ = v2;
    }
    return clipStream;
  };
}

// node_modules/d3-geo/src/identity.js
var identity_default = (x2) => x2;

// node_modules/d3-geo/src/path/area.js
var areaSum = new Adder();
var areaRingSum = new Adder();
var x00;
var y00;
var x0;
var y0;
var areaStream = {
  point: noop2,
  lineStart: noop2,
  lineEnd: noop2,
  polygonStart: function() {
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function() {
    areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop2;
    areaSum.add(abs2(areaRingSum));
    areaRingSum = new Adder();
  },
  result: function() {
    var area = areaSum / 2;
    areaSum = new Adder();
    return area;
  }
};
function areaRingStart() {
  areaStream.point = areaPointFirst;
}
function areaPointFirst(x2, y3) {
  areaStream.point = areaPoint;
  x00 = x0 = x2, y00 = y0 = y3;
}
function areaPoint(x2, y3) {
  areaRingSum.add(y0 * x2 - x0 * y3);
  x0 = x2, y0 = y3;
}
function areaRingEnd() {
  areaPoint(x00, y00);
}
var area_default = areaStream;

// node_modules/d3-geo/src/path/bounds.js
var x02 = Infinity;
var y02 = x02;
var x1 = -x02;
var y1 = x1;
var boundsStream = {
  point: boundsPoint,
  lineStart: noop2,
  lineEnd: noop2,
  polygonStart: noop2,
  polygonEnd: noop2,
  result: function() {
    var bounds = [[x02, y02], [x1, y1]];
    x1 = y1 = -(y02 = x02 = Infinity);
    return bounds;
  }
};
function boundsPoint(x2, y3) {
  if (x2 < x02)
    x02 = x2;
  if (x2 > x1)
    x1 = x2;
  if (y3 < y02)
    y02 = y3;
  if (y3 > y1)
    y1 = y3;
}
var bounds_default = boundsStream;

// node_modules/d3-geo/src/path/centroid.js
var X0 = 0;
var Y0 = 0;
var Z0 = 0;
var X1 = 0;
var Y1 = 0;
var Z1 = 0;
var X2 = 0;
var Y2 = 0;
var Z2 = 0;
var x002;
var y002;
var x03;
var y03;
var centroidStream = {
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function() {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function() {
    centroidStream.point = centroidPoint;
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  },
  result: function() {
    var centroid = Z2 ? [X2 / Z2, Y2 / Z2] : Z1 ? [X1 / Z1, Y1 / Z1] : Z0 ? [X0 / Z0, Y0 / Z0] : [NaN, NaN];
    X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
    return centroid;
  }
};
function centroidPoint(x2, y3) {
  X0 += x2;
  Y0 += y3;
  ++Z0;
}
function centroidLineStart() {
  centroidStream.point = centroidPointFirstLine;
}
function centroidPointFirstLine(x2, y3) {
  centroidStream.point = centroidPointLine;
  centroidPoint(x03 = x2, y03 = y3);
}
function centroidPointLine(x2, y3) {
  var dx = x2 - x03, dy = y3 - y03, z = sqrt(dx * dx + dy * dy);
  X1 += z * (x03 + x2) / 2;
  Y1 += z * (y03 + y3) / 2;
  Z1 += z;
  centroidPoint(x03 = x2, y03 = y3);
}
function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}
function centroidRingStart() {
  centroidStream.point = centroidPointFirstRing;
}
function centroidRingEnd() {
  centroidPointRing(x002, y002);
}
function centroidPointFirstRing(x2, y3) {
  centroidStream.point = centroidPointRing;
  centroidPoint(x002 = x03 = x2, y002 = y03 = y3);
}
function centroidPointRing(x2, y3) {
  var dx = x2 - x03, dy = y3 - y03, z = sqrt(dx * dx + dy * dy);
  X1 += z * (x03 + x2) / 2;
  Y1 += z * (y03 + y3) / 2;
  Z1 += z;
  z = y03 * x2 - x03 * y3;
  X2 += z * (x03 + x2);
  Y2 += z * (y03 + y3);
  Z2 += z * 3;
  centroidPoint(x03 = x2, y03 = y3);
}
var centroid_default = centroidStream;

// node_modules/d3-geo/src/path/context.js
function PathContext(context) {
  this._context = context;
}
PathContext.prototype = {
  _radius: 4.5,
  pointRadius: function(_2) {
    return this._radius = _2, this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line === 0)
      this._context.closePath();
    this._point = NaN;
  },
  point: function(x2, y3) {
    switch (this._point) {
      case 0: {
        this._context.moveTo(x2, y3);
        this._point = 1;
        break;
      }
      case 1: {
        this._context.lineTo(x2, y3);
        break;
      }
      default: {
        this._context.moveTo(x2 + this._radius, y3);
        this._context.arc(x2, y3, this._radius, 0, tau);
        break;
      }
    }
  },
  result: noop2
};

// node_modules/d3-geo/src/path/measure.js
var lengthSum = new Adder();
var lengthRing;
var x003;
var y003;
var x04;
var y04;
var lengthStream = {
  point: noop2,
  lineStart: function() {
    lengthStream.point = lengthPointFirst;
  },
  lineEnd: function() {
    if (lengthRing)
      lengthPoint(x003, y003);
    lengthStream.point = noop2;
  },
  polygonStart: function() {
    lengthRing = true;
  },
  polygonEnd: function() {
    lengthRing = null;
  },
  result: function() {
    var length = +lengthSum;
    lengthSum = new Adder();
    return length;
  }
};
function lengthPointFirst(x2, y3) {
  lengthStream.point = lengthPoint;
  x003 = x04 = x2, y003 = y04 = y3;
}
function lengthPoint(x2, y3) {
  x04 -= x2, y04 -= y3;
  lengthSum.add(sqrt(x04 * x04 + y04 * y04));
  x04 = x2, y04 = y3;
}
var measure_default = lengthStream;

// node_modules/d3-geo/src/path/string.js
var cacheDigits;
var cacheAppend;
var cacheRadius;
var cacheCircle;
var PathString = class {
  constructor(digits) {
    this._append = digits == null ? append : appendRound(digits);
    this._radius = 4.5;
    this._ = "";
  }
  pointRadius(_2) {
    this._radius = +_2;
    return this;
  }
  polygonStart() {
    this._line = 0;
  }
  polygonEnd() {
    this._line = NaN;
  }
  lineStart() {
    this._point = 0;
  }
  lineEnd() {
    if (this._line === 0)
      this._ += "Z";
    this._point = NaN;
  }
  point(x2, y3) {
    switch (this._point) {
      case 0: {
        this._append`M${x2},${y3}`;
        this._point = 1;
        break;
      }
      case 1: {
        this._append`L${x2},${y3}`;
        break;
      }
      default: {
        this._append`M${x2},${y3}`;
        if (this._radius !== cacheRadius || this._append !== cacheAppend) {
          const r6 = this._radius;
          const s4 = this._;
          this._ = "";
          this._append`m0,${r6}a${r6},${r6} 0 1,1 0,${-2 * r6}a${r6},${r6} 0 1,1 0,${2 * r6}z`;
          cacheRadius = r6;
          cacheAppend = this._append;
          cacheCircle = this._;
          this._ = s4;
        }
        this._ += cacheCircle;
        break;
      }
    }
  }
  result() {
    const result = this._;
    this._ = "";
    return result.length ? result : null;
  }
};
function append(strings) {
  let i3 = 1;
  this._ += strings[0];
  for (const j = strings.length; i3 < j; ++i3) {
    this._ += arguments[i3] + strings[i3];
  }
}
function appendRound(digits) {
  const d3 = Math.floor(digits);
  if (!(d3 >= 0))
    throw new RangeError(`invalid digits: ${digits}`);
  if (d3 > 15)
    return append;
  if (d3 !== cacheDigits) {
    const k2 = 10 ** d3;
    cacheDigits = d3;
    cacheAppend = function append2(strings) {
      let i3 = 1;
      this._ += strings[0];
      for (const j = strings.length; i3 < j; ++i3) {
        this._ += Math.round(arguments[i3] * k2) / k2 + strings[i3];
      }
    };
  }
  return cacheAppend;
}

// node_modules/d3-geo/src/path/index.js
function path_default(projection2, context) {
  let digits = 3, pointRadius = 4.5, projectionStream, contextStream;
  function path(object) {
    if (object) {
      if (typeof pointRadius === "function")
        contextStream.pointRadius(+pointRadius.apply(this, arguments));
      stream_default(object, projectionStream(contextStream));
    }
    return contextStream.result();
  }
  path.area = function(object) {
    stream_default(object, projectionStream(area_default));
    return area_default.result();
  };
  path.measure = function(object) {
    stream_default(object, projectionStream(measure_default));
    return measure_default.result();
  };
  path.bounds = function(object) {
    stream_default(object, projectionStream(bounds_default));
    return bounds_default.result();
  };
  path.centroid = function(object) {
    stream_default(object, projectionStream(centroid_default));
    return centroid_default.result();
  };
  path.projection = function(_2) {
    if (!arguments.length)
      return projection2;
    projectionStream = _2 == null ? (projection2 = null, identity_default) : (projection2 = _2).stream;
    return path;
  };
  path.context = function(_2) {
    if (!arguments.length)
      return context;
    contextStream = _2 == null ? (context = null, new PathString(digits)) : new PathContext(context = _2);
    if (typeof pointRadius !== "function")
      contextStream.pointRadius(pointRadius);
    return path;
  };
  path.pointRadius = function(_2) {
    if (!arguments.length)
      return pointRadius;
    pointRadius = typeof _2 === "function" ? _2 : (contextStream.pointRadius(+_2), +_2);
    return path;
  };
  path.digits = function(_2) {
    if (!arguments.length)
      return digits;
    if (_2 == null)
      digits = null;
    else {
      const d3 = Math.floor(_2);
      if (!(d3 >= 0))
        throw new RangeError(`invalid digits: ${_2}`);
      digits = d3;
    }
    if (context === null)
      contextStream = new PathString(digits);
    return path;
  };
  return path.projection(projection2).digits(digits).context(context);
}

// node_modules/d3-geo/src/transform.js
function transformer(methods) {
  return function(stream) {
    var s4 = new TransformStream();
    for (var key in methods)
      s4[key] = methods[key];
    s4.stream = stream;
    return s4;
  };
}
function TransformStream() {
}
TransformStream.prototype = {
  constructor: TransformStream,
  point: function(x2, y3) {
    this.stream.point(x2, y3);
  },
  sphere: function() {
    this.stream.sphere();
  },
  lineStart: function() {
    this.stream.lineStart();
  },
  lineEnd: function() {
    this.stream.lineEnd();
  },
  polygonStart: function() {
    this.stream.polygonStart();
  },
  polygonEnd: function() {
    this.stream.polygonEnd();
  }
};

// node_modules/d3-geo/src/projection/fit.js
function fit(projection2, fitBounds, object) {
  var clip = projection2.clipExtent && projection2.clipExtent();
  projection2.scale(150).translate([0, 0]);
  if (clip != null)
    projection2.clipExtent(null);
  stream_default(object, projection2.stream(bounds_default));
  fitBounds(bounds_default.result());
  if (clip != null)
    projection2.clipExtent(clip);
  return projection2;
}
function fitExtent(projection2, extent, object) {
  return fit(projection2, function(b3) {
    var w2 = extent[1][0] - extent[0][0], h3 = extent[1][1] - extent[0][1], k2 = Math.min(w2 / (b3[1][0] - b3[0][0]), h3 / (b3[1][1] - b3[0][1])), x2 = +extent[0][0] + (w2 - k2 * (b3[1][0] + b3[0][0])) / 2, y3 = +extent[0][1] + (h3 - k2 * (b3[1][1] + b3[0][1])) / 2;
    projection2.scale(150 * k2).translate([x2, y3]);
  }, object);
}
function fitSize(projection2, size, object) {
  return fitExtent(projection2, [[0, 0], size], object);
}
function fitWidth(projection2, width, object) {
  return fit(projection2, function(b3) {
    var w2 = +width, k2 = w2 / (b3[1][0] - b3[0][0]), x2 = (w2 - k2 * (b3[1][0] + b3[0][0])) / 2, y3 = -k2 * b3[0][1];
    projection2.scale(150 * k2).translate([x2, y3]);
  }, object);
}
function fitHeight(projection2, height, object) {
  return fit(projection2, function(b3) {
    var h3 = +height, k2 = h3 / (b3[1][1] - b3[0][1]), x2 = -k2 * b3[0][0], y3 = (h3 - k2 * (b3[1][1] + b3[0][1])) / 2;
    projection2.scale(150 * k2).translate([x2, y3]);
  }, object);
}

// node_modules/d3-geo/src/projection/resample.js
var maxDepth = 16;
var cosMinDistance = cos(30 * radians);
function resample_default(project, delta2) {
  return +delta2 ? resample(project, delta2) : resampleNone(project);
}
function resampleNone(project) {
  return transformer({
    point: function(x2, y3) {
      x2 = project(x2, y3);
      this.stream.point(x2[0], x2[1]);
    }
  });
}
function resample(project, delta2) {
  function resampleLineTo(x05, y05, lambda0, a0, b0, c0, x12, y12, lambda1, a1, b1, c1, depth, stream) {
    var dx = x12 - x05, dy = y12 - y05, d22 = dx * dx + dy * dy;
    if (d22 > 4 * delta2 && depth--) {
      var a3 = a0 + a1, b3 = b0 + b1, c4 = c0 + c1, m3 = sqrt(a3 * a3 + b3 * b3 + c4 * c4), phi2 = asin(c4 /= m3), lambda2 = abs2(abs2(c4) - 1) < epsilon || abs2(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b3, a3), p3 = project(lambda2, phi2), x2 = p3[0], y22 = p3[1], dx2 = x2 - x05, dy2 = y22 - y05, dz = dy * dx2 - dx * dy2;
      if (dz * dz / d22 > delta2 || abs2((dx * dx2 + dy * dy2) / d22 - 0.5) > 0.3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
        resampleLineTo(x05, y05, lambda0, a0, b0, c0, x2, y22, lambda2, a3 /= m3, b3 /= m3, c4, depth, stream);
        stream.point(x2, y22);
        resampleLineTo(x2, y22, lambda2, a3, b3, c4, x12, y12, lambda1, a1, b1, c1, depth, stream);
      }
    }
  }
  return function(stream) {
    var lambda00, x004, y004, a00, b00, c00, lambda0, x05, y05, a0, b0, c0;
    var resampleStream = {
      point,
      lineStart,
      lineEnd,
      polygonStart: function() {
        stream.polygonStart();
        resampleStream.lineStart = ringStart;
      },
      polygonEnd: function() {
        stream.polygonEnd();
        resampleStream.lineStart = lineStart;
      }
    };
    function point(x2, y3) {
      x2 = project(x2, y3);
      stream.point(x2[0], x2[1]);
    }
    function lineStart() {
      x05 = NaN;
      resampleStream.point = linePoint;
      stream.lineStart();
    }
    function linePoint(lambda, phi) {
      var c4 = cartesian([lambda, phi]), p3 = project(lambda, phi);
      resampleLineTo(x05, y05, lambda0, a0, b0, c0, x05 = p3[0], y05 = p3[1], lambda0 = lambda, a0 = c4[0], b0 = c4[1], c0 = c4[2], maxDepth, stream);
      stream.point(x05, y05);
    }
    function lineEnd() {
      resampleStream.point = point;
      stream.lineEnd();
    }
    function ringStart() {
      lineStart();
      resampleStream.point = ringPoint;
      resampleStream.lineEnd = ringEnd;
    }
    function ringPoint(lambda, phi) {
      linePoint(lambda00 = lambda, phi), x004 = x05, y004 = y05, a00 = a0, b00 = b0, c00 = c0;
      resampleStream.point = linePoint;
    }
    function ringEnd() {
      resampleLineTo(x05, y05, lambda0, a0, b0, c0, x004, y004, lambda00, a00, b00, c00, maxDepth, stream);
      resampleStream.lineEnd = lineEnd;
      lineEnd();
    }
    return resampleStream;
  };
}

// node_modules/d3-geo/src/projection/index.js
var transformRadians = transformer({
  point: function(x2, y3) {
    this.stream.point(x2 * radians, y3 * radians);
  }
});
function transformRotate(rotate) {
  return transformer({
    point: function(x2, y3) {
      var r6 = rotate(x2, y3);
      return this.stream.point(r6[0], r6[1]);
    }
  });
}
function scaleTranslate(k2, dx, dy, sx, sy) {
  function transform2(x2, y3) {
    x2 *= sx;
    y3 *= sy;
    return [dx + k2 * x2, dy - k2 * y3];
  }
  transform2.invert = function(x2, y3) {
    return [(x2 - dx) / k2 * sx, (dy - y3) / k2 * sy];
  };
  return transform2;
}
function scaleTranslateRotate(k2, dx, dy, sx, sy, alpha) {
  if (!alpha)
    return scaleTranslate(k2, dx, dy, sx, sy);
  var cosAlpha = cos(alpha), sinAlpha = sin(alpha), a3 = cosAlpha * k2, b3 = sinAlpha * k2, ai = cosAlpha / k2, bi = sinAlpha / k2, ci = (sinAlpha * dy - cosAlpha * dx) / k2, fi = (sinAlpha * dx + cosAlpha * dy) / k2;
  function transform2(x2, y3) {
    x2 *= sx;
    y3 *= sy;
    return [a3 * x2 - b3 * y3 + dx, dy - b3 * x2 - a3 * y3];
  }
  transform2.invert = function(x2, y3) {
    return [sx * (ai * x2 - bi * y3 + ci), sy * (fi - bi * x2 - ai * y3)];
  };
  return transform2;
}
function projection(project) {
  return projectionMutator(function() {
    return project;
  })();
}
function projectionMutator(projectAt) {
  var project, k2 = 150, x2 = 480, y3 = 250, lambda = 0, phi = 0, deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, alpha = 0, sx = 1, sy = 1, theta = null, preclip = antimeridian_default, x05 = null, y05, x12, y12, postclip = identity_default, delta2 = 0.5, projectResample, projectTransform, projectRotateTransform, cache, cacheStream;
  function projection2(point) {
    return projectRotateTransform(point[0] * radians, point[1] * radians);
  }
  function invert(point) {
    point = projectRotateTransform.invert(point[0], point[1]);
    return point && [point[0] * degrees2, point[1] * degrees2];
  }
  projection2.stream = function(stream) {
    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
  };
  projection2.preclip = function(_2) {
    return arguments.length ? (preclip = _2, theta = void 0, reset()) : preclip;
  };
  projection2.postclip = function(_2) {
    return arguments.length ? (postclip = _2, x05 = y05 = x12 = y12 = null, reset()) : postclip;
  };
  projection2.clipAngle = function(_2) {
    return arguments.length ? (preclip = +_2 ? circle_default(theta = _2 * radians) : (theta = null, antimeridian_default), reset()) : theta * degrees2;
  };
  projection2.clipExtent = function(_2) {
    return arguments.length ? (postclip = _2 == null ? (x05 = y05 = x12 = y12 = null, identity_default) : clipRectangle(x05 = +_2[0][0], y05 = +_2[0][1], x12 = +_2[1][0], y12 = +_2[1][1]), reset()) : x05 == null ? null : [[x05, y05], [x12, y12]];
  };
  projection2.scale = function(_2) {
    return arguments.length ? (k2 = +_2, recenter()) : k2;
  };
  projection2.translate = function(_2) {
    return arguments.length ? (x2 = +_2[0], y3 = +_2[1], recenter()) : [x2, y3];
  };
  projection2.center = function(_2) {
    return arguments.length ? (lambda = _2[0] % 360 * radians, phi = _2[1] % 360 * radians, recenter()) : [lambda * degrees2, phi * degrees2];
  };
  projection2.rotate = function(_2) {
    return arguments.length ? (deltaLambda = _2[0] % 360 * radians, deltaPhi = _2[1] % 360 * radians, deltaGamma = _2.length > 2 ? _2[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees2, deltaPhi * degrees2, deltaGamma * degrees2];
  };
  projection2.angle = function(_2) {
    return arguments.length ? (alpha = _2 % 360 * radians, recenter()) : alpha * degrees2;
  };
  projection2.reflectX = function(_2) {
    return arguments.length ? (sx = _2 ? -1 : 1, recenter()) : sx < 0;
  };
  projection2.reflectY = function(_2) {
    return arguments.length ? (sy = _2 ? -1 : 1, recenter()) : sy < 0;
  };
  projection2.precision = function(_2) {
    return arguments.length ? (projectResample = resample_default(projectTransform, delta2 = _2 * _2), reset()) : sqrt(delta2);
  };
  projection2.fitExtent = function(extent, object) {
    return fitExtent(projection2, extent, object);
  };
  projection2.fitSize = function(size, object) {
    return fitSize(projection2, size, object);
  };
  projection2.fitWidth = function(width, object) {
    return fitWidth(projection2, width, object);
  };
  projection2.fitHeight = function(height, object) {
    return fitHeight(projection2, height, object);
  };
  function recenter() {
    var center = scaleTranslateRotate(k2, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)), transform2 = scaleTranslateRotate(k2, x2 - center[0], y3 - center[1], sx, sy, alpha);
    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);
    projectTransform = compose_default(project, transform2);
    projectRotateTransform = compose_default(rotate, projectTransform);
    projectResample = resample_default(projectTransform, delta2);
    return reset();
  }
  function reset() {
    cache = cacheStream = null;
    return projection2;
  }
  return function() {
    project = projectAt.apply(this, arguments);
    projection2.invert = project.invert && invert;
    return recenter();
  };
}

// node_modules/d3-geo/src/projection/mercator.js
function mercatorRaw(lambda, phi) {
  return [lambda, log(tan((halfPi + phi) / 2))];
}
mercatorRaw.invert = function(x2, y3) {
  return [x2, 2 * atan(exp(y3)) - halfPi];
};
function mercator_default() {
  return mercatorProjection(mercatorRaw).scale(961 / tau);
}
function mercatorProjection(project) {
  var m3 = projection(project), center = m3.center, scale = m3.scale, translate = m3.translate, clipExtent = m3.clipExtent, x05 = null, y05, x12, y12;
  m3.scale = function(_2) {
    return arguments.length ? (scale(_2), reclip()) : scale();
  };
  m3.translate = function(_2) {
    return arguments.length ? (translate(_2), reclip()) : translate();
  };
  m3.center = function(_2) {
    return arguments.length ? (center(_2), reclip()) : center();
  };
  m3.clipExtent = function(_2) {
    return arguments.length ? (_2 == null ? x05 = y05 = x12 = y12 = null : (x05 = +_2[0][0], y05 = +_2[0][1], x12 = +_2[1][0], y12 = +_2[1][1]), reclip()) : x05 == null ? null : [[x05, y05], [x12, y12]];
  };
  function reclip() {
    var k2 = pi * scale(), t4 = m3(rotation_default(m3.rotate()).invert([0, 0]));
    return clipExtent(x05 == null ? [[t4[0] - k2, t4[1] - k2], [t4[0] + k2, t4[1] + k2]] : project === mercatorRaw ? [[Math.max(t4[0] - k2, x05), y05], [Math.min(t4[0] + k2, x12), y12]] : [[x05, Math.max(t4[1] - k2, y05)], [x12, Math.min(t4[1] + k2, y12)]]);
  }
  return reclip();
}

// node_modules/d3-zoom/src/constant.js
var constant_default4 = (x2) => () => x2;

// node_modules/d3-zoom/src/event.js
function ZoomEvent(type2, {
  sourceEvent,
  target,
  transform: transform2,
  dispatch: dispatch2
}) {
  Object.defineProperties(this, {
    type: { value: type2, enumerable: true, configurable: true },
    sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
    target: { value: target, enumerable: true, configurable: true },
    transform: { value: transform2, enumerable: true, configurable: true },
    _: { value: dispatch2 }
  });
}

// node_modules/d3-zoom/src/transform.js
function Transform(k2, x2, y3) {
  this.k = k2;
  this.x = x2;
  this.y = y3;
}
Transform.prototype = {
  constructor: Transform,
  scale: function(k2) {
    return k2 === 1 ? this : new Transform(this.k * k2, this.x, this.y);
  },
  translate: function(x2, y3) {
    return x2 === 0 & y3 === 0 ? this : new Transform(this.k, this.x + this.k * x2, this.y + this.k * y3);
  },
  apply: function(point) {
    return [point[0] * this.k + this.x, point[1] * this.k + this.y];
  },
  applyX: function(x2) {
    return x2 * this.k + this.x;
  },
  applyY: function(y3) {
    return y3 * this.k + this.y;
  },
  invert: function(location) {
    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
  },
  invertX: function(x2) {
    return (x2 - this.x) / this.k;
  },
  invertY: function(y3) {
    return (y3 - this.y) / this.k;
  },
  rescaleX: function(x2) {
    return x2.copy().domain(x2.range().map(this.invertX, this).map(x2.invert, x2));
  },
  rescaleY: function(y3) {
    return y3.copy().domain(y3.range().map(this.invertY, this).map(y3.invert, y3));
  },
  toString: function() {
    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
  }
};
var identity2 = new Transform(1, 0, 0);
transform.prototype = Transform.prototype;
function transform(node) {
  while (!node.__zoom)
    if (!(node = node.parentNode))
      return identity2;
  return node.__zoom;
}

// node_modules/d3-zoom/src/noevent.js
function nopropagation2(event) {
  event.stopImmediatePropagation();
}
function noevent_default3(event) {
  event.preventDefault();
  event.stopImmediatePropagation();
}

// node_modules/d3-zoom/src/zoom.js
function defaultFilter(event) {
  return (!event.ctrlKey || event.type === "wheel") && !event.button;
}
function defaultExtent() {
  var e4 = this;
  if (e4 instanceof SVGElement) {
    e4 = e4.ownerSVGElement || e4;
    if (e4.hasAttribute("viewBox")) {
      e4 = e4.viewBox.baseVal;
      return [[e4.x, e4.y], [e4.x + e4.width, e4.y + e4.height]];
    }
    return [[0, 0], [e4.width.baseVal.value, e4.height.baseVal.value]];
  }
  return [[0, 0], [e4.clientWidth, e4.clientHeight]];
}
function defaultTransform() {
  return this.__zoom || identity2;
}
function defaultWheelDelta(event) {
  return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 2e-3) * (event.ctrlKey ? 10 : 1);
}
function defaultTouchable() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}
function defaultConstrain(transform2, extent, translateExtent) {
  var dx0 = transform2.invertX(extent[0][0]) - translateExtent[0][0], dx1 = transform2.invertX(extent[1][0]) - translateExtent[1][0], dy0 = transform2.invertY(extent[0][1]) - translateExtent[0][1], dy1 = transform2.invertY(extent[1][1]) - translateExtent[1][1];
  return transform2.translate(
    dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
    dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
  );
}
function zoom_default2() {
  var filter2 = defaultFilter, extent = defaultExtent, constrain = defaultConstrain, wheelDelta = defaultWheelDelta, touchable = defaultTouchable, scaleExtent = [0, Infinity], translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]], duration = 250, interpolate = zoom_default, listeners = dispatch_default("start", "zoom", "end"), touchstarting, touchfirst, touchending, touchDelay = 500, wheelDelay = 150, clickDistance2 = 0, tapDistance = 10;
  function zoom(selection2) {
    selection2.property("__zoom", defaultTransform).on("wheel.zoom", wheeled, { passive: false }).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).filter(touchable).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }
  zoom.transform = function(collection, transform2, point, event) {
    var selection2 = collection.selection ? collection.selection() : collection;
    selection2.property("__zoom", defaultTransform);
    if (collection !== selection2) {
      schedule(collection, transform2, point, event);
    } else {
      selection2.interrupt().each(function() {
        gesture(this, arguments).event(event).start().zoom(null, typeof transform2 === "function" ? transform2.apply(this, arguments) : transform2).end();
      });
    }
  };
  zoom.scaleBy = function(selection2, k2, p3, event) {
    zoom.scaleTo(selection2, function() {
      var k0 = this.__zoom.k, k1 = typeof k2 === "function" ? k2.apply(this, arguments) : k2;
      return k0 * k1;
    }, p3, event);
  };
  zoom.scaleTo = function(selection2, k2, p3, event) {
    zoom.transform(selection2, function() {
      var e4 = extent.apply(this, arguments), t0 = this.__zoom, p0 = p3 == null ? centroid(e4) : typeof p3 === "function" ? p3.apply(this, arguments) : p3, p1 = t0.invert(p0), k1 = typeof k2 === "function" ? k2.apply(this, arguments) : k2;
      return constrain(translate(scale(t0, k1), p0, p1), e4, translateExtent);
    }, p3, event);
  };
  zoom.translateBy = function(selection2, x2, y3, event) {
    zoom.transform(selection2, function() {
      return constrain(this.__zoom.translate(
        typeof x2 === "function" ? x2.apply(this, arguments) : x2,
        typeof y3 === "function" ? y3.apply(this, arguments) : y3
      ), extent.apply(this, arguments), translateExtent);
    }, null, event);
  };
  zoom.translateTo = function(selection2, x2, y3, p3, event) {
    zoom.transform(selection2, function() {
      var e4 = extent.apply(this, arguments), t4 = this.__zoom, p0 = p3 == null ? centroid(e4) : typeof p3 === "function" ? p3.apply(this, arguments) : p3;
      return constrain(identity2.translate(p0[0], p0[1]).scale(t4.k).translate(
        typeof x2 === "function" ? -x2.apply(this, arguments) : -x2,
        typeof y3 === "function" ? -y3.apply(this, arguments) : -y3
      ), e4, translateExtent);
    }, p3, event);
  };
  function scale(transform2, k2) {
    k2 = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k2));
    return k2 === transform2.k ? transform2 : new Transform(k2, transform2.x, transform2.y);
  }
  function translate(transform2, p0, p1) {
    var x2 = p0[0] - p1[0] * transform2.k, y3 = p0[1] - p1[1] * transform2.k;
    return x2 === transform2.x && y3 === transform2.y ? transform2 : new Transform(transform2.k, x2, y3);
  }
  function centroid(extent2) {
    return [(+extent2[0][0] + +extent2[1][0]) / 2, (+extent2[0][1] + +extent2[1][1]) / 2];
  }
  function schedule(transition2, transform2, point, event) {
    transition2.on("start.zoom", function() {
      gesture(this, arguments).event(event).start();
    }).on("interrupt.zoom end.zoom", function() {
      gesture(this, arguments).event(event).end();
    }).tween("zoom", function() {
      var that = this, args = arguments, g3 = gesture(that, args).event(event), e4 = extent.apply(that, args), p3 = point == null ? centroid(e4) : typeof point === "function" ? point.apply(that, args) : point, w2 = Math.max(e4[1][0] - e4[0][0], e4[1][1] - e4[0][1]), a3 = that.__zoom, b3 = typeof transform2 === "function" ? transform2.apply(that, args) : transform2, i3 = interpolate(a3.invert(p3).concat(w2 / a3.k), b3.invert(p3).concat(w2 / b3.k));
      return function(t4) {
        if (t4 === 1)
          t4 = b3;
        else {
          var l3 = i3(t4), k2 = w2 / l3[2];
          t4 = new Transform(k2, p3[0] - l3[0] * k2, p3[1] - l3[1] * k2);
        }
        g3.zoom(null, t4);
      };
    });
  }
  function gesture(that, args, clean) {
    return !clean && that.__zooming || new Gesture(that, args);
  }
  function Gesture(that, args) {
    this.that = that;
    this.args = args;
    this.active = 0;
    this.sourceEvent = null;
    this.extent = extent.apply(that, args);
    this.taps = 0;
  }
  Gesture.prototype = {
    event: function(event) {
      if (event)
        this.sourceEvent = event;
      return this;
    },
    start: function() {
      if (++this.active === 1) {
        this.that.__zooming = this;
        this.emit("start");
      }
      return this;
    },
    zoom: function(key, transform2) {
      if (this.mouse && key !== "mouse")
        this.mouse[1] = transform2.invert(this.mouse[0]);
      if (this.touch0 && key !== "touch")
        this.touch0[1] = transform2.invert(this.touch0[0]);
      if (this.touch1 && key !== "touch")
        this.touch1[1] = transform2.invert(this.touch1[0]);
      this.that.__zoom = transform2;
      this.emit("zoom");
      return this;
    },
    end: function() {
      if (--this.active === 0) {
        delete this.that.__zooming;
        this.emit("end");
      }
      return this;
    },
    emit: function(type2) {
      var d3 = select_default2(this.that).datum();
      listeners.call(
        type2,
        this.that,
        new ZoomEvent(type2, {
          sourceEvent: this.sourceEvent,
          target: zoom,
          type: type2,
          transform: this.that.__zoom,
          dispatch: listeners
        }),
        d3
      );
    }
  };
  function wheeled(event, ...args) {
    if (!filter2.apply(this, arguments))
      return;
    var g3 = gesture(this, args).event(event), t4 = this.__zoom, k2 = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t4.k * Math.pow(2, wheelDelta.apply(this, arguments)))), p3 = pointer_default(event);
    if (g3.wheel) {
      if (g3.mouse[0][0] !== p3[0] || g3.mouse[0][1] !== p3[1]) {
        g3.mouse[1] = t4.invert(g3.mouse[0] = p3);
      }
      clearTimeout(g3.wheel);
    } else if (t4.k === k2)
      return;
    else {
      g3.mouse = [p3, t4.invert(p3)];
      interrupt_default(this);
      g3.start();
    }
    noevent_default3(event);
    g3.wheel = setTimeout(wheelidled, wheelDelay);
    g3.zoom("mouse", constrain(translate(scale(t4, k2), g3.mouse[0], g3.mouse[1]), g3.extent, translateExtent));
    function wheelidled() {
      g3.wheel = null;
      g3.end();
    }
  }
  function mousedowned(event, ...args) {
    if (touchending || !filter2.apply(this, arguments))
      return;
    var currentTarget = event.currentTarget, g3 = gesture(this, args, true).event(event), v2 = select_default2(event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true), p3 = pointer_default(event, currentTarget), x05 = event.clientX, y05 = event.clientY;
    nodrag_default(event.view);
    nopropagation2(event);
    g3.mouse = [p3, this.__zoom.invert(p3)];
    interrupt_default(this);
    g3.start();
    function mousemoved(event2) {
      noevent_default3(event2);
      if (!g3.moved) {
        var dx = event2.clientX - x05, dy = event2.clientY - y05;
        g3.moved = dx * dx + dy * dy > clickDistance2;
      }
      g3.event(event2).zoom("mouse", constrain(translate(g3.that.__zoom, g3.mouse[0] = pointer_default(event2, currentTarget), g3.mouse[1]), g3.extent, translateExtent));
    }
    function mouseupped(event2) {
      v2.on("mousemove.zoom mouseup.zoom", null);
      yesdrag(event2.view, g3.moved);
      noevent_default3(event2);
      g3.event(event2).end();
    }
  }
  function dblclicked(event, ...args) {
    if (!filter2.apply(this, arguments))
      return;
    var t0 = this.__zoom, p0 = pointer_default(event.changedTouches ? event.changedTouches[0] : event, this), p1 = t0.invert(p0), k1 = t0.k * (event.shiftKey ? 0.5 : 2), t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, args), translateExtent);
    noevent_default3(event);
    if (duration > 0)
      select_default2(this).transition().duration(duration).call(schedule, t1, p0, event);
    else
      select_default2(this).call(zoom.transform, t1, p0, event);
  }
  function touchstarted(event, ...args) {
    if (!filter2.apply(this, arguments))
      return;
    var touches = event.touches, n5 = touches.length, g3 = gesture(this, args, event.changedTouches.length === n5).event(event), started, i3, t4, p3;
    nopropagation2(event);
    for (i3 = 0; i3 < n5; ++i3) {
      t4 = touches[i3], p3 = pointer_default(t4, this);
      p3 = [p3, this.__zoom.invert(p3), t4.identifier];
      if (!g3.touch0)
        g3.touch0 = p3, started = true, g3.taps = 1 + !!touchstarting;
      else if (!g3.touch1 && g3.touch0[2] !== p3[2])
        g3.touch1 = p3, g3.taps = 0;
    }
    if (touchstarting)
      touchstarting = clearTimeout(touchstarting);
    if (started) {
      if (g3.taps < 2)
        touchfirst = p3[0], touchstarting = setTimeout(function() {
          touchstarting = null;
        }, touchDelay);
      interrupt_default(this);
      g3.start();
    }
  }
  function touchmoved(event, ...args) {
    if (!this.__zooming)
      return;
    var g3 = gesture(this, args).event(event), touches = event.changedTouches, n5 = touches.length, i3, t4, p3, l3;
    noevent_default3(event);
    for (i3 = 0; i3 < n5; ++i3) {
      t4 = touches[i3], p3 = pointer_default(t4, this);
      if (g3.touch0 && g3.touch0[2] === t4.identifier)
        g3.touch0[0] = p3;
      else if (g3.touch1 && g3.touch1[2] === t4.identifier)
        g3.touch1[0] = p3;
    }
    t4 = g3.that.__zoom;
    if (g3.touch1) {
      var p0 = g3.touch0[0], l0 = g3.touch0[1], p1 = g3.touch1[0], l1 = g3.touch1[1], dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp, dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
      t4 = scale(t4, Math.sqrt(dp / dl));
      p3 = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
      l3 = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
    } else if (g3.touch0)
      p3 = g3.touch0[0], l3 = g3.touch0[1];
    else
      return;
    g3.zoom("touch", constrain(translate(t4, p3, l3), g3.extent, translateExtent));
  }
  function touchended(event, ...args) {
    if (!this.__zooming)
      return;
    var g3 = gesture(this, args).event(event), touches = event.changedTouches, n5 = touches.length, i3, t4;
    nopropagation2(event);
    if (touchending)
      clearTimeout(touchending);
    touchending = setTimeout(function() {
      touchending = null;
    }, touchDelay);
    for (i3 = 0; i3 < n5; ++i3) {
      t4 = touches[i3];
      if (g3.touch0 && g3.touch0[2] === t4.identifier)
        delete g3.touch0;
      else if (g3.touch1 && g3.touch1[2] === t4.identifier)
        delete g3.touch1;
    }
    if (g3.touch1 && !g3.touch0)
      g3.touch0 = g3.touch1, delete g3.touch1;
    if (g3.touch0)
      g3.touch0[1] = this.__zoom.invert(g3.touch0[0]);
    else {
      g3.end();
      if (g3.taps === 2) {
        t4 = pointer_default(t4, this);
        if (Math.hypot(touchfirst[0] - t4[0], touchfirst[1] - t4[1]) < tapDistance) {
          var p3 = select_default2(this).on("dblclick.zoom");
          if (p3)
            p3.apply(this, arguments);
        }
      }
    }
  }
  zoom.wheelDelta = function(_2) {
    return arguments.length ? (wheelDelta = typeof _2 === "function" ? _2 : constant_default4(+_2), zoom) : wheelDelta;
  };
  zoom.filter = function(_2) {
    return arguments.length ? (filter2 = typeof _2 === "function" ? _2 : constant_default4(!!_2), zoom) : filter2;
  };
  zoom.touchable = function(_2) {
    return arguments.length ? (touchable = typeof _2 === "function" ? _2 : constant_default4(!!_2), zoom) : touchable;
  };
  zoom.extent = function(_2) {
    return arguments.length ? (extent = typeof _2 === "function" ? _2 : constant_default4([[+_2[0][0], +_2[0][1]], [+_2[1][0], +_2[1][1]]]), zoom) : extent;
  };
  zoom.scaleExtent = function(_2) {
    return arguments.length ? (scaleExtent[0] = +_2[0], scaleExtent[1] = +_2[1], zoom) : [scaleExtent[0], scaleExtent[1]];
  };
  zoom.translateExtent = function(_2) {
    return arguments.length ? (translateExtent[0][0] = +_2[0][0], translateExtent[1][0] = +_2[1][0], translateExtent[0][1] = +_2[0][1], translateExtent[1][1] = +_2[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
  };
  zoom.constrain = function(_2) {
    return arguments.length ? (constrain = _2, zoom) : constrain;
  };
  zoom.duration = function(_2) {
    return arguments.length ? (duration = +_2, zoom) : duration;
  };
  zoom.interpolate = function(_2) {
    return arguments.length ? (interpolate = _2, zoom) : interpolate;
  };
  zoom.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? zoom : value;
  };
  zoom.clickDistance = function(_2) {
    return arguments.length ? (clickDistance2 = (_2 = +_2) * _2, zoom) : Math.sqrt(clickDistance2);
  };
  zoom.tapDistance = function(_2) {
    return arguments.length ? (tapDistance = +_2, zoom) : tapDistance;
  };
  return zoom;
}

// node_modules/@lit/reactive-element/node/decorators/custom-element.js
var t3 = (t4) => (e4, o5) => {
  void 0 !== o5 ? o5.addInitializer(() => {
    customElements.define(t4, e4);
  }) : customElements.define(t4, e4);
};

// node_modules/@lit/reactive-element/node/decorators/property.js
var o4 = { attribute: true, type: String, converter: b, reflect: false, hasChanged: y };
var r5 = (t4 = o4, e4, r6) => {
  const { kind: n5, metadata: i3 } = r6;
  let s4 = globalThis.litPropertyMetadata.get(i3);
  if (void 0 === s4 && globalThis.litPropertyMetadata.set(i3, s4 = /* @__PURE__ */ new Map()), s4.set(r6.name, t4), "accessor" === n5) {
    const { name: o5 } = r6;
    return { set(r7) {
      const n6 = e4.get.call(this);
      e4.set.call(this, r7), this.requestUpdate(o5, n6, t4);
    }, init(e5) {
      return void 0 !== e5 && this.P(o5, void 0, t4), e5;
    } };
  }
  if ("setter" === n5) {
    const { name: o5 } = r6;
    return function(r7) {
      const n6 = this[o5];
      e4.call(this, r7), this.requestUpdate(o5, n6, t4);
    };
  }
  throw Error("Unsupported decorator location: " + n5);
};
function n4(t4) {
  return (e4, o5) => "object" == typeof o5 ? r5(t4, e4, o5) : ((t5, e5, o6) => {
    const r6 = e5.hasOwnProperty(o6);
    return e5.constructor.createProperty(o6, r6 ? { ...t5, wrapped: true } : t5), r6 ? Object.getOwnPropertyDescriptor(e5, o6) : void 0;
  })(t4, e4, o5);
}

// libs/simulator/map/src/lib/simulator-map.ts
var import_lodash = __toESM(require_lodash());

// libs/simulator/map/src/lib/sectors.ts
function renderSectors(svg, geojson, path) {
  svg.selectAll(".country").data(geojson.features).enter().append("path").attr("d", path).style("fill", "#AAAAAA").style("stroke", "#FEFEE2");
}

// libs/simulator/map/src/lib/utils.ts
function generateRandomData() {
  const word1 = generateRandomWord();
  const word2 = generateRandomWord();
  const randomData = `${word1}<br>${word2}`;
  return {
    data: randomData,
    metadata: `${randomData}<br>Z3 t350 PPN p350<br>OSMOB h..m...<br>134.765<br>V<br>@h221@k260 @m.77@36`
  };
}
function generateRandomWord() {
  const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
  const wordLength = Math.floor(Math.random() * 10) + 1;
  let word = "";
  for (let i3 = 0; i3 < wordLength; i3++) {
    const randomIndex = Math.floor(Math.random() * characters.length);
    word += characters[randomIndex];
  }
  return word;
}

// libs/simulator/map/src/lib/flights.ts
function renderFlights(svg, flights, projection2, tooltip) {
  flights?.forEach((flight) => {
    const foreignObjectId = `flight-foreign-object-${flight.aircraftId}`;
    const { position } = flight;
    const [x2, y3] = projection2([position.longitude, position.latitude]);
    const foreignObject = svg.append("foreignObject").attr("id", foreignObjectId).attr("x", x2).attr("y", y3);
    foreignObject.append("xhtml:section").classed("plane", true).html("x");
    foreignObject.attr("width", 50).attr("height", 50);
    const div = foreignObject.append("xhtml:div").attr("xmlns", "http://www.w3.org/1999/xhtml").classed("flight-card", true);
    div.append("p").html(`${flight?.aircraftId} <br> ${Math.floor(flight?.position?.cas)} - ${Math.floor(flight?.position?.hdg)}`);
    foreignObject.select(".plane").on("mouseover", (event) => {
      const flightData = `${flight?.aircraftId}<br>${Math.floor(flight?.position?.cas)} - ${Math.floor(flight?.position?.hdg)}<br>${generateRandomData()?.metadata}`;
      const bbox = foreignObject.node().getBoundingClientRect();
      const tooltipX = bbox.left + bbox.width - 100;
      const tooltipY = bbox.top - 28;
      tooltip.innerHTML = flightData;
      tooltip.style.left = `${tooltipX}px`;
      tooltip.style.top = `${tooltipY}px`;
      tooltip.style.display = "block";
    }).on("mouseout", () => {
      tooltip.style.display = "none";
    });
  });
}

// libs/simulator/map/src/lib/beacons.ts
function renderBeacons(svg, beacons, path) {
  svg.selectAll(".country").data(beacons.features).enter().append("polygon").attr("points", function(d3) {
    if (!path) {
      return "";
    }
    var centroid = path.centroid(d3);
    if (!centroid || isNaN(centroid[0]) || isNaN(centroid[1])) {
      return "";
    }
    var x2 = centroid[0];
    var y3 = centroid[1];
    var size = 5;
    return x2 + "," + (y3 - size) + " " + (x2 - size) + "," + (y3 + size) + " " + (x2 + size) + "," + (y3 + size);
  }).style("fill", "#004080").style("stroke", "#004080");
  svg.selectAll(".beacon-label").data(beacons.features).enter().append("text").attr("x", function(d3) {
    if (!path || !path.centroid(d3))
      return 0;
    return path.centroid(d3)[0];
  }).attr("y", function(d3) {
    if (!path || !path.centroid(d3))
      return 0;
    return path.centroid(d3)[1] + 15;
  }).text(function(d3) {
    return d3.properties.name;
  }).attr("text-anchor", "middle").style("fill", "#004080").style("font-size", "0.5rem");
}

// libs/simulator/map/src/lib/airports.ts
function renderAirports(svg, airports, path) {
  svg.selectAll(".country").data(airports.features).enter().append("path").attr("d", function(d3) {
    if (!path) {
      return "";
    }
    return path(d3);
  }).style("fill", "#841a1b").style("stroke", "#841a1b").attr("transform", function(d3) {
    if (!path) {
      return "";
    }
    var scale = 0.5;
    var centroid = path.centroid(d3);
    return "translate(" + centroid + ") scale(" + scale + ")";
  });
  svg.selectAll(".airport-label").data(airports.features).enter().append("text").attr("class", "airport-label").attr("x", function(d3) {
    if (!path || !path.centroid(d3))
      return 0;
    return path.centroid(d3)[0] + 100;
  }).attr("y", function(d3) {
    if (!path || !path.centroid(d3))
      return 0;
    return path.centroid(d3)[1] + 60;
  }).text(function(d3) {
    return d3.properties.name;
  }).attr("text-anchor", "start").style("fill", "#841a1b").style("font-size", "0.5rem");
}

// libs/simulator/map/src/lib/airwaypoints.ts
function renderAirwaypoints(svg, airwaypoints, path) {
  svg.selectAll(".airwaypoint").data(airwaypoints.features).enter().append("polygon").attr("points", function(d3) {
    if (!path) {
      return "";
    }
    var centroid = path.centroid(d3);
    if (!centroid || isNaN(centroid[0]) || isNaN(centroid[1])) {
      return "";
    }
    var size = 5;
    return centroid[0] + "," + (centroid[1] - size) + " " + (centroid[0] - size) + "," + (centroid[1] + size) + " " + (centroid[0] + size) + "," + (centroid[1] + size);
  }).style("fill", "#800080").style("stroke", "#800080");
  svg.selectAll(".airwaypoint-label").data(airwaypoints.features).enter().append("text").attr("x", function(d3) {
    if (!path || !path.centroid(d3))
      return 0;
    return path.centroid(d3)[0];
  }).attr("y", function(d3) {
    if (!path || !path.centroid(d3))
      return 0;
    return path.centroid(d3)[1] + 15;
  }).text(function(d3) {
    return d3.properties.name;
  }).attr("text-anchor", "middle").style("fill", "#800080").style("font-size", "0.5rem");
}

// libs/simulator/map/src/lib/airways.ts
function renderAirways(svg, airways, path) {
  svg.selectAll(".country").data(airways.features).enter().append("path").attr("d", path).style("fill", "none").style("stroke", "#0080FF");
}

// libs/simulator/map/src/lib/simulator-map.ts
var MapElement = class extends s3 {
  constructor() {
    super();
    this.width = window.innerWidth;
    this.height = window.innerHeight;
    this.flights = [];
    // Properties to track visibility of map elements
    this.showAirways = true;
    this.showAirports = true;
    this.showBeacons = true;
    this.showAirwaypoints = true;
    this.toggleAirways = (0, import_lodash.debounce)(this.toggleAirways, 300, { leading: true, trailing: false });
    this.toggleAirports = (0, import_lodash.debounce)(this.toggleAirports, 300, { leading: true, trailing: false });
    this.toggleBeacons = (0, import_lodash.debounce)(this.toggleBeacons, 300, { leading: true, trailing: false });
  }
  updated(changedProperties) {
    super.updated(changedProperties);
    const center = [35, 40];
    const scale = Math.max(this.width, this.height) * 2.5;
    this.projection = mercator_default().center(center).scale(scale).translate([this.width / 2, this.height / 2]);
    this.path = path_default().projection(this.projection);
    if (changedProperties.has("flights") || changedProperties.has("showAirways") || changedProperties.has("showAirports") || changedProperties.has("showBeacons")) {
      this.renderMap();
    }
  }
  render() {
    return T`
      <!-- Create SVG element for the map -->
      <svg width="${this.width * 10}" height="${this.height * 10}">
        <g></g>
      </svg>
      <!-- Tooltip -->
      <div class="tooltip" style="display: none;"></div>
      <!-- Checkbox lists -->
      <div class="checkbox-container" style="position: absolute; bottom: 10px; right: 10px;">
        <label>
          <input type="checkbox" ?checked="${this.showAirways}" @change="${this.toggleAirways}"> Airways
        </label>
        <label>
          <input type="checkbox" ?checked="${this.showAirports}" @change="${this.toggleAirports}"> Airports
        </label>
        <label>
          <input type="checkbox" ?checked="${this.showBeacons}" @change="${this.toggleBeacons}"> Beacons
        </label>
      </div>
    `;
  }
  firstUpdated() {
    this.svg = select_default2(this.shadowRoot.querySelector("svg"));
    this.g = this.svg.select("g");
    this.g.attr("clip-path", "inset(5%)");
    this.tooltip = this.shadowRoot.querySelector(".tooltip");
    this.zoom = zoom_default2().scaleExtent([1, 10]).on("zoom", (event) => {
      this.g.attr("transform", event.transform);
    });
    this.svg.call(this.zoom);
    this.renderMap();
  }
  renderMap() {
    this.g.selectAll("*").remove();
    renderSectors(this.g, this.geojson, this.path);
    if (this.showAirways) {
      renderAirways(this.g, this.airways, this.path);
      if (this.showAirwaypoints) {
        renderAirwaypoints(this.g, this.airwaypoints, this.path);
      }
    }
    if (this.showAirports) {
      renderAirports(this.g, this.airports, this.path);
    }
    if (this.showBeacons) {
      renderBeacons(this.g, this.beacons, this.path);
    }
    renderFlights(this.g, this.flights, this.projection, this.tooltip);
  }
  toggleAirports(event) {
    const target = event.target;
    if (target) {
      this.showAirports = target.checked;
      this.renderMap();
    }
  }
  toggleAirways(event) {
    const target = event.target;
    if (target) {
      this.showAirways = target.checked;
      this.updateAirwaypointsVisibility();
      this.renderMap();
    }
  }
  toggleBeacons(event) {
    const target = event.target;
    if (target) {
      this.showBeacons = target.checked;
      this.updateAirwaypointsVisibility();
      this.renderMap();
    }
  }
  updateAirwaypointsVisibility() {
    this.showAirwaypoints = this.showAirways && !this.showBeacons;
  }
};
MapElement.styles = i`
    :host {
      display: block;
      overflow: hidden; /* Hide overflow content */
      color: white;
      font-size: 12px; /* Set the font size for the entire component */
    }
   
    .checkbox-input {
      width: 20px; /* Increase checkbox size */
      height: 20px;
      background-color: rgba(0, 0, 0, 0.5);
      border: 1px solid rgba(255, 255, 255, 0.5);
      border-radius: 4px;
    }
    .checkbox-input:checked {
      background-color: white;
    }
    .checkbox-container {
      display: flex;
      flex-direction: row;
      align-items: center;
      background-color: rgba(0, 0, 0, 0.5);
      padding: 5px;
      border-radius: 8px;
    }
    .checkbox-container label {
      display: flex;
      align-items: center;
      margin-right: 10px;
    }
    .flight-card {
      position: absolute;
      color: white;
      cursor: pointer;
      font-size: 0.5rem;
      width: 50px;
      min-width: 50px;
      max-width: 50px;
      height: 50px;
      min-height: 50px;
      max-height: 50px;
      pointer-events: none;
      -webkit-pointer-events: none; /* Safari and Chrome */
      -moz-pointer-events: none; /* Firefox */
      -ms-pointer-events: none; /* Internet Explorer */
    }
    .plane {
      color: white;
      border: 0.2px solid white;
      text-align: center;
      cursor: pointer;
      width: 8px;
      min-width: 8px;
      max-width: 8px;
      height: 8px;
      min-height: 8px;
      max-height: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .tooltip {
      position: absolute;
      color: white;
      z-index: 9999; /* Ensure tooltip appears on top */
      pointer-events: none;
      -webkit-pointer-events: none; /* Safari and Chrome */
      -moz-pointer-events: none; /* Firefox */
      -ms-pointer-events: none; /* Internet Explorer */
      border: 1px solid rgba(248, 241, 241, 0.5);
      background: rgba(0, 0, 0, 0.7);
      border-radius: 3px;
      box-shadow: 0 1px 2px rgba(0,0,0,0.10);
      padding: 8px;
      font-size: 0.5rem;
    }
  `;
__decorateClass([
  n4({ type: Number })
], MapElement.prototype, "width", 2);
__decorateClass([
  n4({ type: Number })
], MapElement.prototype, "height", 2);
__decorateClass([
  n4({ type: Array })
], MapElement.prototype, "flights", 2);
MapElement = __decorateClass([
  t3("ats-simulator-map")
], MapElement);

// apps/simulator/src/geojsons/sectors.json
var sectors_default = {
  type: "FeatureCollection",
  features: [
    {
      type: "Feature",
      properties: {
        kind: "sector",
        name: "FEDE",
        frequency: 129.1
      },
      geometry: {
        coordinates: [
          [
            [
              42.4472,
              28.1667
            ],
            [
              50,
              28.1667
            ],
            [
              50,
              31.8772
            ],
            [
              44.7311,
              37.1736
            ],
            [
              44.6619,
              37.1781
            ],
            [
              44.6667,
              37.1083
            ],
            [
              44.2667,
              36.9417
            ],
            [
              44.1667,
              37.3053
            ],
            [
              43.9553,
              37.2736
            ],
            [
              43.9344,
              37.2403
            ],
            [
              43.6403,
              37.2244
            ],
            [
              43.2167,
              37.35
            ],
            [
              43.1181,
              37.3761
            ],
            [
              42.8236,
              37.3053
            ],
            [
              42.6494,
              37.2486
            ],
            [
              42.3333,
              37.0833
            ],
            [
              42.4472,
              28.1667
            ]
          ]
        ],
        type: "Polygon"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "sector",
        name: "FEDE",
        frequency: 129.1
      },
      geometry: {
        coordinates: [
          [
            [
              50,
              31.8772
            ],
            [
              50,
              38.7514
            ],
            [
              44.5644,
              39.8769
            ],
            [
              44.5969,
              39.8503
            ],
            [
              44.6014,
              39.8253
            ],
            [
              44.45,
              39.3833
            ],
            [
              44.0864,
              39.3233
            ],
            [
              44.2083,
              38.9094
            ],
            [
              44.5042,
              38.3219
            ],
            [
              44.3636,
              38.1269
            ],
            [
              44.2994,
              38.0486
            ],
            [
              44.2361,
              37.8969
            ],
            [
              44.6264,
              37.7083
            ],
            [
              44.6447,
              37.4322
            ],
            [
              44.8233,
              37.2697
            ],
            [
              44.7311,
              37.1736
            ],
            [
              50,
              31.8772
            ]
          ]
        ],
        type: "Polygon"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "sector",
        name: "FEDN",
        frequency: 127.6
      },
      geometry: {
        coordinates: [
          [
            [
              50,
              38.7514
            ],
            [
              50,
              46.5
            ],
            [
              39.6517,
              46.5
            ],
            [
              39.2411,
              43.8958
            ],
            [
              41.6047,
              42.2589
            ],
            [
              41.5094,
              41.5347
            ],
            [
              41.5486,
              41.5167
            ],
            [
              41.655,
              41.4836
            ],
            [
              41.7086,
              41.4972
            ],
            [
              41.7217,
              41.4894
            ],
            [
              41.7161,
              41.475
            ],
            [
              41.7817,
              41.4639
            ],
            [
              41.8233,
              41.4344
            ],
            [
              41.8786,
              41.4608
            ],
            [
              41.9078,
              41.5
            ],
            [
              41.9653,
              41.5244
            ],
            [
              41.9769,
              41.5253
            ],
            [
              41.9925,
              41.5061
            ],
            [
              42.0483,
              41.4942
            ],
            [
              42.0869,
              41.5114
            ],
            [
              42.1836,
              41.5139
            ],
            [
              42.2042,
              41.4931
            ],
            [
              42.2886,
              41.4936
            ],
            [
              42.3336,
              41.4711
            ],
            [
              42.4078,
              41.4661
            ],
            [
              42.4389,
              41.4428
            ],
            [
              42.4708,
              41.4389
            ],
            [
              42.5203,
              41.44
            ],
            [
              42.5103,
              41.4681
            ],
            [
              42.5694,
              41.5103
            ],
            [
              42.5778,
              41.5614
            ],
            [
              42.5961,
              41.5758
            ],
            [
              42.7836,
              41.5781
            ],
            [
              42.8181,
              41.5572
            ],
            [
              42.7969,
              41.5167
            ],
            [
              42.8094,
              41.4925
            ],
            [
              42.8514,
              41.4728
            ],
            [
              42.8711,
              41.4994
            ],
            [
              42.9786,
              41.4278
            ],
            [
              43.1986,
              41.3031
            ],
            [
              43.1253,
              41.2531
            ],
            [
              43.1978,
              41.2469
            ],
            [
              43.2269,
              41.1761
            ],
            [
              43.3739,
              41.2019
            ],
            [
              43.4378,
              41.1794
            ],
            [
              43.4667,
              41.1333
            ],
            [
              43.4494,
              41.0919
            ],
            [
              43.4708,
              41.0594
            ],
            [
              43.4719,
              41.0275
            ],
            [
              43.5994,
              40.9853
            ],
            [
              43.6711,
              40.9328
            ],
            [
              43.6761,
              40.8444
            ],
            [
              43.6847,
              40.84
            ],
            [
              43.7133,
              40.8119
            ],
            [
              43.7486,
              40.7361
            ],
            [
              43.7361,
              40.7078
            ],
            [
              43.7489,
              40.6811
            ],
            [
              43.6869,
              40.5875
            ],
            [
              43.6494,
              40.5653
            ],
            [
              43.6469,
              40.5625
            ],
            [
              43.6469,
              40.5275
            ],
            [
              43.6311,
              40.5364
            ],
            [
              43.6353,
              40.5208
            ],
            [
              43.6239,
              40.5269
            ],
            [
              43.5833,
              40.5061
            ],
            [
              43.5472,
              40.4775
            ],
            [
              43.5561,
              40.4569
            ],
            [
              43.6208,
              40.4178
            ],
            [
              43.6094,
              40.3853
            ],
            [
              43.5925,
              40.3453
            ],
            [
              43.6389,
              40.2711
            ],
            [
              43.6817,
              40.2569
            ],
            [
              43.6819,
              40.2244
            ],
            [
              43.6586,
              40.2208
            ],
            [
              43.6611,
              40.1483
            ],
            [
              43.6644,
              40.1153
            ],
            [
              43.7186,
              40.0794
            ],
            [
              43.7694,
              40.0794
            ],
            [
              43.9053,
              40.0181
            ],
            [
              44.1125,
              40.0306
            ],
            [
              44.1711,
              40.0194
            ],
            [
              44.1978,
              40.0347
            ],
            [
              44.2786,
              40.0453
            ],
            [
              44.2986,
              40.0317
            ],
            [
              44.3394,
              40.0286
            ],
            [
              44.3753,
              40
            ],
            [
              44.4192,
              40
            ],
            [
              44.4886,
              39.9644
            ],
            [
              44.5572,
              39.9036
            ],
            [
              44.5644,
              39.8769
            ],
            [
              50,
              38.7514
            ]
          ]
        ],
        type: "Polygon"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "sector",
        name: "FEDN",
        frequency: 127.6
      },
      geometry: {
        coordinates: [
          [
            [
              41.6047,
              42.2589
            ],
            [
              39.2411,
              43.8958
            ],
            [
              39.6517,
              46.5
            ],
            [
              37.2125,
              46.5
            ],
            [
              36.5,
              42.725
            ],
            [
              36.6167,
              42.7197
            ],
            [
              36.9144,
              42.7086
            ],
            [
              37.1197,
              42.7031
            ],
            [
              37.6667,
              42.6833
            ],
            [
              37.7119,
              42.6819
            ],
            [
              37.8083,
              42.6531
            ],
            [
              39.4028,
              42.1836
            ],
            [
              40.3333,
              41.9
            ],
            [
              40.6561,
              41.7989
            ],
            [
              40.9786,
              41.6972
            ],
            [
              41.2819,
              41.6
            ],
            [
              41.4494,
              41.5486
            ],
            [
              41.5094,
              41.5347
            ],
            [
              41.6047,
              42.2589
            ]
          ]
        ],
        type: "Polygon"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "sector",
        name: "FEDS",
        frequency: 125.2
      },
      geometry: {
        coordinates: [
          [
            [
              29.3483,
              28.1667
            ],
            [
              42.4472,
              28.1667
            ],
            [
              42.3333,
              37.0833
            ],
            [
              42.25,
              37.2667
            ],
            [
              41.7911,
              37.1031
            ],
            [
              41.5,
              37
            ],
            [
              41.2303,
              37.0719
            ],
            [
              41.1319,
              37.0928
            ],
            [
              40.8333,
              37.0333
            ],
            [
              39.3333,
              36.6667
            ],
            [
              39.0281,
              36.7086
            ],
            [
              38.75,
              36.6667
            ],
            [
              38.3667,
              36.9
            ],
            [
              37.9431,
              36.8036
            ],
            [
              37.3828,
              36.6486
            ],
            [
              37.0636,
              36.65
            ],
            [
              36.6667,
              36.8333
            ],
            [
              36.6411,
              36.7844
            ],
            [
              36.5875,
              36.5
            ],
            [
              36.7,
              36.2333
            ],
            [
              36.3667,
              36.1667
            ],
            [
              36.1833,
              35.8667
            ],
            [
              36.0333,
              35.8833
            ],
            [
              35.6667,
              35.9167
            ],
            [
              34.6644,
              35.9194
            ],
            [
              34.1353,
              35.9169
            ],
            [
              34.0167,
              35.9167
            ],
            [
              33.5494,
              35.9153
            ],
            [
              33.4417,
              35.9233
            ],
            [
              33.3167,
              35.93
            ],
            [
              33.2833,
              35.9333
            ],
            [
              33,
              35.9486
            ],
            [
              32.6131,
              35.9703
            ],
            [
              31.9275,
              36.0028
            ],
            [
              31.5736,
              36.0203
            ],
            [
              30.825,
              36.0417
            ],
            [
              30.7036,
              36.0467
            ],
            [
              29.9994,
              36.0819
            ],
            [
              29.8103,
              36.0758
            ],
            [
              29.3483,
              28.1667
            ]
          ]
        ],
        type: "Polygon"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "sector",
        name: "FEDS",
        frequency: 125.2
      },
      geometry: {
        coordinates: [
          [
            [
              21,
              43.3728
            ],
            [
              26.3,
              41.7333
            ],
            [
              26.55,
              41.6333
            ],
            [
              26.6,
              41.3333
            ],
            [
              26.3167,
              41.25
            ],
            [
              26.3211,
              41.1253
            ],
            [
              26.2917,
              41.0667
            ],
            [
              26.3167,
              40.95
            ],
            [
              26.2494,
              40.8819
            ],
            [
              26.1556,
              40.8219
            ],
            [
              26.0858,
              40.7811
            ],
            [
              25.95,
              40.6667
            ],
            [
              25.8833,
              40.6167
            ],
            [
              25.8667,
              40.6167
            ],
            [
              25.8667,
              40.6
            ],
            [
              25.8833,
              40.5833
            ],
            [
              25.8833,
              40.5667
            ],
            [
              25.9167,
              40.5167
            ],
            [
              25.9,
              40.4667
            ],
            [
              25.85,
              40.3667
            ],
            [
              25.8333,
              40.3667
            ],
            [
              25.6667,
              40.3167
            ],
            [
              25.6333,
              40.3
            ],
            [
              25.6167,
              40.25
            ],
            [
              25.6,
              40.1833
            ],
            [
              25.5833,
              40.1667
            ],
            [
              25.6,
              40.1
            ],
            [
              25.6167,
              40.05
            ],
            [
              25.6333,
              39.9833
            ],
            [
              25.6667,
              39.85
            ],
            [
              25.6833,
              39.7333
            ],
            [
              25.7167,
              39.6667
            ],
            [
              25.7167,
              39.5833
            ],
            [
              25.7333,
              39.5333
            ],
            [
              25.75,
              39.5167
            ],
            [
              25.85,
              39.4333
            ],
            [
              25.9667,
              39.3667
            ],
            [
              26.0667,
              39.3667
            ],
            [
              26.1167,
              39.3833
            ],
            [
              26.1833,
              39.4
            ],
            [
              26.2333,
              39.4
            ],
            [
              26.3,
              39.4167
            ],
            [
              26.3667,
              39.4167
            ],
            [
              26.4167,
              39.4
            ],
            [
              26.45,
              39.4
            ],
            [
              26.4994,
              39.3325
            ],
            [
              26.5167,
              39.2833
            ],
            [
              26.55,
              39.25
            ],
            [
              26.6,
              39.2
            ],
            [
              26.6167,
              39.1667
            ],
            [
              26.6833,
              39.1333
            ],
            [
              26.6833,
              39.0667
            ],
            [
              26.6833,
              39.0167
            ],
            [
              26.6833,
              38.9833
            ],
            [
              26.6667,
              38.95
            ],
            [
              26.6333,
              38.9333
            ],
            [
              26.6167,
              38.9
            ],
            [
              26.5667,
              38.8667
            ],
            [
              26.5333,
              38.85
            ],
            [
              26.5,
              38.8
            ],
            [
              26.45,
              38.7667
            ],
            [
              26.3667,
              38.7
            ],
            [
              26.3333,
              38.6667
            ],
            [
              26.3,
              38.6333
            ],
            [
              26.3167,
              38.6
            ],
            [
              26.3,
              38.55
            ],
            [
              26.3,
              38.5167
            ],
            [
              26.3,
              38.4667
            ],
            [
              26.2833,
              38.45
            ],
            [
              26.25,
              38.3833
            ],
            [
              26.2333,
              38.3667
            ],
            [
              26.2167,
              38.3333
            ],
            [
              26.2,
              38.3
            ],
            [
              26.2,
              38.2667
            ],
            [
              26.2,
              38.2
            ],
            [
              26.2,
              38.1667
            ],
            [
              26.2167,
              38.15
            ],
            [
              26.25,
              38.1333
            ],
            [
              26.2833,
              38.1167
            ],
            [
              26.3,
              38.1
            ],
            [
              26.3667,
              38.0833
            ],
            [
              26.4333,
              38.05
            ],
            [
              26.5,
              38.0333
            ],
            [
              26.65,
              37.9833
            ],
            [
              26.7167,
              37.95
            ],
            [
              26.85,
              37.9167
            ],
            [
              27,
              37.85
            ],
            [
              27.0333,
              37.85
            ],
            [
              27.05,
              37.8333
            ],
            [
              27.0667,
              37.8
            ],
            [
              27.1,
              37.7833
            ],
            [
              27.1167,
              37.7833
            ],
            [
              27.1167,
              37.7667
            ],
            [
              27.1167,
              37.7333
            ],
            [
              27.1,
              37.7167
            ],
            [
              27.0667,
              37.7
            ],
            [
              27.0167,
              37.7
            ],
            [
              27,
              37.6833
            ],
            [
              26.9833,
              37.6833
            ],
            [
              26.9833,
              37.6667
            ],
            [
              26.9667,
              37.6333
            ],
            [
              26.9833,
              37.6
            ],
            [
              26.9986,
              37.5853
            ],
            [
              21,
              37.5853
            ],
            [
              21,
              43.3728
            ]
          ]
        ],
        type: "Polygon"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "sector",
        name: "FEDS",
        frequency: 125.2
      },
      geometry: {
        coordinates: [
          [
            [
              21,
              37.5853
            ],
            [
              26.9986,
              37.5853
            ],
            [
              27.0167,
              37.55
            ],
            [
              27.0333,
              37.5333
            ],
            [
              27.0667,
              37.45
            ],
            [
              27.1167,
              37.35
            ],
            [
              27.1333,
              37.3167
            ],
            [
              27.1667,
              37.2833
            ],
            [
              27.1667,
              37.2333
            ],
            [
              27.1667,
              37.15
            ],
            [
              27.15,
              37.1167
            ],
            [
              27.15,
              37.0833
            ],
            [
              27.15,
              37.05
            ],
            [
              27.1667,
              37.0333
            ],
            [
              27.1667,
              37.0167
            ],
            [
              27.1833,
              36.9833
            ],
            [
              27.1833,
              36.9667
            ],
            [
              27.2,
              36.95
            ],
            [
              27.2333,
              36.95
            ],
            [
              27.2667,
              36.9333
            ],
            [
              27.3,
              36.9333
            ],
            [
              27.3333,
              36.9167
            ],
            [
              27.4,
              36.9167
            ],
            [
              27.4,
              36.8833
            ],
            [
              27.3667,
              36.85
            ],
            [
              27.3667,
              36.8333
            ],
            [
              27.3,
              36.7667
            ],
            [
              27.2833,
              36.75
            ],
            [
              27.2833,
              36.7167
            ],
            [
              27.2667,
              36.6833
            ],
            [
              27.2667,
              36.65
            ],
            [
              27.3333,
              36.6167
            ],
            [
              27.4167,
              36.5667
            ],
            [
              27.4833,
              36.5167
            ],
            [
              27.5167,
              36.5167
            ],
            [
              27.5833,
              36.5667
            ],
            [
              27.7,
              36.6167
            ],
            [
              27.7833,
              36.6667
            ],
            [
              27.8333,
              36.7
            ],
            [
              27.85,
              36.7
            ],
            [
              27.85,
              36.6833
            ],
            [
              27.8667,
              36.6667
            ],
            [
              27.9167,
              36.6
            ],
            [
              27.9667,
              36.55
            ],
            [
              28,
              36.5
            ],
            [
              28.0333,
              36.4833
            ],
            [
              28.0833,
              36.4833
            ],
            [
              28.2,
              36.5167
            ],
            [
              28.25,
              36.5167
            ],
            [
              28.2833,
              36.5333
            ],
            [
              28.3833,
              36.5333
            ],
            [
              28.4833,
              36.55
            ],
            [
              28.45,
              36.5
            ],
            [
              28.5167,
              36.4667
            ],
            [
              28.6,
              36.45
            ],
            [
              28.7833,
              36.3667
            ],
            [
              28.95,
              36.3
            ],
            [
              29.0333,
              36.25
            ],
            [
              29.2,
              36.1667
            ],
            [
              29.25,
              36.1333
            ],
            [
              29.3167,
              36.1333
            ],
            [
              29.35,
              36.15
            ],
            [
              29.4,
              36.1667
            ],
            [
              29.5,
              36.1667
            ],
            [
              29.5667,
              36.1667
            ],
            [
              29.6,
              36.15
            ],
            [
              29.6167,
              36.1333
            ],
            [
              29.65,
              36.1167
            ],
            [
              29.6667,
              36.1
            ],
            [
              29.6833,
              36.0833
            ],
            [
              29.7083,
              36.0833
            ],
            [
              29.8103,
              36.0758
            ],
            [
              29.3483,
              28.1667
            ],
            [
              23,
              28.1667
            ],
            [
              23,
              30.5083
            ],
            [
              21,
              30.5083
            ],
            [
              21,
              37.5853
            ]
          ]
        ],
        type: "Polygon"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "sector",
        name: "FEDW",
        frequency: 134.675
      },
      geometry: {
        coordinates: [
          [
            [
              30.3761,
              46.5
            ],
            [
              21,
              46.5
            ],
            [
              21,
              43.3728
            ],
            [
              26.3,
              41.7333
            ],
            [
              26.5681,
              41.8717
            ],
            [
              26.6167,
              41.9833
            ],
            [
              26.7661,
              41.9711
            ],
            [
              27.0083,
              42.0406
            ],
            [
              27.1333,
              42.0667
            ],
            [
              27.2161,
              42.0656
            ],
            [
              27.2161,
              42.0653
            ],
            [
              27.2833,
              42.0667
            ],
            [
              27.4181,
              41.9886
            ],
            [
              27.5694,
              41.9019
            ],
            [
              27.7769,
              41.9667
            ],
            [
              27.8511,
              41.9967
            ],
            [
              28.0011,
              41.9819
            ],
            [
              28.3167,
              41.9833
            ],
            [
              28.4833,
              42.0167
            ],
            [
              28.7011,
              42.0578
            ],
            [
              28.7661,
              42.0819
            ],
            [
              29,
              42.1167
            ],
            [
              29.1428,
              42.1703
            ],
            [
              29.265,
              42.2097
            ],
            [
              29.3978,
              42.275
            ],
            [
              29.5411,
              42.3319
            ],
            [
              29.6242,
              42.3636
            ],
            [
              29.8703,
              42.4614
            ],
            [
              30.0167,
              42.5167
            ],
            [
              30.0728,
              42.5403
            ],
            [
              30.2644,
              42.6103
            ],
            [
              30.5961,
              42.7386
            ],
            [
              30.75,
              42.8
            ],
            [
              30.3761,
              46.5
            ]
          ]
        ],
        type: "Polygon"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "sector",
        name: "FEDW",
        frequency: 134.675
      },
      geometry: {
        coordinates: [
          [
            [
              37.2125,
              46.5
            ],
            [
              30.3761,
              46.5
            ],
            [
              30.75,
              42.8
            ],
            [
              31,
              42.8
            ],
            [
              31.9478,
              42.7986
            ],
            [
              33.1811,
              42.7986
            ],
            [
              33.8944,
              42.7853
            ],
            [
              34.0878,
              42.7803
            ],
            [
              35,
              42.75
            ],
            [
              36.2661,
              42.7319
            ],
            [
              36.5,
              42.725
            ],
            [
              37.2125,
              46.5
            ]
          ]
        ],
        type: "Polygon"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "sector",
        name: "OBS",
        frequency: 999.9
      },
      geometry: {
        coordinates: [
          [
            [
              21,
              30.5083
            ],
            [
              23,
              30.5083
            ],
            [
              23,
              28.1667
            ],
            [
              21,
              28.1667
            ],
            [
              21,
              30.5083
            ]
          ]
        ],
        type: "Polygon"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "sector",
        name: "1011L",
        frequency: 128.8
      },
      geometry: {
        coordinates: [
          [
            [
              33.355,
              41.5717
            ],
            [
              35.6961,
              40.9011
            ],
            [
              34.7794,
              39.1414
            ],
            [
              34.0978,
              39.4683
            ],
            [
              33.7358,
              40.8997
            ],
            [
              32.2883,
              40.8125
            ],
            [
              31.8928,
              40.9389
            ],
            [
              31.6,
              41.1197
            ],
            [
              31.8292,
              41.2714
            ],
            [
              33.355,
              41.5717
            ]
          ]
        ],
        type: "Polygon"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "sector",
        name: "1011L",
        frequency: 128.8
      },
      geometry: {
        coordinates: [
          [
            [
              34.0978,
              39.4683
            ],
            [
              34.7794,
              39.1414
            ],
            [
              33.3058,
              38.9089
            ],
            [
              32.4378,
              39.4239
            ],
            [
              32.15,
              39.5619
            ],
            [
              31.8928,
              40.9389
            ],
            [
              32.2883,
              40.8125
            ],
            [
              32.5667,
              39.615
            ],
            [
              34.0978,
              39.4683
            ]
          ]
        ],
        type: "Polygon"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "sector",
        name: "1011L",
        frequency: 128.8
      },
      geometry: {
        coordinates: [
          [
            [
              32.2883,
              40.8125
            ],
            [
              32.5667,
              39.615
            ],
            [
              34.0978,
              39.4683
            ],
            [
              33.7358,
              40.8997
            ],
            [
              32.2883,
              40.8125
            ]
          ]
        ],
        type: "Polygon"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "sector",
        name: "1617L",
        frequency: 132.9
      },
      geometry: {
        coordinates: [
          [
            [
              38.0136,
              38.2881
            ],
            [
              39.7739,
              39.2897
            ],
            [
              42.1908,
              38.9475
            ],
            [
              43.8067,
              38.3514
            ],
            [
              44.3636,
              38.1269
            ],
            [
              44.2994,
              38.0486
            ],
            [
              44.2361,
              37.8969
            ],
            [
              44.6264,
              37.7083
            ],
            [
              44.6447,
              37.4322
            ],
            [
              44.8233,
              37.2697
            ],
            [
              44.7311,
              37.1736
            ],
            [
              44.6619,
              37.1781
            ],
            [
              44.6667,
              37.1083
            ],
            [
              44.2667,
              36.9417
            ],
            [
              44.1667,
              37.3053
            ],
            [
              43.9553,
              37.2736
            ],
            [
              43.9344,
              37.2403
            ],
            [
              43.6403,
              37.2244
            ],
            [
              43.2167,
              37.35
            ],
            [
              43.1181,
              37.3761
            ],
            [
              42.8236,
              37.3053
            ],
            [
              42.6494,
              37.2486
            ],
            [
              42.3333,
              37.0833
            ],
            [
              42.25,
              37.2667
            ],
            [
              41.7911,
              37.1031
            ],
            [
              41.5,
              37
            ],
            [
              41.2303,
              37.0719
            ],
            [
              41.1319,
              37.0928
            ],
            [
              40.8333,
              37.0333
            ],
            [
              39.3333,
              36.6667
            ],
            [
              39.0281,
              36.7086
            ],
            [
              38.75,
              36.6667
            ],
            [
              38.3667,
              36.9
            ],
            [
              37.9431,
              36.8036
            ],
            [
              38.0136,
              38.2881
            ]
          ]
        ],
        type: "Polygon"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "sector",
        name: "1819L",
        frequency: 129.3
      },
      geometry: {
        coordinates: [
          [
            [
              37.7119,
              42.6819
            ],
            [
              37.8083,
              42.6531
            ],
            [
              39.4028,
              42.1836
            ],
            [
              40.3333,
              41.9
            ],
            [
              40.6561,
              41.7989
            ],
            [
              40.9786,
              41.6972
            ],
            [
              41.2819,
              41.6
            ],
            [
              41.4494,
              41.5486
            ],
            [
              41.5094,
              41.5347
            ],
            [
              41.5486,
              41.5167
            ],
            [
              41.655,
              41.4836
            ],
            [
              41.7086,
              41.4972
            ],
            [
              41.7217,
              41.4894
            ],
            [
              41.7161,
              41.475
            ],
            [
              41.7817,
              41.4639
            ],
            [
              41.8233,
              41.4344
            ],
            [
              41.8786,
              41.4608
            ],
            [
              41.9078,
              41.5
            ],
            [
              41.9653,
              41.5244
            ],
            [
              41.9769,
              41.5253
            ],
            [
              41.9925,
              41.5061
            ],
            [
              42.0483,
              41.4942
            ],
            [
              42.0869,
              41.5114
            ],
            [
              42.1836,
              41.5139
            ],
            [
              42.2042,
              41.4931
            ],
            [
              42.2886,
              41.4936
            ],
            [
              42.3336,
              41.4711
            ],
            [
              42.4078,
              41.4661
            ],
            [
              42.4389,
              41.4428
            ],
            [
              42.4708,
              41.4389
            ],
            [
              42.5203,
              41.44
            ],
            [
              42.5103,
              41.4681
            ],
            [
              42.5694,
              41.5103
            ],
            [
              42.5778,
              41.5614
            ],
            [
              42.5961,
              41.5758
            ],
            [
              42.7836,
              41.5781
            ],
            [
              42.8181,
              41.5572
            ],
            [
              42.7969,
              41.5167
            ],
            [
              42.8094,
              41.4925
            ],
            [
              42.8514,
              41.4728
            ],
            [
              42.8711,
              41.4994
            ],
            [
              42.9786,
              41.4278
            ],
            [
              43.1986,
              41.3031
            ],
            [
              43.1253,
              41.2531
            ],
            [
              43.1978,
              41.2469
            ],
            [
              43.2269,
              41.1761
            ],
            [
              43.3739,
              41.2019
            ],
            [
              43.4378,
              41.1794
            ],
            [
              43.4667,
              41.1333
            ],
            [
              43.4494,
              41.0919
            ],
            [
              43.4708,
              41.0594
            ],
            [
              43.4719,
              41.0275
            ],
            [
              43.5994,
              40.9853
            ],
            [
              43.6711,
              40.9328
            ],
            [
              43.6761,
              40.8444
            ],
            [
              43.6847,
              40.84
            ],
            [
              43.7133,
              40.8119
            ],
            [
              43.7486,
              40.7361
            ],
            [
              43.7361,
              40.7078
            ],
            [
              43.7489,
              40.6811
            ],
            [
              43.6869,
              40.5875
            ],
            [
              43.6494,
              40.5653
            ],
            [
              43.6469,
              40.5625
            ],
            [
              43.6469,
              40.5275
            ],
            [
              43.6311,
              40.5364
            ],
            [
              43.6353,
              40.5208
            ],
            [
              43.6239,
              40.5269
            ],
            [
              43.5833,
              40.5061
            ],
            [
              43.5472,
              40.4775
            ],
            [
              43.5561,
              40.4569
            ],
            [
              43.6208,
              40.4178
            ],
            [
              43.6094,
              40.3853
            ],
            [
              43.5925,
              40.3453
            ],
            [
              43.6389,
              40.2711
            ],
            [
              43.6817,
              40.2569
            ],
            [
              43.6819,
              40.2244
            ],
            [
              43.6586,
              40.2208
            ],
            [
              43.6611,
              40.1483
            ],
            [
              43.6644,
              40.1153
            ],
            [
              43.7186,
              40.0794
            ],
            [
              43.7694,
              40.0794
            ],
            [
              43.9053,
              40.0181
            ],
            [
              44.1125,
              40.0306
            ],
            [
              44.1711,
              40.0194
            ],
            [
              44.1978,
              40.0347
            ],
            [
              44.2786,
              40.0453
            ],
            [
              44.2986,
              40.0317
            ],
            [
              44.3394,
              40.0286
            ],
            [
              44.3753,
              40
            ],
            [
              44.4192,
              40
            ],
            [
              44.4886,
              39.9644
            ],
            [
              44.5572,
              39.9036
            ],
            [
              44.5644,
              39.8769
            ],
            [
              42.1797,
              39.9433
            ],
            [
              40.9558,
              40.2844
            ],
            [
              37.5861,
              41.6736
            ],
            [
              37.7119,
              42.6819
            ]
          ]
        ],
        type: "Polygon"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "sector",
        name: "1819L",
        frequency: 129.3
      },
      geometry: {
        coordinates: [
          [
            [
              44.5969,
              39.8503
            ],
            [
              44.6014,
              39.8253
            ],
            [
              44.45,
              39.3833
            ],
            [
              44.0864,
              39.3233
            ],
            [
              44.2083,
              38.9094
            ],
            [
              44.5042,
              38.3219
            ],
            [
              44.3636,
              38.1269
            ],
            [
              43.8067,
              38.3514
            ],
            [
              42.1908,
              38.9475
            ],
            [
              39.7739,
              39.2897
            ],
            [
              37.3286,
              40.49
            ],
            [
              37.5861,
              41.6736
            ],
            [
              40.9558,
              40.2844
            ],
            [
              42.1797,
              39.9433
            ],
            [
              44.5644,
              39.8769
            ],
            [
              44.5969,
              39.8503
            ]
          ]
        ],
        type: "Polygon"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "sector",
        name: "ANK",
        frequency: 119.6
      },
      geometry: {
        coordinates: [
          [
            [
              29,
              42.1167
            ],
            [
              29.1428,
              42.1703
            ],
            [
              29.265,
              42.2097
            ],
            [
              29.3978,
              42.275
            ],
            [
              29.5411,
              42.3319
            ],
            [
              29.6242,
              42.3636
            ],
            [
              29.8703,
              42.4614
            ],
            [
              30.0167,
              42.5167
            ],
            [
              30.0728,
              42.5403
            ],
            [
              30.2644,
              42.6103
            ],
            [
              30.5961,
              42.7386
            ],
            [
              30.75,
              42.8
            ],
            [
              31,
              42.8
            ],
            [
              31.9478,
              42.7986
            ],
            [
              33.1811,
              42.7986
            ],
            [
              33.8944,
              42.7853
            ],
            [
              33.355,
              41.5717
            ],
            [
              31.8292,
              41.2714
            ],
            [
              31.6,
              41.1197
            ],
            [
              31.3186,
              41.3156
            ],
            [
              30.6153,
              41.3792
            ],
            [
              29.3011,
              41.2561
            ],
            [
              29.1814,
              41.3011
            ],
            [
              29,
              42.1167
            ]
          ]
        ],
        type: "Polygon"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "sector",
        name: "ANK",
        frequency: 119.6
      },
      geometry: {
        coordinates: [
          [
            [
              33.8944,
              42.7853
            ],
            [
              34.0878,
              42.7803
            ],
            [
              35,
              42.75
            ],
            [
              36.2661,
              42.7319
            ],
            [
              36.5,
              42.725
            ],
            [
              36.6167,
              42.7197
            ],
            [
              36.9144,
              42.7086
            ],
            [
              37.1197,
              42.7031
            ],
            [
              37.6667,
              42.6833
            ],
            [
              37.7119,
              42.6819
            ],
            [
              37.5861,
              41.6736
            ],
            [
              37.3286,
              40.49
            ],
            [
              35.6961,
              40.9011
            ],
            [
              33.355,
              41.5717
            ],
            [
              33.8944,
              42.7853
            ]
          ]
        ],
        type: "Polygon"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "sector",
        name: "ANK",
        frequency: 119.6
      },
      geometry: {
        coordinates: [
          [
            [
              35.6961,
              40.9011
            ],
            [
              37.3286,
              40.49
            ],
            [
              39.7739,
              39.2897
            ],
            [
              38.0136,
              38.2881
            ],
            [
              36.0811,
              39.0275
            ],
            [
              34.7794,
              39.1414
            ],
            [
              35.6961,
              40.9011
            ]
          ]
        ],
        type: "Polygon"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "sector",
        name: "ANK",
        frequency: 119.6
      },
      geometry: {
        coordinates: [
          [
            [
              33.3058,
              38.9089
            ],
            [
              34.7794,
              39.1414
            ],
            [
              36.0811,
              39.0275
            ],
            [
              38.0136,
              38.2881
            ],
            [
              37.9431,
              36.8036
            ],
            [
              37.3828,
              36.6486
            ],
            [
              37.0636,
              36.65
            ],
            [
              36.6667,
              36.8333
            ],
            [
              36.6411,
              36.7844
            ],
            [
              36.5875,
              36.5
            ],
            [
              36.7,
              36.2333
            ],
            [
              36.3667,
              36.1667
            ],
            [
              36.1833,
              35.8667
            ],
            [
              36.0333,
              35.8833
            ],
            [
              35.6667,
              35.9167
            ],
            [
              34.6644,
              35.9194
            ],
            [
              34.5411,
              36.5219
            ],
            [
              34.5203,
              36.6253
            ],
            [
              34.4728,
              36.64
            ],
            [
              34.2486,
              36.8919
            ],
            [
              33.3989,
              37.8617
            ],
            [
              33.3058,
              38.9089
            ]
          ]
        ],
        type: "Polygon"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "sector",
        name: "IST",
        frequency: 122.675
      },
      geometry: {
        coordinates: [
          [
            [
              28.2717,
              40.6994
            ],
            [
              27.6822,
              40.7683
            ],
            [
              27.0458,
              40.7028
            ],
            [
              26.1556,
              40.8219
            ],
            [
              26.2494,
              40.8819
            ],
            [
              26.3167,
              40.95
            ],
            [
              26.2917,
              41.0667
            ],
            [
              26.3211,
              41.1253
            ],
            [
              26.3167,
              41.25
            ],
            [
              26.6,
              41.3333
            ],
            [
              26.55,
              41.6333
            ],
            [
              26.3,
              41.7333
            ],
            [
              26.5681,
              41.8717
            ],
            [
              26.6167,
              41.9833
            ],
            [
              26.7661,
              41.9711
            ],
            [
              27.0083,
              42.0406
            ],
            [
              27.1333,
              42.0667
            ],
            [
              27.2161,
              42.0656
            ],
            [
              27.2161,
              42.0653
            ],
            [
              27.2833,
              42.0667
            ],
            [
              27.4181,
              41.9886
            ],
            [
              27.5694,
              41.9019
            ],
            [
              27.7769,
              41.9667
            ],
            [
              27.8511,
              41.9967
            ],
            [
              28.0011,
              41.9819
            ],
            [
              28.3167,
              41.9833
            ],
            [
              28.4833,
              42.0167
            ],
            [
              28.7011,
              42.0578
            ],
            [
              28.7661,
              42.0819
            ],
            [
              29,
              42.1167
            ],
            [
              29.1814,
              41.3011
            ],
            [
              29.3119,
              40.6594
            ],
            [
              29.3478,
              40.6308
            ],
            [
              28.2889,
              40.6628
            ],
            [
              28.2717,
              40.6994
            ]
          ]
        ],
        type: "Polygon"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "sector",
        name: "IST",
        frequency: 122.675
      },
      geometry: {
        coordinates: [
          [
            [
              27.0458,
              40.7028
            ],
            [
              27.6822,
              40.7683
            ],
            [
              28.2717,
              40.6994
            ],
            [
              28.2889,
              40.6628
            ],
            [
              28.9475,
              39.1436
            ],
            [
              27.5625,
              38.98
            ],
            [
              26.6833,
              39.0167
            ],
            [
              26.6833,
              39.0667
            ],
            [
              26.6833,
              39.1333
            ],
            [
              26.6167,
              39.1667
            ],
            [
              26.6,
              39.2
            ],
            [
              26.55,
              39.25
            ],
            [
              26.5167,
              39.2833
            ],
            [
              26.4994,
              39.3325
            ],
            [
              26.45,
              39.4
            ],
            [
              26.4167,
              39.4
            ],
            [
              26.3667,
              39.4167
            ],
            [
              26.3,
              39.4167
            ],
            [
              26.2333,
              39.4
            ],
            [
              26.1833,
              39.4
            ],
            [
              26.1167,
              39.3833
            ],
            [
              26.0667,
              39.3667
            ],
            [
              25.9667,
              39.3667
            ],
            [
              25.85,
              39.4333
            ],
            [
              25.75,
              39.5167
            ],
            [
              25.7333,
              39.5333
            ],
            [
              25.7167,
              39.5833
            ],
            [
              25.7167,
              39.6667
            ],
            [
              25.6833,
              39.7333
            ],
            [
              25.6667,
              39.85
            ],
            [
              25.6333,
              39.9833
            ],
            [
              25.6167,
              40.05
            ],
            [
              25.6,
              40.1
            ],
            [
              25.5833,
              40.1667
            ],
            [
              25.6,
              40.1833
            ],
            [
              25.6167,
              40.25
            ],
            [
              25.6333,
              40.3
            ],
            [
              25.6667,
              40.3167
            ],
            [
              25.8333,
              40.3667
            ],
            [
              25.85,
              40.3667
            ],
            [
              25.9,
              40.4667
            ],
            [
              25.9167,
              40.5167
            ],
            [
              25.8833,
              40.5667
            ],
            [
              25.8833,
              40.5833
            ],
            [
              25.8667,
              40.6
            ],
            [
              25.8667,
              40.6167
            ],
            [
              25.8833,
              40.6167
            ],
            [
              25.95,
              40.6667
            ],
            [
              26.0858,
              40.7811
            ],
            [
              26.1556,
              40.8219
            ],
            [
              27.0458,
              40.7028
            ]
          ]
        ],
        type: "Polygon"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "sector",
        name: "IST",
        frequency: 122.675
      },
      geometry: {
        coordinates: [
          [
            [
              30.1267,
              40.0058
            ],
            [
              29.3478,
              40.6308
            ],
            [
              29.3119,
              40.6594
            ],
            [
              29.1814,
              41.3011
            ],
            [
              29.3011,
              41.2561
            ],
            [
              30.6153,
              41.3792
            ],
            [
              31.3186,
              41.3156
            ],
            [
              31.6,
              41.1197
            ],
            [
              31.8928,
              40.9389
            ],
            [
              32.15,
              39.5619
            ],
            [
              30.8397,
              39.41
            ],
            [
              30.5617,
              39.3431
            ],
            [
              30.1267,
              40.0058
            ]
          ]
        ],
        type: "Polygon"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "sector",
        name: "IST",
        frequency: 122.675
      },
      geometry: {
        coordinates: [
          [
            [
              30.1639,
              39.1986
            ],
            [
              29.4292,
              39.0786
            ],
            [
              28.9475,
              39.1436
            ],
            [
              28.2889,
              40.6628
            ],
            [
              29.3478,
              40.6308
            ],
            [
              30.1267,
              40.0058
            ],
            [
              30.5617,
              39.3431
            ],
            [
              30.1639,
              39.1986
            ]
          ]
        ],
        type: "Polygon"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "sector",
        name: "IZAYT",
        frequency: 134.2
      },
      geometry: {
        coordinates: [
          [
            [
              27.5625,
              38.98
            ],
            [
              28.43,
              37.6603
            ],
            [
              29.7522,
              36.8236
            ],
            [
              29.7611,
              36.7108
            ],
            [
              29.8103,
              36.0758
            ],
            [
              29.7083,
              36.0833
            ],
            [
              29.6833,
              36.0833
            ],
            [
              29.6667,
              36.1
            ],
            [
              29.65,
              36.1167
            ],
            [
              29.6167,
              36.1333
            ],
            [
              29.6,
              36.15
            ],
            [
              29.5667,
              36.1667
            ],
            [
              29.5,
              36.1667
            ],
            [
              29.4,
              36.1667
            ],
            [
              29.35,
              36.15
            ],
            [
              29.3167,
              36.1333
            ],
            [
              29.25,
              36.1333
            ],
            [
              29.2,
              36.1667
            ],
            [
              29.0333,
              36.25
            ],
            [
              28.95,
              36.3
            ],
            [
              28.7833,
              36.3667
            ],
            [
              28.6,
              36.45
            ],
            [
              28.5167,
              36.4667
            ],
            [
              28.45,
              36.5
            ],
            [
              28.4833,
              36.55
            ],
            [
              28.3833,
              36.5333
            ],
            [
              28.2833,
              36.5333
            ],
            [
              28.25,
              36.5167
            ],
            [
              28.2,
              36.5167
            ],
            [
              28.0833,
              36.4833
            ],
            [
              28.0333,
              36.4833
            ],
            [
              28,
              36.5
            ],
            [
              27.9667,
              36.55
            ],
            [
              27.9167,
              36.6
            ],
            [
              27.8667,
              36.6667
            ],
            [
              27.85,
              36.6833
            ],
            [
              27.85,
              36.7
            ],
            [
              27.8333,
              36.7
            ],
            [
              27.7833,
              36.6667
            ],
            [
              27.7,
              36.6167
            ],
            [
              27.5833,
              36.5667
            ],
            [
              27.5167,
              36.5167
            ],
            [
              27.4833,
              36.5167
            ],
            [
              27.4167,
              36.5667
            ],
            [
              27.3333,
              36.6167
            ],
            [
              27.2667,
              36.65
            ],
            [
              27.2667,
              36.6833
            ],
            [
              27.2833,
              36.7167
            ],
            [
              27.2833,
              36.75
            ],
            [
              27.3,
              36.7667
            ],
            [
              27.3667,
              36.8333
            ],
            [
              27.3667,
              36.85
            ],
            [
              27.4,
              36.8833
            ],
            [
              27.4,
              36.9167
            ],
            [
              27.3333,
              36.9167
            ],
            [
              27.3,
              36.9333
            ],
            [
              27.2667,
              36.9333
            ],
            [
              27.2333,
              36.95
            ],
            [
              27.2,
              36.95
            ],
            [
              27.1833,
              36.9667
            ],
            [
              27.1833,
              36.9833
            ],
            [
              27.1667,
              37.0167
            ],
            [
              27.1667,
              37.0333
            ],
            [
              27.15,
              37.05
            ],
            [
              27.15,
              37.0833
            ],
            [
              27.15,
              37.1167
            ],
            [
              27.1667,
              37.15
            ],
            [
              27.1667,
              37.2333
            ],
            [
              27.1667,
              37.2833
            ],
            [
              27.1333,
              37.3167
            ],
            [
              27.1167,
              37.35
            ],
            [
              27.0667,
              37.45
            ],
            [
              27.0333,
              37.5333
            ],
            [
              27.0167,
              37.55
            ],
            [
              26.9986,
              37.5853
            ],
            [
              26.9833,
              37.6
            ],
            [
              26.9667,
              37.6333
            ],
            [
              26.9833,
              37.6667
            ],
            [
              26.9833,
              37.6833
            ],
            [
              27,
              37.6833
            ],
            [
              27.0167,
              37.7
            ],
            [
              27.0667,
              37.7
            ],
            [
              27.1,
              37.7167
            ],
            [
              27.1167,
              37.7333
            ],
            [
              27.1167,
              37.7667
            ],
            [
              27.1167,
              37.7833
            ],
            [
              27.1,
              37.7833
            ],
            [
              27.0667,
              37.8
            ],
            [
              27.05,
              37.8333
            ],
            [
              27.0333,
              37.85
            ],
            [
              27,
              37.85
            ],
            [
              26.85,
              37.9167
            ],
            [
              26.7167,
              37.95
            ],
            [
              26.65,
              37.9833
            ],
            [
              26.5,
              38.0333
            ],
            [
              26.4333,
              38.05
            ],
            [
              26.3667,
              38.0833
            ],
            [
              26.3,
              38.1
            ],
            [
              26.2833,
              38.1167
            ],
            [
              26.25,
              38.1333
            ],
            [
              26.2167,
              38.15
            ],
            [
              26.2,
              38.1667
            ],
            [
              26.2,
              38.2
            ],
            [
              26.2,
              38.2667
            ],
            [
              26.2,
              38.3
            ],
            [
              26.2167,
              38.3333
            ],
            [
              26.2333,
              38.3667
            ],
            [
              26.25,
              38.3833
            ],
            [
              26.2833,
              38.45
            ],
            [
              26.3,
              38.4667
            ],
            [
              26.3,
              38.5167
            ],
            [
              26.3,
              38.55
            ],
            [
              26.3167,
              38.6
            ],
            [
              26.3,
              38.6333
            ],
            [
              26.3333,
              38.6667
            ],
            [
              26.3667,
              38.7
            ],
            [
              26.45,
              38.7667
            ],
            [
              26.5,
              38.8
            ],
            [
              26.5333,
              38.85
            ],
            [
              26.5667,
              38.8667
            ],
            [
              26.6167,
              38.9
            ],
            [
              26.6333,
              38.9333
            ],
            [
              26.6667,
              38.95
            ],
            [
              26.6833,
              38.9833
            ],
            [
              26.6833,
              39.0167
            ],
            [
              27.5625,
              38.98
            ]
          ]
        ],
        type: "Polygon"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "sector",
        name: "IZAYT",
        frequency: 134.2
      },
      geometry: {
        coordinates: [
          [
            [
              28.9475,
              39.1436
            ],
            [
              29.4292,
              39.0786
            ],
            [
              29.6572,
              38.4839
            ],
            [
              30.0544,
              38.1125
            ],
            [
              30.0536,
              38.1003
            ],
            [
              29.8847,
              37.1453
            ],
            [
              29.7522,
              36.8236
            ],
            [
              28.43,
              37.6603
            ],
            [
              27.5625,
              38.98
            ],
            [
              28.9475,
              39.1436
            ]
          ]
        ],
        type: "Polygon"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "sector",
        name: "IZAYT",
        frequency: 134.2
      },
      geometry: {
        coordinates: [
          [
            [
              31.5442,
              36.8844
            ],
            [
              31.5736,
              36.0203
            ],
            [
              30.825,
              36.0417
            ],
            [
              30.7036,
              36.0467
            ],
            [
              29.9994,
              36.0819
            ],
            [
              29.8103,
              36.0758
            ],
            [
              29.7611,
              36.7108
            ],
            [
              29.7522,
              36.8236
            ],
            [
              29.8847,
              37.1453
            ],
            [
              30.0536,
              38.1003
            ],
            [
              30.0544,
              38.1125
            ],
            [
              29.6572,
              38.4839
            ],
            [
              29.4292,
              39.0786
            ],
            [
              30.1639,
              39.1986
            ],
            [
              30.5617,
              39.3431
            ],
            [
              30.8397,
              39.41
            ],
            [
              30.9758,
              39.2064
            ],
            [
              31.4644,
              37.4761
            ],
            [
              31.5442,
              36.8844
            ]
          ]
        ],
        type: "Polygon"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "sector",
        name: "IZAYT",
        frequency: 134.2
      },
      geometry: {
        coordinates: [
          [
            [
              32.15,
              39.5619
            ],
            [
              32.4378,
              39.4239
            ],
            [
              33.3058,
              38.9089
            ],
            [
              33.3989,
              37.8617
            ],
            [
              34.2486,
              36.8919
            ],
            [
              34.4728,
              36.64
            ],
            [
              34.5203,
              36.6253
            ],
            [
              34.5411,
              36.5219
            ],
            [
              34.6644,
              35.9194
            ],
            [
              34.1353,
              35.9169
            ],
            [
              34.0167,
              35.9167
            ],
            [
              33.5494,
              35.9153
            ],
            [
              33.4417,
              35.9233
            ],
            [
              33.3167,
              35.93
            ],
            [
              33.2833,
              35.9333
            ],
            [
              33,
              35.9486
            ],
            [
              32.6131,
              35.9703
            ],
            [
              31.9275,
              36.0028
            ],
            [
              31.5736,
              36.0203
            ],
            [
              31.5442,
              36.8844
            ],
            [
              31.4644,
              37.4761
            ],
            [
              30.9758,
              39.2064
            ],
            [
              30.8397,
              39.41
            ],
            [
              32.15,
              39.5619
            ]
          ]
        ],
        type: "Polygon"
      }
    }
  ]
};

// apps/simulator/src/geojsons/beacons.json
var beacons_default = {
  type: "FeatureCollection",
  features: [
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AA1AA"
      },
      geometry: {
        coordinates: [
          36.65,
          42.4611
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AA2AA"
      },
      geometry: {
        coordinates: [
          37.3856,
          42.3356
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AA3AA"
      },
      geometry: {
        coordinates: [
          32.1775,
          39.4633
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AA4AA"
      },
      geometry: {
        coordinates: [
          31.3656,
          38.2031
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ABACO"
      },
      geometry: {
        coordinates: [
          28.7547,
          40.9806
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ABBAS"
      },
      geometry: {
        coordinates: [
          37.725,
          33.4333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ABDIK"
      },
      geometry: {
        coordinates: [
          41.9553,
          37.6883
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ABELA"
      },
      geometry: {
        coordinates: [
          42.6003,
          44.1914
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ABILO"
      },
      geometry: {
        coordinates: [
          30,
          34.3233
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ABISI"
      },
      geometry: {
        coordinates: [
          31.9525,
          40.3628
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ABKAL"
      },
      geometry: {
        coordinates: [
          41.5319,
          38.0194
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ABKEV"
      },
      geometry: {
        coordinates: [
          32.0483,
          42.5839
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ABLON"
      },
      geometry: {
        coordinates: [
          23.7356,
          38.1694
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ABNIN"
      },
      geometry: {
        coordinates: [
          28.2483,
          40.7819
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ABORA"
      },
      geometry: {
        coordinates: [
          26.3408,
          44.5522
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ABRAN"
      },
      geometry: {
        coordinates: [
          33.1222,
          43.6172
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ABROD"
      },
      geometry: {
        coordinates: [
          49.5069,
          40.6989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ABRUT"
      },
      geometry: {
        coordinates: [
          25.1831,
          44.4503
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ABSAX"
      },
      geometry: {
        coordinates: [
          32.5836,
          42.3336
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ABTEK"
      },
      geometry: {
        coordinates: [
          49.3056,
          41.8108
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ABTER"
      },
      geometry: {
        coordinates: [
          25.8417,
          46.2531
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ABTON"
      },
      geometry: {
        coordinates: [
          46.7714,
          46.0206
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ABVEX"
      },
      geometry: {
        coordinates: [
          40.6578,
          40.8942
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC039"
      },
      geometry: {
        coordinates: [
          32.2217,
          40.3022
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC040"
      },
      geometry: {
        coordinates: [
          32.4567,
          40.3808
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC046"
      },
      geometry: {
        coordinates: [
          32.8639,
          40.6144
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC048"
      },
      geometry: {
        coordinates: [
          32.9794,
          39.6208
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC049"
      },
      geometry: {
        coordinates: [
          33.1,
          39.7972
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC050"
      },
      geometry: {
        coordinates: [
          33.5283,
          39.7747
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC051"
      },
      geometry: {
        coordinates: [
          33.6436,
          40.1867
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC052"
      },
      geometry: {
        coordinates: [
          33.5144,
          40.0525
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC053"
      },
      geometry: {
        coordinates: [
          33.4372,
          39.9719
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC054"
      },
      geometry: {
        coordinates: [
          33.3475,
          39.8778
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC055"
      },
      geometry: {
        coordinates: [
          33.0692,
          40.035
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC056"
      },
      geometry: {
        coordinates: [
          33.1592,
          40.1292
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC057"
      },
      geometry: {
        coordinates: [
          33.2364,
          40.2097
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC058"
      },
      geometry: {
        coordinates: [
          33.3139,
          40.2903
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC059"
      },
      geometry: {
        coordinates: [
          33.3917,
          40.3708
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC062"
      },
      geometry: {
        coordinates: [
          32.4219,
          40.3356
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC063"
      },
      geometry: {
        coordinates: [
          32.5286,
          40.4447
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC064"
      },
      geometry: {
        coordinates: [
          32.6522,
          40.3761
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC065"
      },
      geometry: {
        coordinates: [
          32.4781,
          40.1922
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC066"
      },
      geometry: {
        coordinates: [
          32.6011,
          40.1233
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC067"
      },
      geometry: {
        coordinates: [
          32.6778,
          40.2044
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC069"
      },
      geometry: {
        coordinates: [
          32.8781,
          40.2169
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC070"
      },
      geometry: {
        coordinates: [
          32.8011,
          40.1361
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC076"
      },
      geometry: {
        coordinates: [
          32.4219,
          39.9328
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC080"
      },
      geometry: {
        coordinates: [
          33.6344,
          40.1864
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC081"
      },
      geometry: {
        coordinates: [
          33.4258,
          39.9703
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC083"
      },
      geometry: {
        coordinates: [
          33.3872,
          39.93
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC084"
      },
      geometry: {
        coordinates: [
          33.31,
          39.8492
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC085"
      },
      geometry: {
        coordinates: [
          33.2594,
          39.5711
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC086"
      },
      geometry: {
        coordinates: [
          33.375,
          39.6925
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC087"
      },
      geometry: {
        coordinates: [
          33.1111,
          39.8378
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC088"
      },
      geometry: {
        coordinates: [
          33.1881,
          39.9186
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC089"
      },
      geometry: {
        coordinates: [
          33.265,
          39.9992
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC090"
      },
      geometry: {
        coordinates: [
          33.1425,
          40.0683
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC091"
      },
      geometry: {
        coordinates: [
          33.0656,
          39.9875
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC411"
      },
      geometry: {
        coordinates: [
          32.8253,
          40.1778
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC422"
      },
      geometry: {
        coordinates: [
          32.9022,
          40.2586
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC433"
      },
      geometry: {
        coordinates: [
          32.9794,
          40.3394
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC444"
      },
      geometry: {
        coordinates: [
          33.0567,
          40.4203
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC455"
      },
      geometry: {
        coordinates: [
          33.1342,
          40.5008
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC611"
      },
      geometry: {
        coordinates: [
          32.8792,
          40.0072
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC612"
      },
      geometry: {
        coordinates: [
          32.74,
          40.0869
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC613"
      },
      geometry: {
        coordinates: [
          32.5319,
          40.2053
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC614"
      },
      geometry: {
        coordinates: [
          32.2867,
          40.4039
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC615"
      },
      geometry: {
        coordinates: [
          32.97,
          39.7833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC619"
      },
      geometry: {
        coordinates: [
          32.81,
          39.6633
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC630"
      },
      geometry: {
        coordinates: [
          32.9794,
          39.8953
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC688"
      },
      geometry: {
        coordinates: [
          32.7547,
          40.2853
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC711"
      },
      geometry: {
        coordinates: [
          33.1164,
          40.2464
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC712"
      },
      geometry: {
        coordinates: [
          32.9975,
          40.3194
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC713"
      },
      geometry: {
        coordinates: [
          32.9014,
          40.3783
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC714"
      },
      geometry: {
        coordinates: [
          32.6767,
          40.5153
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC715"
      },
      geometry: {
        coordinates: [
          32.6203,
          40.5497
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC721"
      },
      geometry: {
        coordinates: [
          33.2006,
          40.3269
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AC722"
      },
      geometry: {
        coordinates: [
          33.2767,
          40.3997
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ACCUA"
      },
      geometry: {
        coordinates: [
          28.0314,
          41.6756
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ADA"
      },
      geometry: {
        coordinates: [
          35.2103,
          36.9406
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ADANO"
      },
      geometry: {
        coordinates: [
          45.8333,
          39.6667
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ADASU"
      },
      geometry: {
        coordinates: [
          31.3889,
          36.7511
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ADAXA"
      },
      geometry: {
        coordinates: [
          35.2678,
          36.9747
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ADAXD"
      },
      geometry: {
        coordinates: [
          35.2928,
          36.9894
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ADBEL"
      },
      geometry: {
        coordinates: [
          31.7464,
          36.9053
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ADEKI"
      },
      geometry: {
        coordinates: [
          46.75,
          41.2967
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ADESO"
      },
      geometry: {
        coordinates: [
          26.5111,
          36.5333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ADGEN"
      },
      geometry: {
        coordinates: [
          48.1581,
          40.5322
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ADILA"
      },
      geometry: {
        coordinates: [
          45.495,
          39.9967
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ADINA"
      },
      geometry: {
        coordinates: [
          30.505,
          43.8033
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ADKAR"
      },
      geometry: {
        coordinates: [
          35.1978,
          36.7925
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ADL"
      },
      geometry: {
        coordinates: [
          39.9469,
          43.4031
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ADLAS"
      },
      geometry: {
        coordinates: [
          33.32,
          34.9619
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ADNAK"
      },
      geometry: {
        coordinates: [
          47.2139,
          45.7094
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ADNET"
      },
      geometry: {
        coordinates: [
          39.84,
          44.3692
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ADNOS"
      },
      geometry: {
        coordinates: [
          40.8533,
          39.3183
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ADORU"
      },
      geometry: {
        coordinates: [
          26.5683,
          41.8717
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ADRES"
      },
      geometry: {
        coordinates: [
          37.3336,
          37.1714
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ADSEP"
      },
      geometry: {
        coordinates: [
          36.5481,
          37.6858
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ADUGA"
      },
      geometry: {
        coordinates: [
          39.59,
          45.5647
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ADULI"
      },
      geometry: {
        coordinates: [
          25.8697,
          44.4553
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ADUMU"
      },
      geometry: {
        coordinates: [
          33.0778,
          42.0711
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ADUNO"
      },
      geometry: {
        coordinates: [
          25.4522,
          42.0608
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ADUPA"
      },
      geometry: {
        coordinates: [
          33.1917,
          38.7214
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ADVER"
      },
      geometry: {
        coordinates: [
          22.9867,
          43.4222
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ADVOK"
      },
      geometry: {
        coordinates: [
          36.5011,
          39.5036
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AFGAR"
      },
      geometry: {
        coordinates: [
          27.8069,
          41.4503
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AGAPI"
      },
      geometry: {
        coordinates: [
          30,
          34.87
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AGAPU"
      },
      geometry: {
        coordinates: [
          24.3264,
          38.4225
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AGASU"
      },
      geometry: {
        coordinates: [
          21.8081,
          45.8811
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AGATO"
      },
      geometry: {
        coordinates: [
          48.5386,
          42.2664
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AGBET"
      },
      geometry: {
        coordinates: [
          26.8975,
          41.04
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AGDAM"
      },
      geometry: {
        coordinates: [
          49.2214,
          40.2644
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AGDOR"
      },
      geometry: {
        coordinates: [
          43.8542,
          43.3547
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AGH"
      },
      geometry: {
        coordinates: [
          22.7919,
          39.2161
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AGINA"
      },
      geometry: {
        coordinates: [
          44.0867,
          39.3233
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AGISA"
      },
      geometry: {
        coordinates: [
          23.3483,
          39.7333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AGISO"
      },
      geometry: {
        coordinates: [
          43.4958,
          41.6278
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AGNEP"
      },
      geometry: {
        coordinates: [
          22.9597,
          45.45
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AGOLA"
      },
      geometry: {
        coordinates: [
          43.3153,
          45.7997
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AI533"
      },
      geometry: {
        coordinates: [
          30.11,
          36.9294
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AI712"
      },
      geometry: {
        coordinates: [
          31.5383,
          36.6342
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AKAKI"
      },
      geometry: {
        coordinates: [
          41.3714,
          41.7578
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AKBUK"
      },
      geometry: {
        coordinates: [
          27.4606,
          37.5
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AKCAK"
      },
      geometry: {
        coordinates: [
          30.7247,
          41.4289
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AKEDO"
      },
      geometry: {
        coordinates: [
          35.4469,
          40.9528
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AKIMO"
      },
      geometry: {
        coordinates: [
          29.4011,
          37.2206
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AKINA"
      },
      geometry: {
        coordinates: [
          26.2486,
          36.9803
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AKORO"
      },
      geometry: {
        coordinates: [
          24.3933,
          37.21
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AKSEK"
      },
      geometry: {
        coordinates: [
          28.2231,
          36.9261
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AKT"
      },
      geometry: {
        coordinates: [
          32.9717,
          34.6164
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AKUTU"
      },
      geometry: {
        coordinates: [
          42.5886,
          40.6347
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ALABO"
      },
      geometry: {
        coordinates: [
          48.8653,
          43.2047
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ALANI"
      },
      geometry: {
        coordinates: [
          23.9917,
          36.9111
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ALE"
      },
      geometry: {
        coordinates: [
          37.2067,
          36.1781
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ALEDA"
      },
      geometry: {
        coordinates: [
          27.8394,
          39.8608
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ALEGI"
      },
      geometry: {
        coordinates: [
          42.9986,
          44.7247
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ALENO"
      },
      geometry: {
        coordinates: [
          29.8414,
          43.9692
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ALIKA"
      },
      geometry: {
        coordinates: [
          41.5347,
          42.2525
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ALIKI"
      },
      geometry: {
        coordinates: [
          25.3489,
          35.925
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ALIKO"
      },
      geometry: {
        coordinates: [
          22.4494,
          40.7719
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ALINO"
      },
      geometry: {
        coordinates: [
          34.3978,
          44.6756
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ALIVI"
      },
      geometry: {
        coordinates: [
          26.6458,
          43.1872
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ALKIS"
      },
      geometry: {
        coordinates: [
          30,
          35.2
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ALMUS"
      },
      geometry: {
        coordinates: [
          36.6656,
          40.7742
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ALPAY"
      },
      geometry: {
        coordinates: [
          29.9994,
          36.8322
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ALRAM"
      },
      geometry: {
        coordinates: [
          44.6267,
          37.7083
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ALSUS"
      },
      geometry: {
        coordinates: [
          34.6567,
          35.035
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ALTAX"
      },
      geometry: {
        coordinates: [
          49.3617,
          32.5039
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ALTIN"
      },
      geometry: {
        coordinates: [
          29.4092,
          36.7656
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ALUBA"
      },
      geometry: {
        coordinates: [
          46.9792,
          42.6844
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ALUVO"
      },
      geometry: {
        coordinates: [
          48.1661,
          40.6089
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ALVAR"
      },
      geometry: {
        coordinates: [
          41.7431,
          39.9958
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ALX"
      },
      geometry: {
        coordinates: [
          25.9567,
          40.8539
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AMAKO"
      },
      geometry: {
        coordinates: [
          33.9336,
          34.7903
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AMALA"
      },
      geometry: {
        coordinates: [
          24.8328,
          40.5686
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AMANI"
      },
      geometry: {
        coordinates: [
          26.4994,
          39.3322
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AMAXI"
      },
      geometry: {
        coordinates: [
          25.7828,
          35.0978
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AMEIS"
      },
      geometry: {
        coordinates: [
          28.6817,
          40.9872
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AMGOL"
      },
      geometry: {
        coordinates: [
          31.435,
          46.0733
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AMIBO"
      },
      geometry: {
        coordinates: [
          21.6075,
          34.9444
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AMLAV"
      },
      geometry: {
        coordinates: [
          29.7661,
          44.1619
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AMONO"
      },
      geometry: {
        coordinates: [
          29.87,
          34.9722
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AMSIV"
      },
      geometry: {
        coordinates: [
          23.2617,
          39.9103
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AMTAR"
      },
      geometry: {
        coordinates: [
          21.9383,
          34
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AMTOV"
      },
      geometry: {
        coordinates: [
          26.1519,
          43.1725
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ANAGU"
      },
      geometry: {
        coordinates: [
          46.0156,
          41.6306
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ANAKA"
      },
      geometry: {
        coordinates: [
          37.3475,
          45.0022
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ANASA"
      },
      geometry: {
        coordinates: [
          22.5553,
          44.3119
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ANEDO"
      },
      geometry: {
        coordinates: [
          29.6919,
          46.3633
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ANEPI"
      },
      geometry: {
        coordinates: [
          22.195,
          37.4064
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ANK"
      },
      geometry: {
        coordinates: [
          32.8283,
          39.9533
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ANKXA"
      },
      geometry: {
        coordinates: [
          32.9831,
          40.1139
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ANKXD"
      },
      geometry: {
        coordinates: [
          33.0092,
          40.1411
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ANTAR"
      },
      geometry: {
        coordinates: [
          28.2667,
          33.8
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ANTOP"
      },
      geometry: {
        coordinates: [
          34.8583,
          42.0525
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "APAKJ"
      },
      geometry: {
        coordinates: [
          44.1244,
          36.3511
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "APLON"
      },
      geometry: {
        coordinates: [
          32.0667,
          33.8667
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "APROB"
      },
      geometry: {
        coordinates: [
          25.0025,
          43.9733
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "APSER"
      },
      geometry: {
        coordinates: [
          29.8483,
          39.3672
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "APSID"
      },
      geometry: {
        coordinates: [
          27.6022,
          40.7969
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "APTOX"
      },
      geometry: {
        coordinates: [
          32.5042,
          41.5931
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "APVAS"
      },
      geometry: {
        coordinates: [
          36.6683,
          40.7642
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ARA"
      },
      geometry: {
        coordinates: [
          21.4294,
          38.1589
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ARB"
      },
      geometry: {
        coordinates: [
          48.4347,
          38.3156
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ARBAD"
      },
      geometry: {
        coordinates: [
          33.4767,
          43.99
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ARGES"
      },
      geometry: {
        coordinates: [
          26.8267,
          44.0822
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ARI"
      },
      geometry: {
        coordinates: [
          43.0269,
          39.6458
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ARK"
      },
      geometry: {
        coordinates: [
          49.8539,
          34.1372
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ARKIN"
      },
      geometry: {
        coordinates: [
          39.9167,
          39.9514
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ARKUT"
      },
      geometry: {
        coordinates: [
          38.0917,
          44.0264
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ARLAT"
      },
      geometry: {
        coordinates: [
          38.7019,
          41.0969
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ARLOS"
      },
      geometry: {
        coordinates: [
          23,
          34.6253
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ARMAM"
      },
      geometry: {
        coordinates: [
          28.4714,
          37.2394
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ARMUD"
      },
      geometry: {
        coordinates: [
          33.4856,
          39.2217
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ARNAS"
      },
      geometry: {
        coordinates: [
          23.4806,
          40.5281
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ARNAX"
      },
      geometry: {
        coordinates: [
          25.8294,
          44.3786
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ARNOV"
      },
      geometry: {
        coordinates: [
          26.7681,
          42.7478
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ARPAG"
      },
      geometry: {
        coordinates: [
          37.2744,
          37.2625
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ARPEM"
      },
      geometry: {
        coordinates: [
          31.9481,
          41.8803
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ARPUT"
      },
      geometry: {
        coordinates: [
          38.9419,
          38.8422
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ARSUG"
      },
      geometry: {
        coordinates: [
          38.2722,
          41.1331
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ARTAR"
      },
      geometry: {
        coordinates: [
          38.8447,
          37.0939
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ARTAT"
      },
      geometry: {
        coordinates: [
          29.6242,
          42.3639
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ARVUT"
      },
      geometry: {
        coordinates: [
          27.2803,
          37.3422
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ASBEP"
      },
      geometry: {
        coordinates: [
          32.1236,
          42.2628
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ASBOM"
      },
      geometry: {
        coordinates: [
          37.0414,
          37.2589
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ASDEV"
      },
      geometry: {
        coordinates: [
          29.1214,
          40.8292
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ASGUK"
      },
      geometry: {
        coordinates: [
          29.6861,
          40.1753
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ASIMI"
      },
      geometry: {
        coordinates: [
          27.7311,
          36.4656
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ASKEM"
      },
      geometry: {
        coordinates: [
          34.4103,
          45.2247
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ASKER"
      },
      geometry: {
        coordinates: [
          38.7847,
          38.2769
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ASKOS"
      },
      geometry: {
        coordinates: [
          24.2703,
          40.6381
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ASKUT"
      },
      geometry: {
        coordinates: [
          28.2378,
          46.4031
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ASMAP"
      },
      geometry: {
        coordinates: [
          30.7114,
          40.6314
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ASMIK"
      },
      geometry: {
        coordinates: [
          44.2333,
          40.6614
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ASMOB"
      },
      geometry: {
        coordinates: [
          32.2328,
          41.6694
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ASNEL"
      },
      geometry: {
        coordinates: [
          26.33,
          44.5367
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ASNIR"
      },
      geometry: {
        coordinates: [
          28.3622,
          32.6469
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ASNOT"
      },
      geometry: {
        coordinates: [
          42.9547,
          33.5
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ASNUT"
      },
      geometry: {
        coordinates: [
          27.0081,
          40.2283
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ASPIS"
      },
      geometry: {
        coordinates: [
          32.2283,
          33.4817
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ASPIV"
      },
      geometry: {
        coordinates: [
          24.7064,
          40.7689
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ASPOK"
      },
      geometry: {
        coordinates: [
          48.83,
          36.9883
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ASPUL"
      },
      geometry: {
        coordinates: [
          40.4128,
          38.5517
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ASRIL"
      },
      geometry: {
        coordinates: [
          47.7536,
          34.4703
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ASTAL"
      },
      geometry: {
        coordinates: [
          33.1244,
          40.7406
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ASTIS"
      },
      geometry: {
        coordinates: [
          26.2328,
          36.5653
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ASTOV"
      },
      geometry: {
        coordinates: [
          22.5344,
          37.4208
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ASVOD"
      },
      geometry: {
        coordinates: [
          37.5728,
          40.0822
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ATBOG"
      },
      geometry: {
        coordinates: [
          26.9311,
          43.5558
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ATCOS"
      },
      geometry: {
        coordinates: [
          28.6328,
          40.8942
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ATFIR"
      },
      geometry: {
        coordinates: [
          23.7747,
          41.4017
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ATGIT"
      },
      geometry: {
        coordinates: [
          29.7492,
          38.2014
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ATGOB"
      },
      geometry: {
        coordinates: [
          31.2508,
          40.7253
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ATH"
      },
      geometry: {
        coordinates: [
          23.9719,
          37.9481
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ATKAN"
      },
      geometry: {
        coordinates: [
          27.8494,
          39.52
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ATLAN"
      },
      geometry: {
        coordinates: [
          25.4261,
          35.8475
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ATLIT"
      },
      geometry: {
        coordinates: [
          34.9153,
          32.6978
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ATLOM"
      },
      geometry: {
        coordinates: [
          39.3486,
          37.3856
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ATMAK"
      },
      geometry: {
        coordinates: [
          27.4906,
          43.0556
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ATNOP"
      },
      geometry: {
        coordinates: [
          34.8583,
          42.0522
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ATPIX"
      },
      geometry: {
        coordinates: [
          30.6236,
          41.7533
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ATPOX"
      },
      geometry: {
        coordinates: [
          24.735,
          39.1117
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ATPUM"
      },
      geometry: {
        coordinates: [
          40.3758,
          41.1933
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ATRAP"
      },
      geometry: {
        coordinates: [
          26.6297,
          44.6436
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ATRIV"
      },
      geometry: {
        coordinates: [
          37.3186,
          40.2125
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ATSAL"
      },
      geometry: {
        coordinates: [
          28.7189,
          37.5003
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ATSUB"
      },
      geometry: {
        coordinates: [
          31.6239,
          36.585
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ATV"
      },
      geometry: {
        coordinates: [
          23.8044,
          37.8886
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ATVAM"
      },
      geometry: {
        coordinates: [
          39.5831,
          41.6433
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ATVAS"
      },
      geometry: {
        coordinates: [
          28.7786,
          41.7625
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ATVEP"
      },
      geometry: {
        coordinates: [
          26.9536,
          41.4622
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AYT"
      },
      geometry: {
        coordinates: [
          30.7944,
          36.9206
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AYT01"
      },
      geometry: {
        coordinates: [
          30.81,
          36.9533
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AYT02"
      },
      geometry: {
        coordinates: [
          30.8331,
          36.9494
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AYT03"
      },
      geometry: {
        coordinates: [
          30.8367,
          36.9314
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AYTXA"
      },
      geometry: {
        coordinates: [
          30.7903,
          36.885
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AYTXD"
      },
      geometry: {
        coordinates: [
          30.7947,
          36.9153
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AZABI"
      },
      geometry: {
        coordinates: [
          49.5,
          44.74
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "AZBUL"
      },
      geometry: {
        coordinates: [
          33.3619,
          39.3822
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BA090"
      },
      geometry: {
        coordinates: [
          28.9647,
          41.0372
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BA091"
      },
      geometry: {
        coordinates: [
          28.9406,
          40.9406
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BA092"
      },
      geometry: {
        coordinates: [
          28.7744,
          40.8481
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BA095"
      },
      geometry: {
        coordinates: [
          29.1969,
          41.015
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BA234"
      },
      geometry: {
        coordinates: [
          29.6375,
          39.9567
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BA235"
      },
      geometry: {
        coordinates: [
          29.2189,
          40.0308
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BA243"
      },
      geometry: {
        coordinates: [
          30.3589,
          40.4758
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BA246"
      },
      geometry: {
        coordinates: [
          29.0558,
          40.3028
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BA247"
      },
      geometry: {
        coordinates: [
          28.8244,
          40.4158
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BA248"
      },
      geometry: {
        coordinates: [
          28.6944,
          40.5011
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BA355"
      },
      geometry: {
        coordinates: [
          26.9467,
          41.1914
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BA356"
      },
      geometry: {
        coordinates: [
          27.1658,
          40.8211
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BA357"
      },
      geometry: {
        coordinates: [
          27.5572,
          40.7139
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BA358"
      },
      geometry: {
        coordinates: [
          27.7869,
          40.7117
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BA359"
      },
      geometry: {
        coordinates: [
          28.6022,
          40.8344
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BA366"
      },
      geometry: {
        coordinates: [
          27.4503,
          40.565
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BA444"
      },
      geometry: {
        coordinates: [
          30.0786,
          40.5814
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BA445"
      },
      geometry: {
        coordinates: [
          29.5997,
          40.5808
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BA446"
      },
      geometry: {
        coordinates: [
          29.2869,
          40.5794
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BA447"
      },
      geometry: {
        coordinates: [
          28.6986,
          40.7947
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BA457"
      },
      geometry: {
        coordinates: [
          28.3792,
          41.3133
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BA458"
      },
      geometry: {
        coordinates: [
          28.1214,
          40.9981
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BABIB"
      },
      geometry: {
        coordinates: [
          29.0514,
          46.1786
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BABIL"
      },
      geometry: {
        coordinates: [
          43.0767,
          32.58
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BABIN"
      },
      geometry: {
        coordinates: [
          31,
          44.425
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BABLI"
      },
      geometry: {
        coordinates: [
          36.8631,
          36.9533
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BABSA"
      },
      geometry: {
        coordinates: [
          30.305,
          38.0156
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BABUR"
      },
      geometry: {
        coordinates: [
          49.5,
          45.3867
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BADEL"
      },
      geometry: {
        coordinates: [
          24.0739,
          37.0006
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BADEM"
      },
      geometry: {
        coordinates: [
          38.66,
          37.6044
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BADIR"
      },
      geometry: {
        coordinates: [
          45.3667,
          41.4833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BADKA"
      },
      geometry: {
        coordinates: [
          29.1108,
          45.3775
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BADKO"
      },
      geometry: {
        coordinates: [
          43.5069,
          44.5114
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BADOG"
      },
      geometry: {
        coordinates: [
          21.9814,
          36.0517
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BADOX"
      },
      geometry: {
        coordinates: [
          33.9753,
          39.3319
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BAFRA"
      },
      geometry: {
        coordinates: [
          35.9664,
          41.5086
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BAG"
      },
      geometry: {
        coordinates: [
          32.8103,
          40.0697
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BAGEM"
      },
      geometry: {
        coordinates: [
          44.4806,
          41.5989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BAGLU"
      },
      geometry: {
        coordinates: [
          29.3253,
          38.0711
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BAGRI"
      },
      geometry: {
        coordinates: [
          29.8033,
          45.1867
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BAGVA"
      },
      geometry: {
        coordinates: [
          46.2933,
          41.0414
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BAKIR"
      },
      geometry: {
        coordinates: [
          33.3244,
          39.4378
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BAKLO"
      },
      geometry: {
        coordinates: [
          26.4922,
          42.5428
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BAKPI"
      },
      geometry: {
        coordinates: [
          29.6592,
          38.7494
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BAKRI"
      },
      geometry: {
        coordinates: [
          38.2817,
          43.8981
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BALAX"
      },
      geometry: {
        coordinates: [
          33.7808,
          39.4575
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BALBI"
      },
      geometry: {
        coordinates: [
          25.7542,
          44.905
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BALED"
      },
      geometry: {
        coordinates: [
          32.3417,
          45.4417
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BALEG"
      },
      geometry: {
        coordinates: [
          39.3183,
          45.6531
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BALIK"
      },
      geometry: {
        coordinates: [
          27.3,
          43.6767
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BALIM"
      },
      geometry: {
        coordinates: [
          41.1242,
          38.4297
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BALMA"
      },
      geometry: {
        coordinates: [
          35.05,
          34.4833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BALON"
      },
      geometry: {
        coordinates: [
          39.6083,
          40.0917
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BALSU"
      },
      geometry: {
        coordinates: [
          29.4236,
          37.4583
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BALUM"
      },
      geometry: {
        coordinates: [
          37.6667,
          42.6833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BAMDA"
      },
      geometry: {
        coordinates: [
          43.7989,
          43.4714
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BAMLA"
      },
      geometry: {
        coordinates: [
          38.9028,
          40.6403
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BAMOG"
      },
      geometry: {
        coordinates: [
          45.2153,
          43.4664
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BAMOS"
      },
      geometry: {
        coordinates: [
          23.5611,
          39.2947
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BAMUP"
      },
      geometry: {
        coordinates: [
          32.0172,
          42.5875
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BAN"
      },
      geometry: {
        coordinates: [
          35.9558,
          35.22
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BANAG"
      },
      geometry: {
        coordinates: [
          44.6236,
          40.0611
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BANRO"
      },
      geometry: {
        coordinates: [
          27.9953,
          36.4947
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BANUR"
      },
      geometry: {
        coordinates: [
          30.9667,
          43.6833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BANUT"
      },
      geometry: {
        coordinates: [
          39.9853,
          42.9897
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BAPAX"
      },
      geometry: {
        coordinates: [
          34.1742,
          35.7017
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BAPNI"
      },
      geometry: {
        coordinates: [
          45.5278,
          43.325
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BAPSI"
      },
      geometry: {
        coordinates: [
          27.9042,
          38.0022
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BARAD"
      },
      geometry: {
        coordinates: [
          45.0833,
          41.3586
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BARPE"
      },
      geometry: {
        coordinates: [
          26.9781,
          40.9261
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BARUK"
      },
      geometry: {
        coordinates: [
          28.5697,
          44.5414
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BARUS"
      },
      geometry: {
        coordinates: [
          42.8417,
          41.905
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BASEM"
      },
      geometry: {
        coordinates: [
          37.6519,
          33.5603
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BASKA"
      },
      geometry: {
        coordinates: [
          43.4486,
          42.5831
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BASMU"
      },
      geometry: {
        coordinates: [
          30.5425,
          40.6667
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BAT"
      },
      geometry: {
        coordinates: [
          41.12,
          37.9375
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BATNU"
      },
      geometry: {
        coordinates: [
          32.7239,
          36.1608
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BATUK"
      },
      geometry: {
        coordinates: [
          28.1467,
          37.25
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BAU01"
      },
      geometry: {
        coordinates: [
          49.7606,
          40.5708
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BAU05"
      },
      geometry: {
        coordinates: [
          49.9444,
          40.5056
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BAVBO"
      },
      geometry: {
        coordinates: [
          33.73,
          41.8
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BAVES"
      },
      geometry: {
        coordinates: [
          24.7269,
          35.4247
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BAVGA"
      },
      geometry: {
        coordinates: [
          22.665,
          42.5939
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BAVTI"
      },
      geometry: {
        coordinates: [
          40.2547,
          40.6628
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BAYIR"
      },
      geometry: {
        coordinates: [
          41.4039,
          38.5947
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BB101"
      },
      geometry: {
        coordinates: [
          49.99,
          40.2867
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BB103"
      },
      geometry: {
        coordinates: [
          49.7047,
          40.2758
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BB105"
      },
      geometry: {
        coordinates: [
          49.4369,
          40.2828
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BB107"
      },
      geometry: {
        coordinates: [
          49.7694,
          40.6292
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BB501"
      },
      geometry: {
        coordinates: [
          49.9608,
          40.7217
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BB503"
      },
      geometry: {
        coordinates: [
          49.9597,
          40.8953
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BB504"
      },
      geometry: {
        coordinates: [
          49.9642,
          40.9819
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BB506"
      },
      geometry: {
        coordinates: [
          49.8644,
          40.9711
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BB512"
      },
      geometry: {
        coordinates: [
          49.85,
          40.7186
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BB516"
      },
      geometry: {
        coordinates: [
          49.6011,
          40.1292
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BDR"
      },
      geometry: {
        coordinates: [
          27.6814,
          37.2469
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BDRXD"
      },
      geometry: {
        coordinates: [
          27.6492,
          37.255
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BEBOT"
      },
      geometry: {
        coordinates: [
          37.2472,
          43.0894
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BEBRI"
      },
      geometry: {
        coordinates: [
          47.1472,
          40.1647
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BEDOP"
      },
      geometry: {
        coordinates: [
          32.2325,
          41.9269
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BEGAL"
      },
      geometry: {
        coordinates: [
          25.7719,
          44.6006
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BEKIR"
      },
      geometry: {
        coordinates: [
          47.8883,
          41.0583
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BEKIS"
      },
      geometry: {
        coordinates: [
          36.9883,
          43.1381
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BEKVA"
      },
      geometry: {
        coordinates: [
          21.695,
          40.9344
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BELGI"
      },
      geometry: {
        coordinates: [
          25.8833,
          40.5
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BELNI"
      },
      geometry: {
        coordinates: [
          45.9203,
          43.9197
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BELSU"
      },
      geometry: {
        coordinates: [
          34.2864,
          39.1308
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BEMTO"
      },
      geometry: {
        coordinates: [
          42.3883,
          45.2517
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BENEM"
      },
      geometry: {
        coordinates: [
          29.3167,
          36.1833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BENGO"
      },
      geometry: {
        coordinates: [
          22.9669,
          42.7225
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BENTA"
      },
      geometry: {
        coordinates: [
          33.9558,
          40.1514
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BEPES"
      },
      geometry: {
        coordinates: [
          28.3222,
          45.3481
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BEPTO"
      },
      geometry: {
        coordinates: [
          32.0533,
          36.2697
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BERAP"
      },
      geometry: {
        coordinates: [
          21.6306,
          37.4111
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BERGO"
      },
      geometry: {
        coordinates: [
          27.1328,
          38.9989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BERTU"
      },
      geometry: {
        coordinates: [
          32.2367,
          45.81
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BESES"
      },
      geometry: {
        coordinates: [
          28.2761,
          36.3311
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BESLI"
      },
      geometry: {
        coordinates: [
          24.0342,
          43.4022
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BETEG"
      },
      geometry: {
        coordinates: [
          36.3833,
          45.1833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BETIZ"
      },
      geometry: {
        coordinates: [
          29.3586,
          41.6533
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BETOR"
      },
      geometry: {
        coordinates: [
          48.4403,
          43.8681
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BEYAZ"
      },
      geometry: {
        coordinates: [
          42.7881,
          38.505
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BGD"
      },
      geometry: {
        coordinates: [
          44.2553,
          33.2844
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BGS"
      },
      geometry: {
        coordinates: [
          27.4986,
          42.5531
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BH310"
      },
      geometry: {
        coordinates: [
          26.52,
          40.2183
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BIBAM"
      },
      geometry: {
        coordinates: [
          28.4011,
          40.8728
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BIFOK"
      },
      geometry: {
        coordinates: [
          26.2864,
          38.9719
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BIG"
      },
      geometry: {
        coordinates: [
          27.3653,
          40.2842
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BIMDU"
      },
      geometry: {
        coordinates: [
          27.1919,
          39.9842
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BIMVO"
      },
      geometry: {
        coordinates: [
          33.1319,
          42.4561
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BINBI"
      },
      geometry: {
        coordinates: [
          29.6356,
          43.7183
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BINOL"
      },
      geometry: {
        coordinates: [
          40.1086,
          43.6883
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BINOM"
      },
      geometry: {
        coordinates: [
          28.7336,
          46.2725
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BIRMA"
      },
      geometry: {
        coordinates: [
          30.5617,
          44.98
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BIRPU"
      },
      geometry: {
        coordinates: [
          29.1747,
          36.3189
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BISNA"
      },
      geometry: {
        coordinates: [
          49.2833,
          42.2333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BITLA"
      },
      geometry: {
        coordinates: [
          21.3581,
          40.8756
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BIVBU"
      },
      geometry: {
        coordinates: [
          24.3317,
          44.9206
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BKPR"
      },
      geometry: {
        coordinates: [
          21.0358,
          42.5728
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BKZ"
      },
      geometry: {
        coordinates: [
          29.1428,
          41.1269
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BLAJA"
      },
      geometry: {
        coordinates: [
          24.0117,
          46.1814
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BLB"
      },
      geometry: {
        coordinates: [
          33.5514,
          44.6911
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BLB01"
      },
      geometry: {
        coordinates: [
          33.7642,
          44.7344
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BLB02"
      },
      geometry: {
        coordinates: [
          33.3967,
          44.6339
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BLB03"
      },
      geometry: {
        coordinates: [
          33.7692,
          44.6342
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BLB04"
      },
      geometry: {
        coordinates: [
          33.4506,
          44.5656
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BLO"
      },
      geometry: {
        coordinates: [
          23.8139,
          42.6672
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BNG"
      },
      geometry: {
        coordinates: [
          40.6008,
          38.8556
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BOBVO"
      },
      geometry: {
        coordinates: [
          23.0911,
          43.3922
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BODMO"
      },
      geometry: {
        coordinates: [
          26.4214,
          43.1808
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BOMKI"
      },
      geometry: {
        coordinates: [
          32.03,
          44.535
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BONAM"
      },
      geometry: {
        coordinates: [
          44.2997,
          38.0489
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BONEK"
      },
      geometry: {
        coordinates: [
          32.9347,
          35.0731
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BORES"
      },
      geometry: {
        coordinates: [
          45.3603,
          38.4747
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BOSIS"
      },
      geometry: {
        coordinates: [
          33.74,
          34.6233
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BOTNA"
      },
      geometry: {
        coordinates: [
          28.2881,
          46.3511
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BOXIX"
      },
      geometry: {
        coordinates: [
          46.1567,
          35.29
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BOYAT"
      },
      geometry: {
        coordinates: [
          37.2433,
          37.1208
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BOZ"
      },
      geometry: {
        coordinates: [
          23.1911,
          42.77
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BRONZ"
      },
      geometry: {
        coordinates: [
          30.3494,
          37.2697
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BRY"
      },
      geometry: {
        coordinates: [
          29.5936,
          40.2625
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BRYXA"
      },
      geometry: {
        coordinates: [
          29.6042,
          40.2642
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BRYXD"
      },
      geometry: {
        coordinates: [
          29.6022,
          40.2597
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BSE"
      },
      geometry: {
        coordinates: [
          26.2306,
          44.5297
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BSW"
      },
      geometry: {
        coordinates: [
          25.9519,
          44.4722
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BUDED"
      },
      geometry: {
        coordinates: [
          47.3422,
          37.8869
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BUFRA"
      },
      geometry: {
        coordinates: [
          24.7056,
          42.5122
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BUK"
      },
      geometry: {
        coordinates: [
          33.105,
          40.2419
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BUKEL"
      },
      geometry: {
        coordinates: [
          25.7258,
          45.0778
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BULEN"
      },
      geometry: {
        coordinates: [
          25.8167,
          43.75
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BULUT"
      },
      geometry: {
        coordinates: [
          38.9022,
          38.7561
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BUMAR"
      },
      geometry: {
        coordinates: [
          48.9217,
          42.0283
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BUMOM"
      },
      geometry: {
        coordinates: [
          33.2297,
          38.0144
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BUNAG"
      },
      geometry: {
        coordinates: [
          30.4333,
          46.0667
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BUNIR"
      },
      geometry: {
        coordinates: [
          25.8442,
          44.7131
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BUNIS"
      },
      geometry: {
        coordinates: [
          49.9856,
          40.6389
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BUPUN"
      },
      geometry: {
        coordinates: [
          37.9056,
          37.3944
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BUREK"
      },
      geometry: {
        coordinates: [
          21.1969,
          41.8322
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BURUD"
      },
      geometry: {
        coordinates: [
          34.64,
          44.57
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BUSOK"
      },
      geometry: {
        coordinates: [
          26.6008,
          44.5325
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BUSRA"
      },
      geometry: {
        coordinates: [
          36.6167,
          32.3333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "BUVAK"
      },
      geometry: {
        coordinates: [
          27.4375,
          42.9906
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "CAK"
      },
      geometry: {
        coordinates: [
          35.7,
          34.3006
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "CAY"
      },
      geometry: {
        coordinates: [
          32.0444,
          41.5139
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "CENGO"
      },
      geometry: {
        coordinates: [
          28.0911,
          37.0656
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "CENTR"
      },
      geometry: {
        coordinates: [
          35.7242,
          39.0672
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "CETUL"
      },
      geometry: {
        coordinates: [
          28.6269,
          44.6975
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "CLD"
      },
      geometry: {
        coordinates: [
          27.8964,
          37.8147
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "CND"
      },
      geometry: {
        coordinates: [
          28.4783,
          44.2856
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "CNK"
      },
      geometry: {
        coordinates: [
          26.4275,
          40.1353
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "COPSA"
      },
      geometry: {
        coordinates: [
          24.2328,
          46.1311
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "COPXX"
      },
      geometry: {
        coordinates: [
          35.7242,
          39.0672
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "CRD"
      },
      geometry: {
        coordinates: [
          29.7042,
          37.7897
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "CRL"
      },
      geometry: {
        coordinates: [
          27.9422,
          41.1522
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "CRLXA"
      },
      geometry: {
        coordinates: [
          27.9053,
          41.1294
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "CRLXD"
      },
      geometry: {
        coordinates: [
          27.9325,
          41.1469
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "CRM"
      },
      geometry: {
        coordinates: [
          36.5489,
          41.2656
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "CRMXA"
      },
      geometry: {
        coordinates: [
          36.5408,
          41.2811
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "CRMXD"
      },
      geometry: {
        coordinates: [
          36.5758,
          41.2622
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "CTP"
      },
      geometry: {
        coordinates: [
          30.0714,
          40.7375
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "CTR01"
      },
      geometry: {
        coordinates: [
          33.0164,
          40.29
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "CTR02"
      },
      geometry: {
        coordinates: [
          33.1758,
          40.2028
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "CTR03"
      },
      geometry: {
        coordinates: [
          32.8989,
          39.9158
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "CTR04"
      },
      geometry: {
        coordinates: [
          32.7667,
          40.0292
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "CUBUK"
      },
      geometry: {
        coordinates: [
          33.1044,
          40.2417
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DAL"
      },
      geometry: {
        coordinates: [
          28.7822,
          36.6894
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DAL05"
      },
      geometry: {
        coordinates: [
          28.8089,
          36.7697
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DAL14"
      },
      geometry: {
        coordinates: [
          28.58,
          36.7753
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DAL15"
      },
      geometry: {
        coordinates: [
          28.7383,
          36.8692
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DAL16"
      },
      geometry: {
        coordinates: [
          28.7503,
          36.8203
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DAL21"
      },
      geometry: {
        coordinates: [
          28.5844,
          36.5975
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DAL99"
      },
      geometry: {
        coordinates: [
          28.6375,
          36.8269
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DALXA"
      },
      geometry: {
        coordinates: [
          28.7858,
          36.7006
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DALXD"
      },
      geometry: {
        coordinates: [
          28.795,
          36.7267
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DAM"
      },
      geometry: {
        coordinates: [
          36.4686,
          33.365
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DAMAT"
      },
      geometry: {
        coordinates: [
          40.6647,
          39.9561
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DAMLA"
      },
      geometry: {
        coordinates: [
          31.0911,
          37.3614
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DAMOS"
      },
      geometry: {
        coordinates: [
          47.7558,
          37.4386
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DANUL"
      },
      geometry: {
        coordinates: [
          28.4564,
          44.9067
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DAPEM"
      },
      geometry: {
        coordinates: [
          48.6997,
          32.8572
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DAPUK"
      },
      geometry: {
        coordinates: [
          38.6739,
          33.0275
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DARIP"
      },
      geometry: {
        coordinates: [
          21.0125,
          33.5236
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DARIX"
      },
      geometry: {
        coordinates: [
          43.8986,
          36.7781
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DAROS"
      },
      geometry: {
        coordinates: [
          33.1483,
          35.0117
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DARUN"
      },
      geometry: {
        coordinates: [
          46.7097,
          38.5608
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DASDA"
      },
      geometry: {
        coordinates: [
          46.8706,
          38.6931
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DASIS"
      },
      geometry: {
        coordinates: [
          44.2083,
          38.9097
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DASNI"
      },
      geometry: {
        coordinates: [
          30.85,
          35.6167
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DAXEN"
      },
      geometry: {
        coordinates: [
          37.6847,
          32.7458
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DDM"
      },
      geometry: {
        coordinates: [
          23.2172,
          37.4778
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DEDIM"
      },
      geometry: {
        coordinates: [
          29.2686,
          39.3972
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DEDIN"
      },
      geometry: {
        coordinates: [
          24.0794,
          42.5942
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DEDON"
      },
      geometry: {
        coordinates: [
          45.2467,
          41.7153
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DEKEK"
      },
      geometry: {
        coordinates: [
          29.3231,
          40.3344
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DEKIT"
      },
      geometry: {
        coordinates: [
          45.2594,
          40.1333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DEKOP"
      },
      geometry: {
        coordinates: [
          43.8039,
          37.7783
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DELAV"
      },
      geometry: {
        coordinates: [
          26.6117,
          35.8547
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DELEL"
      },
      geometry: {
        coordinates: [
          40.8903,
          40.965
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DELIN"
      },
      geometry: {
        coordinates: [
          25.165,
          43.1342
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DELMI"
      },
      geometry: {
        coordinates: [
          43.2244,
          33.3217
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DELOX"
      },
      geometry: {
        coordinates: [
          26.7133,
          37.5106
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DEMAG"
      },
      geometry: {
        coordinates: [
          21.1533,
          35.5181
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DEMEB"
      },
      geometry: {
        coordinates: [
          39.2317,
          37.5639
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DEMED"
      },
      geometry: {
        coordinates: [
          37.8106,
          42.9806
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DEN"
      },
      geometry: {
        coordinates: [
          28.6028,
          38.5781
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DENAK"
      },
      geometry: {
        coordinates: [
          26.4356,
          45.0022
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DENEN"
      },
      geometry: {
        coordinates: [
          31.4106,
          41.2506
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DENKI"
      },
      geometry: {
        coordinates: [
          45.8561,
          32.3744
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DENUB"
      },
      geometry: {
        coordinates: [
          29.4433,
          44.0664
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DEREG"
      },
      geometry: {
        coordinates: [
          21.23,
          44.4256
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DEREL"
      },
      geometry: {
        coordinates: [
          32.1933,
          40.7139
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DERIL"
      },
      geometry: {
        coordinates: [
          44.415,
          37.7344
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DERNU"
      },
      geometry: {
        coordinates: [
          45.1147,
          35.2972
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DERYA"
      },
      geometry: {
        coordinates: [
          30.8119,
          36.4156
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DESAV"
      },
      geometry: {
        coordinates: [
          29.8606,
          40.7256
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DESEL"
      },
      geometry: {
        coordinates: [
          32.6592,
          44.4358
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DESEM"
      },
      geometry: {
        coordinates: [
          30.0019,
          38.1522
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DESHE"
      },
      geometry: {
        coordinates: [
          35.5425,
          32.8506
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DESPO"
      },
      geometry: {
        coordinates: [
          34.3817,
          34.4483
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DETIR"
      },
      geometry: {
        coordinates: [
          47.3353,
          44.5231
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DETOS"
      },
      geometry: {
        coordinates: [
          36.6711,
          41.7583
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DEVMU"
      },
      geometry: {
        coordinates: [
          32.4608,
          41.8722
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DF"
      },
      geometry: {
        coordinates: [
          44.5656,
          41.9167
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DIBAT"
      },
      geometry: {
        coordinates: [
          37.2583,
          44.5731
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DIDIS"
      },
      geometry: {
        coordinates: [
          25.2428,
          37.2028
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DIGAM"
      },
      geometry: {
        coordinates: [
          31.1117,
          45.2583
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DIGBO"
      },
      geometry: {
        coordinates: [
          28.4044,
          41.4936
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DIGIL"
      },
      geometry: {
        coordinates: [
          39.0772,
          38.1953
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DIGTI"
      },
      geometry: {
        coordinates: [
          26.3214,
          41.1253
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DIKER"
      },
      geometry: {
        coordinates: [
          25.8244,
          44.5028
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DIKNI"
      },
      geometry: {
        coordinates: [
          23.2064,
          40.8992
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DIKUL"
      },
      geometry: {
        coordinates: [
          44.6067,
          43.2053
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DILAS"
      },
      geometry: {
        coordinates: [
          25.8208,
          44.5561
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DILMO"
      },
      geometry: {
        coordinates: [
          23.1433,
          36.1164
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DILOP"
      },
      geometry: {
        coordinates: [
          23.7164,
          38.3333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DILVO"
      },
      geometry: {
        coordinates: [
          23.9369,
          42.31
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DIMOS"
      },
      geometry: {
        coordinates: [
          35.0544,
          45.4783
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DIMPA"
      },
      geometry: {
        coordinates: [
          41.9433,
          45.7969
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DINAP"
      },
      geometry: {
        coordinates: [
          41.8319,
          43.525
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DINEN"
      },
      geometry: {
        coordinates: [
          25.9922,
          42.4997
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DINRO"
      },
      geometry: {
        coordinates: [
          28.8083,
          43.7
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DIPAS"
      },
      geometry: {
        coordinates: [
          34.2394,
          43.7208
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DIPOS"
      },
      geometry: {
        coordinates: [
          32.8033,
          34.7567
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DIRAL"
      },
      geometry: {
        coordinates: [
          27.5542,
          44.5108
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DIRER"
      },
      geometry: {
        coordinates: [
          21.4097,
          44.9883
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DIRMI"
      },
      geometry: {
        coordinates: [
          24.8497,
          36.0561
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DIRUN"
      },
      geometry: {
        coordinates: [
          38.1719,
          43.0864
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DISKA"
      },
      geometry: {
        coordinates: [
          45.2928,
          41.4639
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DISOR"
      },
      geometry: {
        coordinates: [
          22.7583,
          41.2472
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DITAX"
      },
      geometry: {
        coordinates: [
          22.3372,
          45.4689
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DIVDI"
      },
      geometry: {
        coordinates: [
          28.8883,
          41.6064
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DKA"
      },
      geometry: {
        coordinates: [
          33.7417,
          34.9969
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DOKUB"
      },
      geometry: {
        coordinates: [
          29.8958,
          38.8914
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DOLAP"
      },
      geometry: {
        coordinates: [
          22.7683,
          43.3742
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DOLOT"
      },
      geometry: {
        coordinates: [
          33.47,
          43.7017
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DOLUM"
      },
      geometry: {
        coordinates: [
          38.8617,
          45.3781
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DONDU"
      },
      geometry: {
        coordinates: [
          37.0581,
          37.5864
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DONIV"
      },
      geometry: {
        coordinates: [
          21.1694,
          44.7489
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DOPUS"
      },
      geometry: {
        coordinates: [
          28.3592,
          35.2719
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DOREN"
      },
      geometry: {
        coordinates: [
          33.2833,
          35.9333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DORUK"
      },
      geometry: {
        coordinates: [
          42.1853,
          39.2792
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DOTAM"
      },
      geometry: {
        coordinates: [
          23.4069,
          42.3567
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DRAMO"
      },
      geometry: {
        coordinates: [
          26.6111,
          41.0344
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DRZ"
      },
      geometry: {
        coordinates: [
          40.1694,
          35.2925
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DUGLA"
      },
      geometry: {
        coordinates: [
          27.2244,
          39.4989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DULAV"
      },
      geometry: {
        coordinates: [
          45.6333,
          38.95
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DUMM1"
      },
      geometry: {
        coordinates: [
          35.7242,
          39.0672
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DUMM2"
      },
      geometry: {
        coordinates: [
          35.7242,
          39.0839
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DUMM3"
      },
      geometry: {
        coordinates: [
          35.7242,
          39.1006
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DUNAV"
      },
      geometry: {
        coordinates: [
          28.4819,
          45.1272
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DVA"
      },
      geometry: {
        coordinates: [
          22.9689,
          45.8281
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DYB"
      },
      geometry: {
        coordinates: [
          40.2081,
          37.8733
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "DZF"
      },
      geometry: {
        coordinates: [
          48.3783,
          32.4381
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EBEDI"
      },
      geometry: {
        coordinates: [
          39.1236,
          39.725
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EBOKA"
      },
      geometry: {
        coordinates: [
          22.3481,
          35.3875
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EDASA"
      },
      geometry: {
        coordinates: [
          30.1244,
          39.46
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EDASI"
      },
      geometry: {
        coordinates: [
          22.4275,
          40.4575
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EDASU"
      },
      geometry: {
        coordinates: [
          42.7767,
          40.6067
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EDATA"
      },
      geometry: {
        coordinates: [
          47.1833,
          40.6069
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EDELU"
      },
      geometry: {
        coordinates: [
          47.5106,
          40.8478
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EDETA"
      },
      geometry: {
        coordinates: [
          24.9311,
          45.7689
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EDIKA"
      },
      geometry: {
        coordinates: [
          22.8786,
          42.2769
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EDISI"
      },
      geometry: {
        coordinates: [
          30.1464,
          36.8492
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EGN"
      },
      geometry: {
        coordinates: [
          23.4264,
          37.7661
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EKDAM"
      },
      geometry: {
        coordinates: [
          29.6172,
          40.4347
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EKI"
      },
      geometry: {
        coordinates: [
          27.4261,
          40.9511
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EKMEK"
      },
      geometry: {
        coordinates: [
          33.9433,
          40.5036
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EKMEL"
      },
      geometry: {
        coordinates: [
          30.1828,
          40.3767
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EKMIM"
      },
      geometry: {
        coordinates: [
          30.4817,
          38.2347
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EKMIN"
      },
      geometry: {
        coordinates: [
          40.8844,
          38.2842
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EKNAB"
      },
      geometry: {
        coordinates: [
          22.5008,
          45.7278
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EKNUD"
      },
      geometry: {
        coordinates: [
          30.8103,
          38.1292
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EKPOS"
      },
      geometry: {
        coordinates: [
          43.3772,
          40.6906
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EKSEN"
      },
      geometry: {
        coordinates: [
          30.6703,
          37.8906
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EKSIB"
      },
      geometry: {
        coordinates: [
          27.4358,
          40.0153
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EKSOL"
      },
      geometry: {
        coordinates: [
          26.9403,
          43.1989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EKSUK"
      },
      geometry: {
        coordinates: [
          34.3372,
          41.4025
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EKTEL"
      },
      geometry: {
        coordinates: [
          38.9978,
          37.8267
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EKTES"
      },
      geometry: {
        coordinates: [
          40.2044,
          40.9853
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EKTOD"
      },
      geometry: {
        coordinates: [
          37.7067,
          40.5919
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EKTOS"
      },
      geometry: {
        coordinates: [
          23.2919,
          37.1236
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ELDEN"
      },
      geometry: {
        coordinates: [
          35.4292,
          39.9097
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ELDET"
      },
      geometry: {
        coordinates: [
          23.7558,
          44.2861
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ELF"
      },
      geometry: {
        coordinates: [
          23.5286,
          38.0575
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ELGEX"
      },
      geometry: {
        coordinates: [
          38.1128,
          37.1806
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ELGOV"
      },
      geometry: {
        coordinates: [
          28.0175,
          40.5944
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ELIKA"
      },
      geometry: {
        coordinates: [
          34.5833,
          33.8319
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ELMAS"
      },
      geometry: {
        coordinates: [
          30.7083,
          37.5833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ELMUV"
      },
      geometry: {
        coordinates: [
          29.7111,
          40.7708
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ELNEM"
      },
      geometry: {
        coordinates: [
          38.1981,
          39.7567
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ELNUG"
      },
      geometry: {
        coordinates: [
          28.71,
          41.1264
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ELPIS"
      },
      geometry: {
        coordinates: [
          22.6031,
          40.3261
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ELROP"
      },
      geometry: {
        coordinates: [
          32.6533,
          36.5061
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ELRUR"
      },
      geometry: {
        coordinates: [
          27.1936,
          43.3964
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ELSIV"
      },
      geometry: {
        coordinates: [
          45.3706,
          40.6311
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ELTOX"
      },
      geometry: {
        coordinates: [
          43.3694,
          40.0997
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ELVAB"
      },
      geometry: {
        coordinates: [
          25.0908,
          44.1644
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ELVAS"
      },
      geometry: {
        coordinates: [
          21.8419,
          38.5247
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ELVON"
      },
      geometry: {
        coordinates: [
          29.4389,
          40.1931
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EMBAG"
      },
      geometry: {
        coordinates: [
          42.2086,
          38.1267
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EMBIX"
      },
      geometry: {
        coordinates: [
          30.0181,
          39.9619
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EMEDA"
      },
      geometry: {
        coordinates: [
          33.8033,
          34.4817
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EMGER"
      },
      geometry: {
        coordinates: [
          39.7717,
          43.9464
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EMGIM"
      },
      geometry: {
        coordinates: [
          29.5422,
          39.9094
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EMIDO"
      },
      geometry: {
        coordinates: [
          42.915,
          36.77
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EMILI"
      },
      geometry: {
        coordinates: [
          34.0444,
          34.6389
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EMKUD"
      },
      geometry: {
        coordinates: [
          30.2775,
          38.6053
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EMLAD"
      },
      geometry: {
        coordinates: [
          37.6181,
          41.1869
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EMLUX"
      },
      geometry: {
        coordinates: [
          37.7042,
          36.8994
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ENEDA"
      },
      geometry: {
        coordinates: [
          46.455,
          35.8697
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ENESU"
      },
      geometry: {
        coordinates: [
          27.3306,
          41.4753
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ENFOR"
      },
      geometry: {
        coordinates: [
          36.2747,
          39.8739
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ENIMA"
      },
      geometry: {
        coordinates: [
          24.9025,
          45.0794
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EPALO"
      },
      geometry: {
        coordinates: [
          25.0103,
          35.7156
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EPEKI"
      },
      geometry: {
        coordinates: [
          30.2206,
          40.9139
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERANA"
      },
      geometry: {
        coordinates: [
          22.2394,
          41.1633
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERCIS"
      },
      geometry: {
        coordinates: [
          34.9436,
          38.2703
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERDOM"
      },
      geometry: {
        coordinates: [
          23.2892,
          43.5175
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERESO"
      },
      geometry: {
        coordinates: [
          25.9436,
          39.2919
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERGAN"
      },
      geometry: {
        coordinates: [
          39.0272,
          38.515
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERGEP"
      },
      geometry: {
        coordinates: [
          33.9625,
          37.4439
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERGIN"
      },
      geometry: {
        coordinates: [
          29.9994,
          37.23
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERGUN"
      },
      geometry: {
        coordinates: [
          34.7389,
          40.7464
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERH"
      },
      geometry: {
        coordinates: [
          38.1119,
          38.4625
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERHAN"
      },
      geometry: {
        coordinates: [
          35.2289,
          38.5239
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERIDU"
      },
      geometry: {
        coordinates: [
          39.1697,
          41.2153
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERIMA"
      },
      geometry: {
        coordinates: [
          26.1344,
          37.7481
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERIMO"
      },
      geometry: {
        coordinates: [
          32.9217,
          33.125
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERKAL"
      },
      geometry: {
        coordinates: [
          29.9797,
          40.9867
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERKOS"
      },
      geometry: {
        coordinates: [
          37.8839,
          41.1644
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERKUK"
      },
      geometry: {
        coordinates: [
          32.9431,
          39.2153
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERLEB"
      },
      geometry: {
        coordinates: [
          28.5547,
          41.1211
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERLEV"
      },
      geometry: {
        coordinates: [
          49.2419,
          40.7303
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERMEM"
      },
      geometry: {
        coordinates: [
          36.9197,
          37.8114
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERMOD"
      },
      geometry: {
        coordinates: [
          35.28,
          39.2233
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERMUP"
      },
      geometry: {
        coordinates: [
          31.0228,
          42.0006
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERN"
      },
      geometry: {
        coordinates: [
          39.5292,
          39.7083
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERPIM"
      },
      geometry: {
        coordinates: [
          42.7089,
          38.1069
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERSEN"
      },
      geometry: {
        coordinates: [
          30.6661,
          40.8656
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERTAS"
      },
      geometry: {
        coordinates: [
          29.1467,
          41.4614
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERTEK"
      },
      geometry: {
        coordinates: [
          39.2994,
          38.9564
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERVAG"
      },
      geometry: {
        coordinates: [
          30.1828,
          39.0653
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERVAK"
      },
      geometry: {
        coordinates: [
          36.7269,
          40.5119
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERZ"
      },
      geometry: {
        coordinates: [
          41.2069,
          39.9567
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERZXA"
      },
      geometry: {
        coordinates: [
          41.1925,
          39.9578
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ERZXD"
      },
      geometry: {
        coordinates: [
          41.1478,
          39.9567
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ESALO"
      },
      geometry: {
        coordinates: [
          30.4586,
          45.7747
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ESB"
      },
      geometry: {
        coordinates: [
          33.0125,
          40.1467
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ESENA"
      },
      geometry: {
        coordinates: [
          26.8725,
          43.0269
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ESENK"
      },
      geometry: {
        coordinates: [
          42.9381,
          38.7447
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ESEPO"
      },
      geometry: {
        coordinates: [
          39.5583,
          39.8519
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ESERI"
      },
      geometry: {
        coordinates: [
          32.3856,
          34.4819
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ESIRI"
      },
      geometry: {
        coordinates: [
          21.4628,
          44.3244
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ESKIN"
      },
      geometry: {
        coordinates: [
          28.3981,
          39.05
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ESOPO"
      },
      geometry: {
        coordinates: [
          24.5022,
          39.3394
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ESOSU"
      },
      geometry: {
        coordinates: [
          33.5381,
          41.6072
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ESOTA"
      },
      geometry: {
        coordinates: [
          41.7725,
          37.77
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ESR"
      },
      geometry: {
        coordinates: [
          30.5122,
          39.8131
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ESRXA"
      },
      geometry: {
        coordinates: [
          30.5997,
          39.7842
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ESRXD"
      },
      geometry: {
        coordinates: [
          30.5639,
          39.7839
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ETAMP"
      },
      geometry: {
        coordinates: [
          29.7289,
          39.5797
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ETAVA"
      },
      geometry: {
        coordinates: [
          29.1047,
          45.7
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ETEKA"
      },
      geometry: {
        coordinates: [
          24.0064,
          39.1578
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ETERU"
      },
      geometry: {
        coordinates: [
          27.06,
          36.4681
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ETESU"
      },
      geometry: {
        coordinates: [
          39.3544,
          39.1381
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ETIDA"
      },
      geometry: {
        coordinates: [
          22.4178,
          43.6858
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ETILI"
      },
      geometry: {
        coordinates: [
          23.0419,
          35.8317
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ETISI"
      },
      geometry: {
        coordinates: [
          43.2956,
          40.2003
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ETNIL"
      },
      geometry: {
        coordinates: [
          31.3967,
          45.7814
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ETRIL"
      },
      geometry: {
        coordinates: [
          23.8931,
          42.7506
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ETRUD"
      },
      geometry: {
        coordinates: [
          24.8111,
          39.1078
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ETUBA"
      },
      geometry: {
        coordinates: [
          26.5961,
          42.8144
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ETUNO"
      },
      geometry: {
        coordinates: [
          34.0678,
          44.2042
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ETVER"
      },
      geometry: {
        coordinates: [
          34.2272,
          38.6158
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ETVOL"
      },
      geometry: {
        coordinates: [
          49.0486,
          40.3092
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EVBIR"
      },
      geometry: {
        coordinates: [
          28.4931,
          40.9975
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EVBOL"
      },
      geometry: {
        coordinates: [
          29.6383,
          37.1711
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EVENO"
      },
      geometry: {
        coordinates: [
          30,
          35.8333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EVGEG"
      },
      geometry: {
        coordinates: [
          31.1075,
          42.4572
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EVIKA"
      },
      geometry: {
        coordinates: [
          27.5139,
          45.6125
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EVIVI"
      },
      geometry: {
        coordinates: [
          23.4556,
          41.4028
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EVKAM"
      },
      geometry: {
        coordinates: [
          35.4131,
          42.1514
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EVKIT"
      },
      geometry: {
        coordinates: [
          33.7544,
          36.2611
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EVKOR"
      },
      geometry: {
        coordinates: [
          32,
          36.4289
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EVLAP"
      },
      geometry: {
        coordinates: [
          31.5858,
          41.5375
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EVLIB"
      },
      geometry: {
        coordinates: [
          21.7728,
          35.0328
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EVLIG"
      },
      geometry: {
        coordinates: [
          31.4831,
          40.4661
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EVNOT"
      },
      geometry: {
        coordinates: [
          29.9706,
          40.7844
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EVORA"
      },
      geometry: {
        coordinates: [
          30.95,
          33.4
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EVPIM"
      },
      geometry: {
        coordinates: [
          32.3664,
          41.895
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EVPUV"
      },
      geometry: {
        coordinates: [
          32.7594,
          41.8003
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EVSAS"
      },
      geometry: {
        coordinates: [
          40.1886,
          39.3247
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EVSEP"
      },
      geometry: {
        coordinates: [
          26.1881,
          40.1567
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EVTAD"
      },
      geometry: {
        coordinates: [
          29.6567,
          41.2478
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EVUNU"
      },
      geometry: {
        coordinates: [
          28.7514,
          35.9492
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EXELA"
      },
      geometry: {
        coordinates: [
          29.5478,
          35.9556
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EXIGA"
      },
      geometry: {
        coordinates: [
          26.8869,
          43.4758
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EZN"
      },
      geometry: {
        coordinates: [
          38.8869,
          39.9369
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "EZS"
      },
      geometry: {
        coordinates: [
          39.2239,
          38.7081
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FATIH"
      },
      geometry: {
        coordinates: [
          28.7994,
          41.2281
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FENER"
      },
      geometry: {
        coordinates: [
          28.3578,
          41.2864
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FILIZ"
      },
      geometry: {
        coordinates: [
          39.4703,
          38.8664
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FIRAS"
      },
      geometry: {
        coordinates: [
          37.92,
          33.8719
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FIRAT"
      },
      geometry: {
        coordinates: [
          37.6542,
          37.1389
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ050"
      },
      geometry: {
        coordinates: [
          29.4242,
          40.9408
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ060"
      },
      geometry: {
        coordinates: [
          29.4817,
          40.8508
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ075"
      },
      geometry: {
        coordinates: [
          29.5658,
          40.9986
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ421"
      },
      geometry: {
        coordinates: [
          28.5589,
          41.4989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ422"
      },
      geometry: {
        coordinates: [
          28.3439,
          41.2383
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ439"
      },
      geometry: {
        coordinates: [
          29.2825,
          41.1358
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ521"
      },
      geometry: {
        coordinates: [
          27.5142,
          41.2344
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ522"
      },
      geometry: {
        coordinates: [
          27.8936,
          41.1244
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ523"
      },
      geometry: {
        coordinates: [
          28.1811,
          41.0397
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ541"
      },
      geometry: {
        coordinates: [
          27.5031,
          41.0408
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ621"
      },
      geometry: {
        coordinates: [
          27.7103,
          40.4617
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ622"
      },
      geometry: {
        coordinates: [
          27.82,
          40.6797
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ623"
      },
      geometry: {
        coordinates: [
          27.9733,
          40.6794
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ624"
      },
      geometry: {
        coordinates: [
          28.3186,
          40.6786
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ625"
      },
      geometry: {
        coordinates: [
          28.5194,
          40.7108
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ630"
      },
      geometry: {
        coordinates: [
          28.6422,
          40.6714
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ631"
      },
      geometry: {
        coordinates: [
          28.6967,
          40.5931
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ632"
      },
      geometry: {
        coordinates: [
          28.7786,
          40.53
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ633"
      },
      geometry: {
        coordinates: [
          28.8808,
          40.4878
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ634"
      },
      geometry: {
        coordinates: [
          28.995,
          40.4703
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ635"
      },
      geometry: {
        coordinates: [
          29.1106,
          40.4792
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ636"
      },
      geometry: {
        coordinates: [
          29.0789,
          40.5761
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ637"
      },
      geometry: {
        coordinates: [
          29.0469,
          40.6731
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ719"
      },
      geometry: {
        coordinates: [
          29.7544,
          41.1239
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ720"
      },
      geometry: {
        coordinates: [
          29.5106,
          40.9483
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ721"
      },
      geometry: {
        coordinates: [
          29.5119,
          40.7458
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ722"
      },
      geometry: {
        coordinates: [
          29.465,
          40.5625
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ723"
      },
      geometry: {
        coordinates: [
          29.465,
          40.4875
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ724"
      },
      geometry: {
        coordinates: [
          29.4122,
          40.4053
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ725"
      },
      geometry: {
        coordinates: [
          29.2158,
          40.4031
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ730"
      },
      geometry: {
        coordinates: [
          29.1211,
          40.4467
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ731"
      },
      geometry: {
        coordinates: [
          28.9928,
          40.4372
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ732"
      },
      geometry: {
        coordinates: [
          28.8661,
          40.4564
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ733"
      },
      geometry: {
        coordinates: [
          28.7525,
          40.5033
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ734"
      },
      geometry: {
        coordinates: [
          28.6614,
          40.5733
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ735"
      },
      geometry: {
        coordinates: [
          28.6008,
          40.6606
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ736"
      },
      geometry: {
        coordinates: [
          28.7664,
          40.7044
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ737"
      },
      geometry: {
        coordinates: [
          28.8906,
          40.7375
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ821"
      },
      geometry: {
        coordinates: [
          30.4433,
          40.3492
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ822"
      },
      geometry: {
        coordinates: [
          29.7875,
          40.2547
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ823"
      },
      geometry: {
        coordinates: [
          29.5483,
          40.2644
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ922"
      },
      geometry: {
        coordinates: [
          29.4764,
          40.0897
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ971"
      },
      geometry: {
        coordinates: [
          29.4711,
          40.2019
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FJ972"
      },
      geometry: {
        coordinates: [
          29.3344,
          40.3528
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FLR"
      },
      geometry: {
        coordinates: [
          25.7081,
          44.5008
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM010"
      },
      geometry: {
        coordinates: [
          28.6753,
          41.3817
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM015"
      },
      geometry: {
        coordinates: [
          28.6383,
          41.4797
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM020"
      },
      geometry: {
        coordinates: [
          28.55,
          41.3803
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM021"
      },
      geometry: {
        coordinates: [
          28.5528,
          41.2492
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM022"
      },
      geometry: {
        coordinates: [
          28.5883,
          41.0664
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM030"
      },
      geometry: {
        coordinates: [
          28.7253,
          41.3822
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM035"
      },
      geometry: {
        coordinates: [
          28.7264,
          41.4656
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM036"
      },
      geometry: {
        coordinates: [
          28.7969,
          41.6144
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM037"
      },
      geometry: {
        coordinates: [
          28.9314,
          41.7336
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM038"
      },
      geometry: {
        coordinates: [
          29.4464,
          41.9289
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM039"
      },
      geometry: {
        coordinates: [
          29.7717,
          41.9889
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM040"
      },
      geometry: {
        coordinates: [
          28.8803,
          41.3839
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM041"
      },
      geometry: {
        coordinates: [
          28.9183,
          41.2583
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM042"
      },
      geometry: {
        coordinates: [
          28.8286,
          41.0475
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM043"
      },
      geometry: {
        coordinates: [
          28.9089,
          40.8747
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM090"
      },
      geometry: {
        coordinates: [
          28.6019,
          41.5753
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM091"
      },
      geometry: {
        coordinates: [
          28.2461,
          41.8172
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM095"
      },
      geometry: {
        coordinates: [
          28.7278,
          41.6022
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM096"
      },
      geometry: {
        coordinates: [
          28.5342,
          41.7119
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM375"
      },
      geometry: {
        coordinates: [
          28.2714,
          41.1478
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM385"
      },
      geometry: {
        coordinates: [
          28.3819,
          41.1492
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM395"
      },
      geometry: {
        coordinates: [
          28.7128,
          41.1531
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM401"
      },
      geometry: {
        coordinates: [
          30.1611,
          41.6939
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM402"
      },
      geometry: {
        coordinates: [
          30.0058,
          41.7017
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM403"
      },
      geometry: {
        coordinates: [
          29.8558,
          41.7767
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM404"
      },
      geometry: {
        coordinates: [
          29.7053,
          41.8514
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM405"
      },
      geometry: {
        coordinates: [
          29.5942,
          41.7258
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM406"
      },
      geometry: {
        coordinates: [
          29.4836,
          41.6
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM407"
      },
      geometry: {
        coordinates: [
          29.2558,
          41.5342
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM408"
      },
      geometry: {
        coordinates: [
          29.1725,
          41.4561
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM410"
      },
      geometry: {
        coordinates: [
          29.1725,
          41.3394
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM411"
      },
      geometry: {
        coordinates: [
          29.3064,
          41.2606
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM412"
      },
      geometry: {
        coordinates: [
          29.4036,
          41.1553
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM413"
      },
      geometry: {
        coordinates: [
          29.4556,
          41.0333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM414"
      },
      geometry: {
        coordinates: [
          29.4583,
          40.9053
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM415"
      },
      geometry: {
        coordinates: [
          29.2839,
          40.9228
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM416"
      },
      geometry: {
        coordinates: [
          29.1531,
          40.9358
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM417"
      },
      geometry: {
        coordinates: [
          29.0222,
          40.9489
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM451"
      },
      geometry: {
        coordinates: [
          30.4667,
          41.7194
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM452"
      },
      geometry: {
        coordinates: [
          30.295,
          41.7542
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM453"
      },
      geometry: {
        coordinates: [
          30.2075,
          41.8742
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM454"
      },
      geometry: {
        coordinates: [
          30.12,
          41.9889
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM455"
      },
      geometry: {
        coordinates: [
          29.9439,
          41.9153
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM456"
      },
      geometry: {
        coordinates: [
          29.7683,
          41.8414
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM457"
      },
      geometry: {
        coordinates: [
          29.7278,
          41.8469
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM458"
      },
      geometry: {
        coordinates: [
          29.4603,
          41.7989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM460"
      },
      geometry: {
        coordinates: [
          29.4597,
          41.6708
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM461"
      },
      geometry: {
        coordinates: [
          29.4594,
          41.5428
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM462"
      },
      geometry: {
        coordinates: [
          29.4092,
          41.4203
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM463"
      },
      geometry: {
        coordinates: [
          29.3139,
          41.3142
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM464"
      },
      geometry: {
        coordinates: [
          29.1819,
          41.2333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM465"
      },
      geometry: {
        coordinates: [
          29.0919,
          41.3483
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM466"
      },
      geometry: {
        coordinates: [
          29.0242,
          41.4344
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM467"
      },
      geometry: {
        coordinates: [
          28.9564,
          41.5206
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM501"
      },
      geometry: {
        coordinates: [
          30.4542,
          40.8864
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM503"
      },
      geometry: {
        coordinates: [
          30.1119,
          41.1161
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM505"
      },
      geometry: {
        coordinates: [
          29.8242,
          40.8683
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM507"
      },
      geometry: {
        coordinates: [
          29.5828,
          40.8725
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM510"
      },
      geometry: {
        coordinates: [
          29.4122,
          40.9097
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM511"
      },
      geometry: {
        coordinates: [
          29.4122,
          41.0281
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM512"
      },
      geometry: {
        coordinates: [
          29.3642,
          41.1406
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM513"
      },
      geometry: {
        coordinates: [
          29.2744,
          41.2375
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM514"
      },
      geometry: {
        coordinates: [
          29.1506,
          41.3103
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM515"
      },
      geometry: {
        coordinates: [
          29.0856,
          41.2231
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM516"
      },
      geometry: {
        coordinates: [
          29.0208,
          41.1361
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM517"
      },
      geometry: {
        coordinates: [
          28.9558,
          41.0486
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM551"
      },
      geometry: {
        coordinates: [
          30.4308,
          40.9008
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM552"
      },
      geometry: {
        coordinates: [
          30.0103,
          40.9264
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM553"
      },
      geometry: {
        coordinates: [
          29.7608,
          40.8211
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM554"
      },
      geometry: {
        coordinates: [
          29.5203,
          40.9392
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM555"
      },
      geometry: {
        coordinates: [
          29.3517,
          40.8911
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM556"
      },
      geometry: {
        coordinates: [
          29.0603,
          40.9661
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM557"
      },
      geometry: {
        coordinates: [
          29.1306,
          41.1239
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM560"
      },
      geometry: {
        coordinates: [
          29.1594,
          41.2622
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM561"
      },
      geometry: {
        coordinates: [
          29.2811,
          41.3367
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM562"
      },
      geometry: {
        coordinates: [
          29.3692,
          41.4347
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM563"
      },
      geometry: {
        coordinates: [
          29.4156,
          41.5478
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM564"
      },
      geometry: {
        coordinates: [
          29.4158,
          41.6661
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM565"
      },
      geometry: {
        coordinates: [
          29.2839,
          41.6514
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM566"
      },
      geometry: {
        coordinates: [
          29.1519,
          41.6367
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM567"
      },
      geometry: {
        coordinates: [
          29.02,
          41.6217
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM602"
      },
      geometry: {
        coordinates: [
          29.8692,
          40.4122
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM603"
      },
      geometry: {
        coordinates: [
          29.9692,
          40.5214
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM604"
      },
      geometry: {
        coordinates: [
          29.9692,
          40.6747
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM650"
      },
      geometry: {
        coordinates: [
          29.8028,
          40.2311
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM651"
      },
      geometry: {
        coordinates: [
          29.7739,
          40.3653
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM652"
      },
      geometry: {
        coordinates: [
          29.8942,
          40.4956
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM701"
      },
      geometry: {
        coordinates: [
          27.0678,
          41.1181
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM702"
      },
      geometry: {
        coordinates: [
          27.2383,
          41.1961
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM704"
      },
      geometry: {
        coordinates: [
          27.4233,
          40.9633
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM705"
      },
      geometry: {
        coordinates: [
          27.6489,
          40.8964
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM706"
      },
      geometry: {
        coordinates: [
          27.8028,
          40.8933
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM710"
      },
      geometry: {
        coordinates: [
          27.9319,
          40.9131
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM711"
      },
      geometry: {
        coordinates: [
          27.9233,
          41.0411
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM712"
      },
      geometry: {
        coordinates: [
          27.965,
          41.1656
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM713"
      },
      geometry: {
        coordinates: [
          28.0528,
          41.2753
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM714"
      },
      geometry: {
        coordinates: [
          28.1797,
          41.3606
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM715"
      },
      geometry: {
        coordinates: [
          28.2767,
          41.2489
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM716"
      },
      geometry: {
        coordinates: [
          28.3492,
          41.165
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM717"
      },
      geometry: {
        coordinates: [
          28.4211,
          41.0811
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM751"
      },
      geometry: {
        coordinates: [
          27.1167,
          41.0581
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM752"
      },
      geometry: {
        coordinates: [
          27.2408,
          41.1756
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM753"
      },
      geometry: {
        coordinates: [
          27.3653,
          41.2933
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM754"
      },
      geometry: {
        coordinates: [
          27.505,
          41.2086
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM755"
      },
      geometry: {
        coordinates: [
          27.6444,
          41.1239
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM756"
      },
      geometry: {
        coordinates: [
          27.7936,
          41.0936
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM757"
      },
      geometry: {
        coordinates: [
          27.9258,
          41.0922
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM758"
      },
      geometry: {
        coordinates: [
          28.0989,
          41.1183
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM801"
      },
      geometry: {
        coordinates: [
          27.1194,
          41.8108
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM802"
      },
      geometry: {
        coordinates: [
          27.3661,
          41.6822
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM804"
      },
      geometry: {
        coordinates: [
          27.5133,
          41.4
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM807"
      },
      geometry: {
        coordinates: [
          28.0369,
          41.5561
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM808"
      },
      geometry: {
        coordinates: [
          28.2075,
          41.4494
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM810"
      },
      geometry: {
        coordinates: [
          28.2039,
          41.3328
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM811"
      },
      geometry: {
        coordinates: [
          28.0869,
          41.2539
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM812"
      },
      geometry: {
        coordinates: [
          28.0056,
          41.1528
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM813"
      },
      geometry: {
        coordinates: [
          27.9672,
          41.0381
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM814"
      },
      geometry: {
        coordinates: [
          27.975,
          40.9197
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM815"
      },
      geometry: {
        coordinates: [
          28.1044,
          40.9392
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM816"
      },
      geometry: {
        coordinates: [
          28.2339,
          40.9589
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM817"
      },
      geometry: {
        coordinates: [
          28.3636,
          40.9781
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM852"
      },
      geometry: {
        coordinates: [
          27.2286,
          41.6925
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM853"
      },
      geometry: {
        coordinates: [
          27.3378,
          41.5742
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM854"
      },
      geometry: {
        coordinates: [
          27.5036,
          41.66
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM855"
      },
      geometry: {
        coordinates: [
          27.67,
          41.7453
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM856"
      },
      geometry: {
        coordinates: [
          27.7931,
          41.7942
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM857"
      },
      geometry: {
        coordinates: [
          27.9656,
          41.7603
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM860"
      },
      geometry: {
        coordinates: [
          27.6261,
          41.6419
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM861"
      },
      geometry: {
        coordinates: [
          27.9536,
          41.5236
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM862"
      },
      geometry: {
        coordinates: [
          27.9939,
          41.4092
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM863"
      },
      geometry: {
        coordinates: [
          28.0767,
          41.3086
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM864"
      },
      geometry: {
        coordinates: [
          28.1944,
          41.2306
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM865"
      },
      geometry: {
        coordinates: [
          28.2664,
          41.3147
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM866"
      },
      geometry: {
        coordinates: [
          28.3386,
          41.3986
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM867"
      },
      geometry: {
        coordinates: [
          28.4108,
          41.4828
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM917"
      },
      geometry: {
        coordinates: [
          28.9261,
          41.6483
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM955"
      },
      geometry: {
        coordinates: [
          28.51,
          41.9183
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FM956"
      },
      geometry: {
        coordinates: [
          28.205,
          41.8906
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FOCSA"
      },
      geometry: {
        coordinates: [
          26.6897,
          45.9947
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "FSK"
      },
      geometry: {
        coordinates: [
          22.9914,
          41.0986
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GAKSU"
      },
      geometry: {
        coordinates: [
          33.8142,
          42.1892
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GALIM"
      },
      geometry: {
        coordinates: [
          34.9667,
          32.8333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GALMI"
      },
      geometry: {
        coordinates: [
          30.0256,
          44.1333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GAMAN"
      },
      geometry: {
        coordinates: [
          36.5917,
          45
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GAP"
      },
      geometry: {
        coordinates: [
          38.9047,
          37.4581
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GAPDI"
      },
      geometry: {
        coordinates: [
          28.7322,
          41.0283
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GAPVO"
      },
      geometry: {
        coordinates: [
          24.1456,
          42.6817
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GAPXA"
      },
      geometry: {
        coordinates: [
          38.8833,
          37.4344
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GAPXD"
      },
      geometry: {
        coordinates: [
          38.9133,
          37.4614
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GASNI"
      },
      geometry: {
        coordinates: [
          45.7,
          43.3886
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GASRU"
      },
      geometry: {
        coordinates: [
          26.0994,
          42.2511
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GAYEM"
      },
      geometry: {
        coordinates: [
          29.63,
          41.0458
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GAZ"
      },
      geometry: {
        coordinates: [
          37.4728,
          36.9514
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GAZXA"
      },
      geometry: {
        coordinates: [
          37.4944,
          36.9444
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GAZXD"
      },
      geometry: {
        coordinates: [
          37.4633,
          36.9511
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GDR"
      },
      geometry: {
        coordinates: [
          43.8861,
          39.9725
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GEGSA"
      },
      geometry: {
        coordinates: [
          43.4014,
          43.4953
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GELBU"
      },
      geometry: {
        coordinates: [
          27.1408,
          40.9353
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GELIN"
      },
      geometry: {
        coordinates: [
          40.7858,
          39.6981
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GELKI"
      },
      geometry: {
        coordinates: [
          31.6808,
          36.5786
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GELSU"
      },
      geometry: {
        coordinates: [
          40.5569,
          39.5583
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GEM"
      },
      geometry: {
        coordinates: [
          36.0286,
          39.1542
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GENDO"
      },
      geometry: {
        coordinates: [
          24.7947,
          36.9214
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GENOS"
      },
      geometry: {
        coordinates: [
          31.9011,
          34.6789
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GEPAP"
      },
      geometry: {
        coordinates: [
          42.4808,
          33.8183
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GERGI"
      },
      geometry: {
        coordinates: [
          25.5219,
          42.1833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GERMI"
      },
      geometry: {
        coordinates: [
          23.1244,
          38.1656
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GERZE"
      },
      geometry: {
        coordinates: [
          35.1661,
          41.8322
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GESAD"
      },
      geometry: {
        coordinates: [
          28.335,
          32.9447
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GESBA"
      },
      geometry: {
        coordinates: [
          21.79,
          45.9228
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GETKO"
      },
      geometry: {
        coordinates: [
          40.5383,
          40.4547
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GIBUX"
      },
      geometry: {
        coordinates: [
          41.1833,
          33.0833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GIDRO"
      },
      geometry: {
        coordinates: [
          28.7342,
          45.8219
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GIKAS"
      },
      geometry: {
        coordinates: [
          24.6669,
          39.4997
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GIKUN"
      },
      geometry: {
        coordinates: [
          23.6364,
          44.6703
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GILAB"
      },
      geometry: {
        coordinates: [
          49.26,
          40.1883
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GILOS"
      },
      geometry: {
        coordinates: [
          26.9003,
          36.4875
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GIMUR"
      },
      geometry: {
        coordinates: [
          44.1322,
          42.0167
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GINAM"
      },
      geometry: {
        coordinates: [
          21.3764,
          43.3086
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GINLI"
      },
      geometry: {
        coordinates: [
          28.7744,
          41.8711
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GIPAR"
      },
      geometry: {
        coordinates: [
          47.5867,
          41.2183
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GIPAS"
      },
      geometry: {
        coordinates: [
          31.8111,
          33.6933
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GIPDA"
      },
      geometry: {
        coordinates: [
          32.2047,
          42.2469
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GIRET"
      },
      geometry: {
        coordinates: [
          39.4853,
          43.7231
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GIRNO"
      },
      geometry: {
        coordinates: [
          33.2544,
          41.0172
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GISOS"
      },
      geometry: {
        coordinates: [
          29.0058,
          35.0047
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GITGI"
      },
      geometry: {
        coordinates: [
          28.5914,
          40.9919
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GITMU"
      },
      geometry: {
        coordinates: [
          21.3144,
          45.8969
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GITVO"
      },
      geometry: {
        coordinates: [
          28.6083,
          41.67
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GIVEV"
      },
      geometry: {
        coordinates: [
          32.2839,
          42.0778
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GIVIS"
      },
      geometry: {
        coordinates: [
          25.405,
          36.1231
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GIVMO"
      },
      geometry: {
        coordinates: [
          49.4647,
          40.57
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GKA"
      },
      geometry: {
        coordinates: [
          25.9236,
          40.1797
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GLT"
      },
      geometry: {
        coordinates: [
          27.9278,
          45.4164
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GND"
      },
      geometry: {
        coordinates: [
          46.2956,
          40.7536
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GNV"
      },
      geometry: {
        coordinates: [
          38.0122,
          44.5725
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GOBIT"
      },
      geometry: {
        coordinates: [
          33.8869,
          39.7761
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GODEK"
      },
      geometry: {
        coordinates: [
          22.9894,
          43.1267
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GODNA"
      },
      geometry: {
        coordinates: [
          46.9158,
          38.3425
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GOGAR"
      },
      geometry: {
        coordinates: [
          23.9211,
          43.3889
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GOGOL"
      },
      geometry: {
        coordinates: [
          44.9992,
          40.1319
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GOKIN"
      },
      geometry: {
        coordinates: [
          39.2967,
          43.1483
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GOKPA"
      },
      geometry: {
        coordinates: [
          34.5947,
          41.7461
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GOKSU"
      },
      geometry: {
        coordinates: [
          41.8797,
          39.4928
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GOL"
      },
      geometry: {
        coordinates: [
          24.2206,
          43.095
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GOLDO"
      },
      geometry: {
        coordinates: [
          26.2494,
          40.8822
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GONGO"
      },
      geometry: {
        coordinates: [
          27.0325,
          43.0981
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GONPU"
      },
      geometry: {
        coordinates: [
          41.9606,
          41.3006
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GONVA"
      },
      geometry: {
        coordinates: [
          48.6789,
          36.0992
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GORAK"
      },
      geometry: {
        coordinates: [
          45.0819,
          43.4997
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GORUN"
      },
      geometry: {
        coordinates: [
          26.7519,
          46.2322
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GOSEX"
      },
      geometry: {
        coordinates: [
          25.1914,
          35.7003
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GOSIS"
      },
      geometry: {
        coordinates: [
          44.9861,
          39.9472
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GOSLO"
      },
      geometry: {
        coordinates: [
          28.4419,
          43.5286
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GOSTI"
      },
      geometry: {
        coordinates: [
          21.1083,
          41.8117
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GOTIK"
      },
      geometry: {
        coordinates: [
          46.0403,
          43.4897
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GOTUB"
      },
      geometry: {
        coordinates: [
          48.8572,
          40.1872
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GOVGU"
      },
      geometry: {
        coordinates: [
          28.4608,
          41.6717
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GOVOK"
      },
      geometry: {
        coordinates: [
          21.5758,
          40.3633
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GRM"
      },
      geometry: {
        coordinates: [
          43.8361,
          40.7306
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GRM01"
      },
      geometry: {
        coordinates: [
          43.8875,
          40.5722
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GRN"
      },
      geometry: {
        coordinates: [
          25.7325,
          43.1589
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GSB"
      },
      geometry: {
        coordinates: [
          41.6219,
          42.5922
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GUBOR"
      },
      geometry: {
        coordinates: [
          40.7103,
          43.8814
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GUBUL"
      },
      geometry: {
        coordinates: [
          27.3128,
          40.7386
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GUDIS"
      },
      geometry: {
        coordinates: [
          27.7661,
          34.5356
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GUDOK"
      },
      geometry: {
        coordinates: [
          43.6986,
          45.4831
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GUDSU"
      },
      geometry: {
        coordinates: [
          28.5306,
          40.7978
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GULMO"
      },
      geometry: {
        coordinates: [
          36.7333,
          42.0042
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GULRA"
      },
      geometry: {
        coordinates: [
          38.2794,
          40.3797
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GUMRU"
      },
      geometry: {
        coordinates: [
          31.3494,
          41.5489
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GURBU"
      },
      geometry: {
        coordinates: [
          33.8328,
          40.1683
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GURSA"
      },
      geometry: {
        coordinates: [
          26.1211,
          44.5072
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GUSLI"
      },
      geometry: {
        coordinates: [
          43.2839,
          42.9183
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "GZP"
      },
      geometry: {
        coordinates: [
          32.2972,
          36.3042
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "HAKAN"
      },
      geometry: {
        coordinates: [
          32.2983,
          41.7233
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "HALIL"
      },
      geometry: {
        coordinates: [
          32.3578,
          39.3906
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "HANKO"
      },
      geometry: {
        coordinates: [
          30.2661,
          39.4989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "HAS"
      },
      geometry: {
        coordinates: [
          40.7544,
          36.4828
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "HAVZA"
      },
      geometry: {
        coordinates: [
          35.9286,
          41.0925
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "HAY"
      },
      geometry: {
        coordinates: [
          32.5094,
          39.4364
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "HAZAR"
      },
      geometry: {
        coordinates: [
          39.4322,
          38.5325
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "HISAR"
      },
      geometry: {
        coordinates: [
          31.5411,
          38.1156
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "HOCAM"
      },
      geometry: {
        coordinates: [
          40.82,
          40.2458
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "HOS"
      },
      geometry: {
        coordinates: [
          26.1428,
          38.3494
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "HTY"
      },
      geometry: {
        coordinates: [
          36.29,
          36.3628
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IBERI"
      },
      geometry: {
        coordinates: [
          41.7217,
          42.1608
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IBINU"
      },
      geometry: {
        coordinates: [
          23.2789,
          45.9181
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IBISI"
      },
      geometry: {
        coordinates: [
          21.6839,
          42.9581
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IBLAL"
      },
      geometry: {
        coordinates: [
          28.0011,
          41.9822
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IBNAR"
      },
      geometry: {
        coordinates: [
          28.7286,
          45.5322
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IBODU"
      },
      geometry: {
        coordinates: [
          27.0789,
          41.5544
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IBROK"
      },
      geometry: {
        coordinates: [
          32.255,
          44.2067
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IBURA"
      },
      geometry: {
        coordinates: [
          33.3736,
          41.0175
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IDABO"
      },
      geometry: {
        coordinates: [
          21.0294,
          43.9975
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IDAKU"
      },
      geometry: {
        coordinates: [
          32.6994,
          34.0853
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IDARU"
      },
      geometry: {
        coordinates: [
          26.9817,
          44.6403
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IDILO"
      },
      geometry: {
        coordinates: [
          25.4394,
          40.7906
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IDLER"
      },
      geometry: {
        coordinates: [
          40.1458,
          42.4903
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IDOMO"
      },
      geometry: {
        coordinates: [
          24.8139,
          43.8044
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IKARO"
      },
      geometry: {
        coordinates: [
          26.3311,
          37.8664
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ILHAN"
      },
      geometry: {
        coordinates: [
          33.7036,
          40.4439
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ILM"
      },
      geometry: {
        coordinates: [
          46.4167,
          33.5833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IMR"
      },
      geometry: {
        coordinates: [
          27.0072,
          38.3172
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IMRXA"
      },
      geometry: {
        coordinates: [
          27.1611,
          38.2781
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IMRXD"
      },
      geometry: {
        coordinates: [
          27.1525,
          38.3064
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "INA"
      },
      geometry: {
        coordinates: [
          28.7489,
          41.2564
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "INAXD"
      },
      geometry: {
        coordinates: [
          28.75,
          41.2925
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "INB"
      },
      geometry: {
        coordinates: [
          33.7061,
          41.9514
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "INBAK"
      },
      geometry: {
        coordinates: [
          34.3472,
          44.3722
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "INBAT"
      },
      geometry: {
        coordinates: [
          42.7083,
          39.7025
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "INBET"
      },
      geometry: {
        coordinates: [
          27.275,
          40.1867
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "INBOL"
      },
      geometry: {
        coordinates: [
          23.8039,
          43.4708
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "INDUR"
      },
      geometry: {
        coordinates: [
          43.6647,
          40.1156
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "INGAM"
      },
      geometry: {
        coordinates: [
          36.9986,
          37.4433
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "INKOM"
      },
      geometry: {
        coordinates: [
          30.64,
          43.2533
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "INLAP"
      },
      geometry: {
        coordinates: [
          43.7458,
          37.6836
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "INLEV"
      },
      geometry: {
        coordinates: [
          37.0881,
          37.2594
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "INPOR"
      },
      geometry: {
        coordinates: [
          34.1033,
          36.675
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "INRUV"
      },
      geometry: {
        coordinates: [
          29.5336,
          40.7689
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "INSAN"
      },
      geometry: {
        coordinates: [
          49.3178,
          40.115
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "INSEG"
      },
      geometry: {
        coordinates: [
          29.6364,
          40.6614
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "INSER"
      },
      geometry: {
        coordinates: [
          38.9583,
          46.1814
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "INSTA"
      },
      geometry: {
        coordinates: [
          28.4833,
          41.5667
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "INTAB"
      },
      geometry: {
        coordinates: [
          39.1019,
          39.9406
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "INTEV"
      },
      geometry: {
        coordinates: [
          47.1494,
          40.8092
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IPDAL"
      },
      geometry: {
        coordinates: [
          38.0103,
          40.8842
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IPLED"
      },
      geometry: {
        coordinates: [
          49.5,
          43.3967
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IPMIL"
      },
      geometry: {
        coordinates: [
          26.9289,
          41.8975
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IPSAT"
      },
      geometry: {
        coordinates: [
          38.6058,
          41.1053
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IPT"
      },
      geometry: {
        coordinates: [
          30.3447,
          37.8422
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IPTAG"
      },
      geometry: {
        coordinates: [
          22.2453,
          37.3028
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IPTXA"
      },
      geometry: {
        coordinates: [
          30.3558,
          37.8475
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IPTXD"
      },
      geometry: {
        coordinates: [
          30.3819,
          37.865
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IRA"
      },
      geometry: {
        coordinates: [
          25.1853,
          35.3408
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IRA05"
      },
      geometry: {
        coordinates: [
          25.9178,
          35.3203
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IRA06"
      },
      geometry: {
        coordinates: [
          25.6786,
          35.6464
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IRBAX"
      },
      geometry: {
        coordinates: [
          28.4203,
          36.0869
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IRBEG"
      },
      geometry: {
        coordinates: [
          25.4281,
          36.8103
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IRDUM"
      },
      geometry: {
        coordinates: [
          29.3894,
          43.7233
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IRGAK"
      },
      geometry: {
        coordinates: [
          30.6178,
          38.2806
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IRGID"
      },
      geometry: {
        coordinates: [
          39.9136,
          43.7806
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IRKOT"
      },
      geometry: {
        coordinates: [
          23.9092,
          42.485
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IRLAN"
      },
      geometry: {
        coordinates: [
          45.4439,
          39.5114
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IRLOX"
      },
      geometry: {
        coordinates: [
          24.1839,
          45.6356
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IRMAM"
      },
      geometry: {
        coordinates: [
          28.7231,
          45.2253
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IST"
      },
      geometry: {
        coordinates: [
          28.8106,
          40.9614
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ISTXA"
      },
      geometry: {
        coordinates: [
          28.8058,
          40.9961
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ISTXD"
      },
      geometry: {
        coordinates: [
          28.8111,
          40.9661
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ITAKA"
      },
      geometry: {
        coordinates: [
          49.5,
          43.8667
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ITOVA"
      },
      geometry: {
        coordinates: [
          44.6914,
          33.3308
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IVANO"
      },
      geometry: {
        coordinates: [
          45.2097,
          35.29
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IVELI"
      },
      geometry: {
        coordinates: [
          48.4978,
          34.5831
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IVETI"
      },
      geometry: {
        coordinates: [
          32.7047,
          34.7419
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IVGOT"
      },
      geometry: {
        coordinates: [
          28.5364,
          43.105
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IVGUS"
      },
      geometry: {
        coordinates: [
          27.5778,
          40.5689
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IVNAP"
      },
      geometry: {
        coordinates: [
          31.2533,
          41.0908
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IXIMA"
      },
      geometry: {
        coordinates: [
          23.3569,
          36.8131
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IXODU"
      },
      geometry: {
        coordinates: [
          29.6875,
          40.6808
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IXONI"
      },
      geometry: {
        coordinates: [
          22.2322,
          38.315
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IXUKO"
      },
      geometry: {
        coordinates: [
          26.7675,
          42.6042
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "IZMAL"
      },
      geometry: {
        coordinates: [
          27.5119,
          40.1992
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KABAN"
      },
      geometry: {
        coordinates: [
          42.6497,
          37.2489
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KAD"
      },
      geometry: {
        coordinates: [
          35.4861,
          33.8075
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KAM"
      },
      geometry: {
        coordinates: [
          22.0239,
          37.0789
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KANAR"
      },
      geometry: {
        coordinates: [
          26.8917,
          32.4575
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KANGU"
      },
      geometry: {
        coordinates: [
          32.6289,
          40.0119
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KAPES"
      },
      geometry: {
        coordinates: [
          45.3344,
          37.4222
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KAR"
      },
      geometry: {
        coordinates: [
          43.1042,
          40.5567
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KARAT"
      },
      geometry: {
        coordinates: [
          39.2703,
          42.6814
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KARDE"
      },
      geometry: {
        coordinates: [
          37.0453,
          41.9039
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KAREM"
      },
      geometry: {
        coordinates: [
          38.0567,
          32.8528
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KARGI"
      },
      geometry: {
        coordinates: [
          30.0544,
          39.4292
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KAROL"
      },
      geometry: {
        coordinates: [
          32.4833,
          32.8667
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KATUT"
      },
      geometry: {
        coordinates: [
          45.5775,
          32.6269
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KAVAK"
      },
      geometry: {
        coordinates: [
          28.7328,
          37.3572
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KAVOS"
      },
      geometry: {
        coordinates: [
          30,
          33.7333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KEA"
      },
      geometry: {
        coordinates: [
          24.2986,
          37.5572
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KEKIK"
      },
      geometry: {
        coordinates: [
          28.3678,
          37.0786
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KEMER"
      },
      geometry: {
        coordinates: [
          34.7258,
          37.6008
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KENUX"
      },
      geometry: {
        coordinates: [
          26.7678,
          46.2922
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KEPES"
      },
      geometry: {
        coordinates: [
          36.7075,
          38.14
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KEPIR"
      },
      geometry: {
        coordinates: [
          24.6572,
          38.1686
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KEPOL"
      },
      geometry: {
        coordinates: [
          37.9883,
          43.0331
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KERMA"
      },
      geometry: {
        coordinates: [
          25.86,
          38.3686
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KESIR"
      },
      geometry: {
        coordinates: [
          41.4514,
          39.3153
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KETED"
      },
      geometry: {
        coordinates: [
          46.9644,
          45.7436
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KETEK"
      },
      geometry: {
        coordinates: [
          32.4783,
          36.8878
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KFK"
      },
      geometry: {
        coordinates: [
          30.5467,
          38.8039
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KHD"
      },
      geometry: {
        coordinates: [
          38.4567,
          37.7247
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KHM"
      },
      geometry: {
        coordinates: [
          36.9528,
          37.54
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KHY"
      },
      geometry: {
        coordinates: [
          44.9664,
          38.4336
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KILIS"
      },
      geometry: {
        coordinates: [
          37.4006,
          36.7036
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KINIK"
      },
      geometry: {
        coordinates: [
          29.9994,
          38.7322
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KISEL"
      },
      geometry: {
        coordinates: [
          43.6717,
          46.0031
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KISLA"
      },
      geometry: {
        coordinates: [
          34.3333,
          39.11
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KIT"
      },
      geometry: {
        coordinates: [
          23.0147,
          36.2767
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KIZIK"
      },
      geometry: {
        coordinates: [
          32.1494,
          40.4183
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KML"
      },
      geometry: {
        coordinates: [
          41.2053,
          37.0167
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KMS"
      },
      geometry: {
        coordinates: [
          47.1692,
          34.3397
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KND"
      },
      geometry: {
        coordinates: [
          39.17,
          45.035
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KOBER"
      },
      geometry: {
        coordinates: [
          34.1067,
          34.7436
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KOBON"
      },
      geometry: {
        coordinates: [
          40.1983,
          45.3497
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KODER"
      },
      geometry: {
        coordinates: [
          37.6336,
          32.55
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KODRU"
      },
      geometry: {
        coordinates: [
          28.1239,
          46.1922
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KOGAT"
      },
      geometry: {
        coordinates: [
          21.0556,
          42.1125
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KOGOS"
      },
      geometry: {
        coordinates: [
          22.0014,
          40.1211
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KOGUL"
      },
      geometry: {
        coordinates: [
          39.175,
          43.6
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KOLBA"
      },
      geometry: {
        coordinates: [
          42.5817,
          45.9497
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KOMAN"
      },
      geometry: {
        coordinates: [
          26.2167,
          43.9833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KON"
      },
      geometry: {
        coordinates: [
          32.5758,
          38.0144
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KONAK"
      },
      geometry: {
        coordinates: [
          31.4161,
          36.8947
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KONEN"
      },
      geometry: {
        coordinates: [
          27.2772,
          39.8117
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KONUK"
      },
      geometry: {
        coordinates: [
          39.4681,
          39.5117
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KONUL"
      },
      geometry: {
        coordinates: [
          48.8956,
          41.3606
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KONXA"
      },
      geometry: {
        coordinates: [
          32.5692,
          37.9939
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KOPAR"
      },
      geometry: {
        coordinates: [
          26.6886,
          36.8303
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KOR"
      },
      geometry: {
        coordinates: [
          22.9358,
          37.9303
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KOROS"
      },
      geometry: {
        coordinates: [
          24.9158,
          39.0997
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KOS"
      },
      geometry: {
        coordinates: [
          27.0783,
          36.7919
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KOS02"
      },
      geometry: {
        coordinates: [
          26.7217,
          36.9717
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KOSAK"
      },
      geometry: {
        coordinates: [
          31.5333,
          46.3167
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KOSEG"
      },
      geometry: {
        coordinates: [
          30.9067,
          34.1433
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KOTAN"
      },
      geometry: {
        coordinates: [
          46.4567,
          41.38
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KOVEM"
      },
      geometry: {
        coordinates: [
          34.3331,
          38.8769
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KOZ"
      },
      geometry: {
        coordinates: [
          21.8406,
          40.285
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KOZAN"
      },
      geometry: {
        coordinates: [
          37.1542,
          36.9542
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KOZLU"
      },
      geometry: {
        coordinates: [
          30.0744,
          37.4972
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KPC"
      },
      geometry: {
        coordinates: [
          27.1469,
          35.4219
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KPL"
      },
      geometry: {
        coordinates: [
          24.6147,
          40.9128
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KRASO"
      },
      geometry: {
        coordinates: [
          28.6556,
          40.91
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KRATO"
      },
      geometry: {
        coordinates: [
          22.1817,
          42.2183
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KRD"
      },
      geometry: {
        coordinates: [
          48.2919,
          33.4342
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KRO"
      },
      geometry: {
        coordinates: [
          24.495,
          37.9942
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KSR"
      },
      geometry: {
        coordinates: [
          35.5217,
          38.7756
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KSRXA"
      },
      geometry: {
        coordinates: [
          35.4703,
          38.795
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KSRXD"
      },
      geometry: {
        coordinates: [
          35.4903,
          38.7806
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KST"
      },
      geometry: {
        coordinates: [
          33.8,
          41.3503
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KST01"
      },
      geometry: {
        coordinates: [
          33.8556,
          41.3056
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KST02"
      },
      geometry: {
        coordinates: [
          33.8275,
          41.2678
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KST03"
      },
      geometry: {
        coordinates: [
          33.6772,
          41.275
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KSTXA"
      },
      geometry: {
        coordinates: [
          33.7972,
          41.3244
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KSTXD"
      },
      geometry: {
        coordinates: [
          33.7942,
          41.3042
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KTH"
      },
      geometry: {
        coordinates: [
          30.1367,
          39.1081
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KTS"
      },
      geometry: {
        coordinates: [
          42.4847,
          42.1758
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KUBER"
      },
      geometry: {
        coordinates: [
          33.6106,
          39.8322
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KUDAK"
      },
      geometry: {
        coordinates: [
          28.2767,
          39.2989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KUFAN"
      },
      geometry: {
        coordinates: [
          46.2856,
          41.955
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KUGOS"
      },
      geometry: {
        coordinates: [
          34.0878,
          42.7806
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KUKLA"
      },
      geometry: {
        coordinates: [
          34.7467,
          34.245
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KULAG"
      },
      geometry: {
        coordinates: [
          33.6194,
          44.9672
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KULAR"
      },
      geometry: {
        coordinates: [
          28.6328,
          38.5822
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KULED"
      },
      geometry: {
        coordinates: [
          40.565,
          45.4497
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KULEM"
      },
      geometry: {
        coordinates: [
          35.5183,
          43.9333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KULOL"
      },
      geometry: {
        coordinates: [
          31.5936,
          36.6831
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KULOM"
      },
      geometry: {
        coordinates: [
          41.4317,
          45.8164
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KUMAB"
      },
      geometry: {
        coordinates: [
          46.6736,
          45.7825
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KUMAN"
      },
      geometry: {
        coordinates: [
          27.8328,
          38.0317
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KUMBI"
      },
      geometry: {
        coordinates: [
          28.75,
          33.7139
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KUMLO"
      },
      geometry: {
        coordinates: [
          38.4689,
          32.97
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KUMRU"
      },
      geometry: {
        coordinates: [
          30.7328,
          37.4156
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KUNIP"
      },
      geometry: {
        coordinates: [
          44.3553,
          44.8664
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KUPAT"
      },
      geometry: {
        coordinates: [
          49.9631,
          39.8081
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KUPIL"
      },
      geometry: {
        coordinates: [
          33.5483,
          43.9128
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KUPIS"
      },
      geometry: {
        coordinates: [
          25.8986,
          36.2386
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KUSAL"
      },
      geometry: {
        coordinates: [
          35.9717,
          43.98
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KUTAY"
      },
      geometry: {
        coordinates: [
          29.6219,
          39.4617
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KUTON"
      },
      geometry: {
        coordinates: [
          38.315,
          44.2697
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KUXIL"
      },
      geometry: {
        coordinates: [
          29.005,
          37.4808
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "KZ"
      },
      geometry: {
        coordinates: [
          46.7139,
          43.8347
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LAB"
      },
      geometry: {
        coordinates: [
          22.0203,
          32.7781
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LABNA"
      },
      geometry: {
        coordinates: [
          30.27,
          32.3322
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LABUG"
      },
      geometry: {
        coordinates: [
          47.4586,
          45.3583
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LABUX"
      },
      geometry: {
        coordinates: [
          25.8589,
          35.5819
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LAGAS"
      },
      geometry: {
        coordinates: [
          44.2314,
          41.5719
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LAGIR"
      },
      geometry: {
        coordinates: [
          32.315,
          43.2933
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LAGLO"
      },
      geometry: {
        coordinates: [
          44.2492,
          33.2608
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LAGOL"
      },
      geometry: {
        coordinates: [
          32.9717,
          39.61
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LAKAD"
      },
      geometry: {
        coordinates: [
          28.4956,
          36.2339
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LAKLI"
      },
      geometry: {
        coordinates: [
          45.9219,
          37.625
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LAKTO"
      },
      geometry: {
        coordinates: [
          32.0833,
          32.6333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LALDA"
      },
      geometry: {
        coordinates: [
          49.7517,
          38.2683
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LAMET"
      },
      geometry: {
        coordinates: [
          39.0886,
          43.3497
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LAMIT"
      },
      geometry: {
        coordinates: [
          23.3747,
          45.1039
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LAMSA"
      },
      geometry: {
        coordinates: [
          29.9228,
          37.1108
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LAMUS"
      },
      geometry: {
        coordinates: [
          45.5233,
          41.5444
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LANVO"
      },
      geometry: {
        coordinates: [
          39.2919,
          39.9436
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LAPKA"
      },
      geometry: {
        coordinates: [
          26.5092,
          45.2928
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LAPMI"
      },
      geometry: {
        coordinates: [
          38.1231,
          43.3222
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LAPSO"
      },
      geometry: {
        coordinates: [
          27.2722,
          35.0517
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LAPTO"
      },
      geometry: {
        coordinates: [
          44.1886,
          42.6314
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LARAN"
      },
      geometry: {
        coordinates: [
          26.2794,
          44.58
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LARAT"
      },
      geometry: {
        coordinates: [
          23.8711,
          42.5017
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LARIN"
      },
      geometry: {
        coordinates: [
          43.0186,
          44.5997
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LARKI"
      },
      geometry: {
        coordinates: [
          26.8383,
          37.3989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LAROM"
      },
      geometry: {
        coordinates: [
          31.4433,
          44.31
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LASBU"
      },
      geometry: {
        coordinates: [
          24.0336,
          41.0142
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LASKA"
      },
      geometry: {
        coordinates: [
          49.5533,
          42.385
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LASON"
      },
      geometry: {
        coordinates: [
          27.4528,
          38.3847
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LASOR"
      },
      geometry: {
        coordinates: [
          34.9667,
          44.0383
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LASOS"
      },
      geometry: {
        coordinates: [
          33.3708,
          34.7125
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LATEB"
      },
      geometry: {
        coordinates: [
          36.4011,
          34.0317
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LATGA"
      },
      geometry: {
        coordinates: [
          32.0922,
          40.3314
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LATMO"
      },
      geometry: {
        coordinates: [
          28.3933,
          35.1386
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LATSU"
      },
      geometry: {
        coordinates: [
          41.4139,
          39.4208
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LAVTA"
      },
      geometry: {
        coordinates: [
          28.7033,
          37.7217
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LBWN"
      },
      geometry: {
        coordinates: [
          27.8253,
          43.2319
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LCA"
      },
      geometry: {
        coordinates: [
          33.6297,
          34.8917
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LCA01"
      },
      geometry: {
        coordinates: [
          33.5492,
          34.8308
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LCAXD"
      },
      geometry: {
        coordinates: [
          33.62,
          34.88
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LEBOR"
      },
      geometry: {
        coordinates: [
          36.5831,
          34.2656
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LECKI"
      },
      geometry: {
        coordinates: [
          29.8736,
          40.6281
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LEDRA"
      },
      geometry: {
        coordinates: [
          33.05,
          33.2
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LEGDO"
      },
      geometry: {
        coordinates: [
          41.1372,
          40.835
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LEGMU"
      },
      geometry: {
        coordinates: [
          31.5892,
          41.9475
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LEGNA"
      },
      geometry: {
        coordinates: [
          41.505,
          45.3214
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LEKBA"
      },
      geometry: {
        coordinates: [
          48.7383,
          41.5267
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LEKMI"
      },
      geometry: {
        coordinates: [
          27.295,
          40.4769
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LEKPI"
      },
      geometry: {
        coordinates: [
          39.4783,
          44.5247
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LEKPO"
      },
      geometry: {
        coordinates: [
          23.1619,
          40.1128
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LEKRO"
      },
      geometry: {
        coordinates: [
          40.9714,
          37.2772
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LELOT"
      },
      geometry: {
        coordinates: [
          45.2153,
          43.5997
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LELTI"
      },
      geometry: {
        coordinates: [
          23.4256,
          44.2944
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LEMDA"
      },
      geometry: {
        coordinates: [
          30.6569,
          37.9822
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LEMPA"
      },
      geometry: {
        coordinates: [
          28.4353,
          44.7269
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LEMTO"
      },
      geometry: {
        coordinates: [
          33.5417,
          45.4906
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LENIR"
      },
      geometry: {
        coordinates: [
          40.015,
          45.4331
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LENKA"
      },
      geometry: {
        coordinates: [
          35.7883,
          45.3633
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LESGI"
      },
      geometry: {
        coordinates: [
          49.3431,
          40.885
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LESRI"
      },
      geometry: {
        coordinates: [
          41.2303,
          37.0722
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LETBU"
      },
      geometry: {
        coordinates: [
          32.0692,
          41.1325
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LETNI"
      },
      geometry: {
        coordinates: [
          22.6058,
          42.0969
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LETSO"
      },
      geometry: {
        coordinates: [
          25.6583,
          37.4575
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LEU"
      },
      geometry: {
        coordinates: [
          34.2589,
          44.8356
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LEVTA"
      },
      geometry: {
        coordinates: [
          26.4097,
          44.5894
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LEYLA"
      },
      geometry: {
        coordinates: [
          47.9803,
          41.1092
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LGP"
      },
      geometry: {
        coordinates: [
          25.125,
          37.0186
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LHA"
      },
      geometry: {
        coordinates: [
          35.0303,
          32.8069
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LIAKI"
      },
      geometry: {
        coordinates: [
          27.1847,
          35.1289
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LIDMU"
      },
      geometry: {
        coordinates: [
          29.7044,
          40.7347
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LIMAS"
      },
      geometry: {
        coordinates: [
          37.82,
          44.2081
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LIMTI"
      },
      geometry: {
        coordinates: [
          47.3967,
          40.74
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LINGI"
      },
      geometry: {
        coordinates: [
          24.5456,
          34.5119
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LINRO"
      },
      geometry: {
        coordinates: [
          27.6994,
          35.9656
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LIPMA"
      },
      geometry: {
        coordinates: [
          38.5792,
          37.6525
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LITVA"
      },
      geometry: {
        coordinates: [
          35.0558,
          32.4131
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LIVDO"
      },
      geometry: {
        coordinates: [
          42.4139,
          38.2614
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LMO"
      },
      geometry: {
        coordinates: [
          25.2372,
          39.9194
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LOBIN"
      },
      geometry: {
        coordinates: [
          43.1072,
          42.1817
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LOBKI"
      },
      geometry: {
        coordinates: [
          28.9158,
          45.1781
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LODBI"
      },
      geometry: {
        coordinates: [
          37.6233,
          43.5114
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LODNA"
      },
      geometry: {
        coordinates: [
          43.2469,
          42.995
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LOKNA"
      },
      geometry: {
        coordinates: [
          27.5983,
          36.1794
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LOMOS"
      },
      geometry: {
        coordinates: [
          23.25,
          43.8333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LONOR"
      },
      geometry: {
        coordinates: [
          45.0828,
          32.6442
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LONTA"
      },
      geometry: {
        coordinates: [
          21.3972,
          42.1594
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LOPOS"
      },
      geometry: {
        coordinates: [
          22.5003,
          40.2908
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LOPTI"
      },
      geometry: {
        coordinates: [
          24.4342,
          41.1953
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LORKO"
      },
      geometry: {
        coordinates: [
          29.765,
          36.8069
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LOTAX"
      },
      geometry: {
        coordinates: [
          36.54,
          33.9833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LOVEK"
      },
      geometry: {
        coordinates: [
          44.6669,
          32.3689
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LOVID"
      },
      geometry: {
        coordinates: [
          47.4781,
          35.1278
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LRC"
      },
      geometry: {
        coordinates: [
          23.9436,
          44.3214
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LSA"
      },
      geometry: {
        coordinates: [
          22.4625,
          39.645
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LSV"
      },
      geometry: {
        coordinates: [
          26.4253,
          39.2314
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTA"
      },
      geometry: {
        coordinates: [
          35.5675,
          40.8028
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTAB"
      },
      geometry: {
        coordinates: [
          32.7408,
          39.9353
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTAC"
      },
      geometry: {
        coordinates: [
          32.995,
          40.1281
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTAD"
      },
      geometry: {
        coordinates: [
          32.685,
          39.9522
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTADT"
      },
      geometry: {
        coordinates: [
          32.6847,
          39.9519
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTAE"
      },
      geometry: {
        coordinates: [
          32.5656,
          40.0789
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTAF"
      },
      geometry: {
        coordinates: [
          35.2803,
          36.9822
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTAG"
      },
      geometry: {
        coordinates: [
          35.4331,
          36.9989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTAH"
      },
      geometry: {
        coordinates: [
          30.6031,
          38.7258
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTAI"
      },
      geometry: {
        coordinates: [
          30.7928,
          36.9003
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTAJ"
      },
      geometry: {
        coordinates: [
          37.4789,
          36.9478
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTAL"
      },
      geometry: {
        coordinates: [
          33.7961,
          41.3169
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTAN"
      },
      geometry: {
        coordinates: [
          32.5625,
          37.9806
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTAO"
      },
      geometry: {
        coordinates: [
          38.2519,
          38.3522
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTAP"
      },
      geometry: {
        coordinates: [
          35.5222,
          40.8294
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTAR"
      },
      geometry: {
        coordinates: [
          36.9025,
          39.8142
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTAS"
      },
      geometry: {
        coordinates: [
          32.0897,
          41.5069
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTAT"
      },
      geometry: {
        coordinates: [
          38.0831,
          38.4322
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTAU"
      },
      geometry: {
        coordinates: [
          35.4953,
          38.7703
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTAW"
      },
      geometry: {
        coordinates: [
          36.3736,
          40.3117
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTAXA"
      },
      geometry: {
        coordinates: [
          35.5672,
          40.8025
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTAXD"
      },
      geometry: {
        coordinates: [
          35.5186,
          40.8175
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTAY"
      },
      geometry: {
        coordinates: [
          29.705,
          37.7878
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTAZ"
      },
      geometry: {
        coordinates: [
          34.5267,
          38.7753
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTBA"
      },
      geometry: {
        coordinates: [
          28.8142,
          40.9761
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTBD"
      },
      geometry: {
        coordinates: [
          27.8881,
          37.8153
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTBF"
      },
      geometry: {
        coordinates: [
          27.9278,
          39.6192
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTBFT"
      },
      geometry: {
        coordinates: [
          27.9242,
          39.62
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTBG"
      },
      geometry: {
        coordinates: [
          27.9725,
          40.3214
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTBGT"
      },
      geometry: {
        coordinates: [
          27.9747,
          40.3197
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTBH"
      },
      geometry: {
        coordinates: [
          26.4278,
          40.1383
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTBI"
      },
      geometry: {
        coordinates: [
          30.5828,
          39.7822
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTBJ"
      },
      geometry: {
        coordinates: [
          27.155,
          38.2892
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTBK"
      },
      geometry: {
        coordinates: [
          27.1597,
          38.32
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTBL"
      },
      geometry: {
        coordinates: [
          27.01,
          38.5267
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTBN"
      },
      geometry: {
        coordinates: [
          30.0169,
          39.4267
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTBO"
      },
      geometry: {
        coordinates: [
          29.4717,
          38.6814
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTBP"
      },
      geometry: {
        coordinates: [
          29.3761,
          40.6883
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTBQ"
      },
      geometry: {
        coordinates: [
          30.0833,
          40.735
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTBR"
      },
      geometry: {
        coordinates: [
          29.5619,
          40.2558
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTBS"
      },
      geometry: {
        coordinates: [
          28.7914,
          36.7125
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTBT"
      },
      geometry: {
        coordinates: [
          27.8344,
          38.8094
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTBU"
      },
      geometry: {
        coordinates: [
          27.9064,
          41.1294
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTBV"
      },
      geometry: {
        coordinates: [
          27.6697,
          37.1403
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTBW"
      },
      geometry: {
        coordinates: [
          28.55,
          41.1069
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTBX"
      },
      geometry: {
        coordinates: [
          29.2161,
          40.9906
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTBY"
      },
      geometry: {
        coordinates: [
          30.5206,
          39.8125
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTBZ"
      },
      geometry: {
        coordinates: [
          30.1303,
          39.1114
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTCA"
      },
      geometry: {
        coordinates: [
          39.2814,
          38.5978
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTCB"
      },
      geometry: {
        coordinates: [
          38.0819,
          40.9672
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTCC"
      },
      geometry: {
        coordinates: [
          40.2011,
          37.8925
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTCD"
      },
      geometry: {
        coordinates: [
          39.5206,
          39.7131
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTCE"
      },
      geometry: {
        coordinates: [
          41.1706,
          39.9558
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTCF"
      },
      geometry: {
        coordinates: [
          43.0989,
          40.5586
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTCG"
      },
      geometry: {
        coordinates: [
          39.7853,
          40.9958
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTCI"
      },
      geometry: {
        coordinates: [
          43.3322,
          38.4681
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTCJ"
      },
      geometry: {
        coordinates: [
          41.1164,
          37.9322
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTCK"
      },
      geometry: {
        coordinates: [
          41.6689,
          38.7447
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTCL"
      },
      geometry: {
        coordinates: [
          41.8392,
          37.9781
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTCM"
      },
      geometry: {
        coordinates: [
          35.0664,
          42.0158
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTCN"
      },
      geometry: {
        coordinates: [
          36.9519,
          37.5383
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTCO"
      },
      geometry: {
        coordinates: [
          43.0286,
          39.6475
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTCP"
      },
      geometry: {
        coordinates: [
          38.4692,
          37.7322
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTCR"
      },
      geometry: {
        coordinates: [
          40.6406,
          37.2328
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTCS"
      },
      geometry: {
        coordinates: [
          38.9083,
          37.4567
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTCT"
      },
      geometry: {
        coordinates: [
          43.8783,
          39.9756
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTCU"
      },
      geometry: {
        coordinates: [
          40.5925,
          38.8611
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTCV"
      },
      geometry: {
        coordinates: [
          42.06,
          37.3639
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTCW"
      },
      geometry: {
        coordinates: [
          44.2536,
          37.5431
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTD00"
      },
      geometry: {
        coordinates: [
          38.3736,
          38.4722
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTDA"
      },
      geometry: {
        coordinates: [
          36.2986,
          36.3722
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTFA"
      },
      geometry: {
        coordinates: [
          26.9772,
          38.5175
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTFB"
      },
      geometry: {
        coordinates: [
          27.3303,
          37.9506
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTFD"
      },
      geometry: {
        coordinates: [
          27.0283,
          39.5544
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTFDT"
      },
      geometry: {
        coordinates: [
          27.0172,
          39.5639
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTFE"
      },
      geometry: {
        coordinates: [
          27.6814,
          37.2472
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTFG"
      },
      geometry: {
        coordinates: [
          32.3014,
          36.2994
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTFH"
      },
      geometry: {
        coordinates: [
          36.5486,
          41.2656
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTFJ"
      },
      geometry: {
        coordinates: [
          29.3092,
          40.8983
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTFK"
      },
      geometry: {
        coordinates: [
          25.8817,
          40.2
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTFM"
      },
      geometry: {
        coordinates: [
          28.7519,
          41.2753
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTHA"
      },
      geometry: {
        coordinates: [
          32.8433,
          39.8033
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LTHB"
      },
      geometry: {
        coordinates: [
          40.2953,
          37.9381
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LUBAM"
      },
      geometry: {
        coordinates: [
          36.5333,
          35.6667
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LUBES"
      },
      geometry: {
        coordinates: [
          32.7433,
          34.92
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LUGEB"
      },
      geometry: {
        coordinates: [
          28.5011,
          43.7356
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LUKOV"
      },
      geometry: {
        coordinates: [
          23.8061,
          43.2847
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LUMEX"
      },
      geometry: {
        coordinates: [
          42.4692,
          40.6525
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LUMOM"
      },
      geometry: {
        coordinates: [
          44.8233,
          37.27
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LUNAT"
      },
      geometry: {
        coordinates: [
          33.52,
          44.2933
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LUPUK"
      },
      geometry: {
        coordinates: [
          29.6128,
          44.4128
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LURAS"
      },
      geometry: {
        coordinates: [
          37.785,
          43.4781
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LURIS"
      },
      geometry: {
        coordinates: [
          45.7686,
          42.4236
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LURUS"
      },
      geometry: {
        coordinates: [
          26.5169,
          36.8892
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LUSAL"
      },
      geometry: {
        coordinates: [
          47.95,
          40.5833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LUTAM"
      },
      geometry: {
        coordinates: [
          38.5231,
          37.325
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LUTFU"
      },
      geometry: {
        coordinates: [
          28.1833,
          39.9394
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LUTIN"
      },
      geometry: {
        coordinates: [
          45.0367,
          46.03
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LUUPU"
      },
      geometry: {
        coordinates: [
          32.2383,
          41.9094
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "LWSK"
      },
      geometry: {
        coordinates: [
          21.6214,
          41.9617
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MABEK"
      },
      geometry: {
        coordinates: [
          44.455,
          43.4344
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MADEX"
      },
      geometry: {
        coordinates: [
          25.3983,
          36.6531
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MAGIS"
      },
      geometry: {
        coordinates: [
          30,
          34.5833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MAGRI"
      },
      geometry: {
        coordinates: [
          46.3833,
          38.9022
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MAKED"
      },
      geometry: {
        coordinates: [
          22.5167,
          41.1292
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MAKOL"
      },
      geometry: {
        coordinates: [
          29.1428,
          42.1706
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MANAV"
      },
      geometry: {
        coordinates: [
          31.3578,
          36.6989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MANAZ"
      },
      geometry: {
        coordinates: [
          34.4114,
          36.9147
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MANOK"
      },
      geometry: {
        coordinates: [
          24.0394,
          36.405
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MAPUT"
      },
      geometry: {
        coordinates: [
          34.3967,
          43.5667
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MARAT"
      },
      geometry: {
        coordinates: [
          43.6203,
          43.8464
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MARIK"
      },
      geometry: {
        coordinates: [
          26.0883,
          38.6
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MARIS"
      },
      geometry: {
        coordinates: [
          28.2828,
          36.8989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MARMA"
      },
      geometry: {
        coordinates: [
          27.6489,
          40.5272
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MAROS"
      },
      geometry: {
        coordinates: [
          30.8833,
          34.6167
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MARTI"
      },
      geometry: {
        coordinates: [
          35.1828,
          39.4017
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MASES"
      },
      geometry: {
        coordinates: [
          26.9783,
          35.8239
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MATAL"
      },
      geometry: {
        coordinates: [
          45.5022,
          40.7686
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MATEL"
      },
      geometry: {
        coordinates: [
          28.7919,
          43.0592
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MAVES"
      },
      geometry: {
        coordinates: [
          39.2275,
          37.5628
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MAVIT"
      },
      geometry: {
        coordinates: [
          21.3083,
          45.24
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MAXAK"
      },
      geometry: {
        coordinates: [
          44.6778,
          40.3611
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MAXOV"
      },
      geometry: {
        coordinates: [
          27.8386,
          43.6092
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MEDEM"
      },
      geometry: {
        coordinates: [
          27.9717,
          42.395
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MEGES"
      },
      geometry: {
        coordinates: [
          44.1453,
          43.6314
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MEGID"
      },
      geometry: {
        coordinates: [
          35.2483,
          32.5867
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MELLI"
      },
      geometry: {
        coordinates: [
          32.5814,
          40.3125
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MERAM"
      },
      geometry: {
        coordinates: [
          33.2869,
          36.0364
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MERVA"
      },
      geometry: {
        coordinates: [
          34.5439,
          32.7817
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MES"
      },
      geometry: {
        coordinates: [
          25.9058,
          38.2517
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "METRU"
      },
      geometry: {
        coordinates: [
          25.15,
          34
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MICPO"
      },
      geometry: {
        coordinates: [
          23.5647,
          41.2331
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MIL"
      },
      geometry: {
        coordinates: [
          24.5194,
          36.7475
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MILAS"
      },
      geometry: {
        coordinates: [
          27.6419,
          37.1678
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MILBA"
      },
      geometry: {
        coordinates: [
          36.4794,
          36.9514
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MIMTO"
      },
      geometry: {
        coordinates: [
          33.0467,
          41.8469
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MINSU"
      },
      geometry: {
        coordinates: [
          28.0561,
          39.0844
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MISRO"
      },
      geometry: {
        coordinates: [
          29.8011,
          39.9528
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MIVAK"
      },
      geometry: {
        coordinates: [
          49.89,
          35.9875
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MIVDI"
      },
      geometry: {
        coordinates: [
          27.7414,
          40.7956
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MIVKO"
      },
      geometry: {
        coordinates: [
          48.6183,
          40.0433
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MIVSA"
      },
      geometry: {
        coordinates: [
          21.4731,
          45.9056
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MKL"
      },
      geometry: {
        coordinates: [
          47.6456,
          42.8211
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MKN"
      },
      geometry: {
        coordinates: [
          25.3444,
          37.4403
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MOBIT"
      },
      geometry: {
        coordinates: [
          38.735,
          43.9397
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MOBLU"
      },
      geometry: {
        coordinates: [
          29.4472,
          44.1961
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MOBRA"
      },
      geometry: {
        coordinates: [
          24.8194,
          45.8644
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MODAD"
      },
      geometry: {
        coordinates: [
          38.6939,
          32.5944
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MODAU"
      },
      geometry: {
        coordinates: [
          31.8858,
          42.0092
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MODIK"
      },
      geometry: {
        coordinates: [
          39.0167,
          33.4683
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MOKIS"
      },
      geometry: {
        coordinates: [
          26.7744,
          35.2839
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MOLIK"
      },
      geometry: {
        coordinates: [
          39.4483,
          44.3664
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MONUV"
      },
      geometry: {
        coordinates: [
          23.5003,
          36.1203
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MOPIN"
      },
      geometry: {
        coordinates: [
          29.7106,
          41.4647
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MOREK"
      },
      geometry: {
        coordinates: [
          23.3192,
          42.2919
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MOTEG"
      },
      geometry: {
        coordinates: [
          48.45,
          41.6767
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MOVUL"
      },
      geometry: {
        coordinates: [
          39.2319,
          38.1528
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MRD"
      },
      geometry: {
        coordinates: [
          40.6386,
          37.2278
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MURPU"
      },
      geometry: {
        coordinates: [
          48.0553,
          37.5119
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MUS"
      },
      geometry: {
        coordinates: [
          41.6608,
          38.7494
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MUT"
      },
      geometry: {
        coordinates: [
          33.2917,
          36.8628
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "MUTAG"
      },
      geometry: {
        coordinates: [
          43.6428,
          34.5008
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NADEK"
      },
      geometry: {
        coordinates: [
          37.2414,
          32.4578
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NAHUM"
      },
      geometry: {
        coordinates: [
          28.1639,
          40.8372
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NALOB"
      },
      geometry: {
        coordinates: [
          37.6106,
          43.9472
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NAMAN"
      },
      geometry: {
        coordinates: [
          30.9994,
          40.9989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NAMDI"
      },
      geometry: {
        coordinates: [
          44.6925,
          34.5075
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NAMEN"
      },
      geometry: {
        coordinates: [
          43.6417,
          43.5133
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NAPET"
      },
      geometry: {
        coordinates: [
          23.0056,
          42.2883
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NAPIP"
      },
      geometry: {
        coordinates: [
          31.7389,
          41.8067
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NAREN"
      },
      geometry: {
        coordinates: [
          40.825,
          38.6306
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NARLI"
      },
      geometry: {
        coordinates: [
          43.2497,
          37.8156
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NASAR"
      },
      geometry: {
        coordinates: [
          49.9433,
          39.65
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NASEM"
      },
      geometry: {
        coordinates: [
          29.7158,
          42.5917
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NASIL"
      },
      geometry: {
        coordinates: [
          49.85,
          39.0167
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NASIM"
      },
      geometry: {
        coordinates: [
          32.3333,
          40.5722
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NASKO"
      },
      geometry: {
        coordinates: [
          22.0978,
          41.7669
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NASTA"
      },
      geometry: {
        coordinates: [
          45.2153,
          43.9997
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NATSO"
      },
      geometry: {
        coordinates: [
          48.7686,
          40.1308
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NAVKO"
      },
      geometry: {
        coordinates: [
          30.8197,
          36.1844
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NAVOD"
      },
      geometry: {
        coordinates: [
          24.5597,
          43.7558
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NAVOK"
      },
      geometry: {
        coordinates: [
          28.2394,
          35.7375
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NAVUS"
      },
      geometry: {
        coordinates: [
          25.2853,
          35.6992
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NAX"
      },
      geometry: {
        coordinates: [
          45.4408,
          39.2017
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NAXAS"
      },
      geometry: {
        coordinates: [
          26.7489,
          36.3575
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NEDEK"
      },
      geometry: {
        coordinates: [
          41.5928,
          42.0022
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NEDSI"
      },
      geometry: {
        coordinates: [
          28.5564,
          43.3336
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NEGAN"
      },
      geometry: {
        coordinates: [
          45.01,
          39.755
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NEGBU"
      },
      geometry: {
        coordinates: [
          32.3717,
          40.0142
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NEGEM"
      },
      geometry: {
        coordinates: [
          29.8703,
          42.4617
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NEGOL"
      },
      geometry: {
        coordinates: [
          41.0792,
          39.4764
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NEGOT"
      },
      geometry: {
        coordinates: [
          22.3922,
          41.32
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NEKAT"
      },
      geometry: {
        coordinates: [
          36.3536,
          37.7436
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NEKES"
      },
      geometry: {
        coordinates: [
          33.2847,
          36.1536
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NEKUL"
      },
      geometry: {
        coordinates: [
          22.5867,
          45.5167
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NELNI"
      },
      geometry: {
        coordinates: [
          30.5022,
          41.6175
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NELOM"
      },
      geometry: {
        coordinates: [
          35.4386,
          46.0917
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NELPO"
      },
      geometry: {
        coordinates: [
          37.6758,
          40.47
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NEMES"
      },
      geometry: {
        coordinates: [
          22.5808,
          37.7064
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NEMIS"
      },
      geometry: {
        coordinates: [
          25.7878,
          38.3731
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NEMRO"
      },
      geometry: {
        coordinates: [
          33.2028,
          40.9083
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NENDO"
      },
      geometry: {
        coordinates: [
          34.2461,
          41.3253
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NENKO"
      },
      geometry: {
        coordinates: [
          27.9717,
          43.6931
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NEPNO"
      },
      geometry: {
        coordinates: [
          28.2778,
          37.1514
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NEPOS"
      },
      geometry: {
        coordinates: [
          21.4375,
          44.0061
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NEPOT"
      },
      geometry: {
        coordinates: [
          23.0881,
          45.9603
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NERDI"
      },
      geometry: {
        coordinates: [
          23.7031,
          45.3128
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NEROB"
      },
      geometry: {
        coordinates: [
          34.1903,
          45.6992
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NESAD"
      },
      geometry: {
        coordinates: [
          48.2819,
          42.0997
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NESAR"
      },
      geometry: {
        coordinates: [
          28.1417,
          42.8097
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NESET"
      },
      geometry: {
        coordinates: [
          29.1197,
          38.6314
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NESIL"
      },
      geometry: {
        coordinates: [
          29.7231,
          37.3431
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NESTU"
      },
      geometry: {
        coordinates: [
          40.3494,
          40.5936
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NETGO"
      },
      geometry: {
        coordinates: [
          33.2331,
          39.7686
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NETIS"
      },
      geometry: {
        coordinates: [
          24.9636,
          36.7028
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NETON"
      },
      geometry: {
        coordinates: [
          48.195,
          39.7617
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NETPU"
      },
      geometry: {
        coordinates: [
          40.4189,
          40.9228
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NETUL"
      },
      geometry: {
        coordinates: [
          26.9786,
          44.6953
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NEVAL"
      },
      geometry: {
        coordinates: [
          25.1086,
          40.8156
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NEVGI"
      },
      geometry: {
        coordinates: [
          27.5842,
          39.8353
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NEVIK"
      },
      geometry: {
        coordinates: [
          21.9611,
          35.1333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NEVKA"
      },
      geometry: {
        coordinates: [
          32.4764,
          44.1575
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NEVRA"
      },
      geometry: {
        coordinates: [
          24.5603,
          38.1683
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NEXAM"
      },
      geometry: {
        coordinates: [
          28.6353,
          37.5003
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NIBOX"
      },
      geometry: {
        coordinates: [
          26.9397,
          35.3439
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NIDLI"
      },
      geometry: {
        coordinates: [
          43.0042,
          42.0744
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NIGAB"
      },
      geometry: {
        coordinates: [
          26.4933,
          44.5433
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NIGEV"
      },
      geometry: {
        coordinates: [
          24.7539,
          43.9781
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NIKAS"
      },
      geometry: {
        coordinates: [
          35.7167,
          35.1933
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NIKTI"
      },
      geometry: {
        coordinates: [
          24.1217,
          41.5464
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NILAS"
      },
      geometry: {
        coordinates: [
          28.4417,
          36.1308
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NILER"
      },
      geometry: {
        coordinates: [
          27.8697,
          39.0839
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NILRU"
      },
      geometry: {
        coordinates: [
          27.6375,
          40.4081
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NILVA"
      },
      geometry: {
        coordinates: [
          25.6828,
          39.3239
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NIMSA"
      },
      geometry: {
        coordinates: [
          42.7036,
          43.4833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NINVA"
      },
      geometry: {
        coordinates: [
          43.2167,
          37.35
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NIPAM"
      },
      geometry: {
        coordinates: [
          43.3325,
          44.5431
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NIPIS"
      },
      geometry: {
        coordinates: [
          27.5075,
          35.0467
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NIRGA"
      },
      geometry: {
        coordinates: [
          43.4153,
          45.0847
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NIS"
      },
      geometry: {
        coordinates: [
          21.8269,
          43.3464
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NISAP"
      },
      geometry: {
        coordinates: [
          36.6414,
          36.7844
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NISOS"
      },
      geometry: {
        coordinates: [
          26.4189,
          37.9192
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NISUT"
      },
      geometry: {
        coordinates: [
          33.6936,
          44.3017
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NISVA"
      },
      geometry: {
        coordinates: [
          22.7975,
          42.9728
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NITOK"
      },
      geometry: {
        coordinates: [
          32.9083,
          46.125
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NIVAX"
      },
      geometry: {
        coordinates: [
          39.6342,
          41.4892
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NIVLA"
      },
      geometry: {
        coordinates: [
          42.7961,
          40.4622
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NIZIP"
      },
      geometry: {
        coordinates: [
          37.7667,
          36.9847
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NOBLO"
      },
      geometry: {
        coordinates: [
          39.845,
          45.4819
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NOBVA"
      },
      geometry: {
        coordinates: [
          49.7811,
          41.1078
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NODKO"
      },
      geometry: {
        coordinates: [
          28.2686,
          38.2197
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NOLDO"
      },
      geometry: {
        coordinates: [
          45.3581,
          32.8256
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NOLGA"
      },
      geometry: {
        coordinates: [
          42.9789,
          41.4281
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NOLTO"
      },
      geometry: {
        coordinates: [
          46.9397,
          35.2431
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NOMPA"
      },
      geometry: {
        coordinates: [
          33.2378,
          45.5956
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NONDU"
      },
      geometry: {
        coordinates: [
          26.675,
          41.13
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NONOR"
      },
      geometry: {
        coordinates: [
          41.7972,
          44.8508
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NORDI"
      },
      geometry: {
        coordinates: [
          33.0883,
          34.7967
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NOSAK"
      },
      geometry: {
        coordinates: [
          42.7233,
          45.4581
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NOTSA"
      },
      geometry: {
        coordinates: [
          49.0542,
          33.2958
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NOTVI"
      },
      geometry: {
        coordinates: [
          30.0661,
          40.7278
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NUGBA"
      },
      geometry: {
        coordinates: [
          30.6742,
          41.5911
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NUGRI"
      },
      geometry: {
        coordinates: [
          37.165,
          44.1214
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NULGO"
      },
      geometry: {
        coordinates: [
          23.7172,
          44.045
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NULRU"
      },
      geometry: {
        coordinates: [
          39.645,
          38.9789
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NUMSO"
      },
      geometry: {
        coordinates: [
          30.3453,
          40.9228
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NUMTI"
      },
      geometry: {
        coordinates: [
          29.5242,
          39.6411
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NUNRA"
      },
      geometry: {
        coordinates: [
          43.2764,
          44.6778
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NUNTI"
      },
      geometry: {
        coordinates: [
          48.1686,
          40.5894
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NUNTU"
      },
      geometry: {
        coordinates: [
          37.3597,
          39.5797
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NUPVU"
      },
      geometry: {
        coordinates: [
          27.3794,
          43.2822
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NURPO"
      },
      geometry: {
        coordinates: [
          29.3156,
          44.4686
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "NZ"
      },
      geometry: {
        coordinates: [
          39.6731,
          45.2186
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OBAGI"
      },
      geometry: {
        coordinates: [
          22.0958,
          43.5603
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OBELA"
      },
      geometry: {
        coordinates: [
          25.8272,
          44.5456
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OBIXI"
      },
      geometry: {
        coordinates: [
          29.015,
          40.7703
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OBLAK"
      },
      geometry: {
        coordinates: [
          22.3639,
          43.4869
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OBORA"
      },
      geometry: {
        coordinates: [
          44.4656,
          41.8333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OBRUK"
      },
      geometry: {
        coordinates: [
          33.1189,
          38.0239
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OBUGA"
      },
      geometry: {
        coordinates: [
          26.0942,
          44.1089
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OBUMA"
      },
      geometry: {
        coordinates: [
          37.8619,
          43.9294
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OBUPO"
      },
      geometry: {
        coordinates: [
          28.6869,
          35.8853
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ODALI"
      },
      geometry: {
        coordinates: [
          38.15,
          40.3278
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ODERO"
      },
      geometry: {
        coordinates: [
          30.2644,
          42.6106
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ODIKO"
      },
      geometry: {
        coordinates: [
          23.2419,
          40.9714
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ODILI"
      },
      geometry: {
        coordinates: [
          42.0944,
          41.7214
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ODIRA"
      },
      geometry: {
        coordinates: [
          36.9147,
          42.7089
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ODMAX"
      },
      geometry: {
        coordinates: [
          31.4031,
          42.1211
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ODNAK"
      },
      geometry: {
        coordinates: [
          35.7789,
          45.7692
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ODPOT"
      },
      geometry: {
        coordinates: [
          35.8661,
          40.9903
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ODRIK"
      },
      geometry: {
        coordinates: [
          43.9486,
          43.4331
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ODRUP"
      },
      geometry: {
        coordinates: [
          31.9161,
          40.2667
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ODS"
      },
      geometry: {
        coordinates: [
          30.6708,
          46.4303
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ODS02"
      },
      geometry: {
        coordinates: [
          30.7064,
          46.3392
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ODS04"
      },
      geometry: {
        coordinates: [
          30.5514,
          46.3528
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ODSAM"
      },
      geometry: {
        coordinates: [
          37.7647,
          40.6481
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OGAPA"
      },
      geometry: {
        coordinates: [
          38.0367,
          43.7781
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OGATA"
      },
      geometry: {
        coordinates: [
          30.1306,
          44.8125
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OGEVI"
      },
      geometry: {
        coordinates: [
          43.7869,
          41.1347
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OGIBI"
      },
      geometry: {
        coordinates: [
          28.7119,
          41.0281
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OGL01"
      },
      geometry: {
        coordinates: [
          30.52,
          45.9922
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OGLAR"
      },
      geometry: {
        coordinates: [
          30.53,
          46.015
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OGMAL"
      },
      geometry: {
        coordinates: [
          42.7803,
          43.8869
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OGMOS"
      },
      geometry: {
        coordinates: [
          39.5019,
          42.6314
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OGNEN"
      },
      geometry: {
        coordinates: [
          49.395,
          40.5264
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OGOTA"
      },
      geometry: {
        coordinates: [
          23.3267,
          43.2142
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OITT"
      },
      geometry: {
        coordinates: [
          46.235,
          38.1339
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OKANA"
      },
      geometry: {
        coordinates: [
          22.4931,
          42.8464
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OKBUL"
      },
      geometry: {
        coordinates: [
          48.9983,
          40.28
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OKDES"
      },
      geometry: {
        coordinates: [
          46.0272,
          43.0561
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OKELI"
      },
      geometry: {
        coordinates: [
          33.0167,
          38.7289
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OKESA"
      },
      geometry: {
        coordinates: [
          27.3864,
          37.6292
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OKITA"
      },
      geometry: {
        coordinates: [
          41.8592,
          45.7
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OKLAM"
      },
      geometry: {
        coordinates: [
          31.5828,
          38.0908
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OKLOP"
      },
      geometry: {
        coordinates: [
          21.3317,
          44.1833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OKMOT"
      },
      geometry: {
        coordinates: [
          31.7908,
          38.5106
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OKOBA"
      },
      geometry: {
        coordinates: [
          42.4986,
          43.6667
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OKORO"
      },
      geometry: {
        coordinates: [
          26.3775,
          37.2044
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OKPEL"
      },
      geometry: {
        coordinates: [
          30.5231,
          37.2975
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OKTAT"
      },
      geometry: {
        coordinates: [
          48.5533,
          41.4233
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OKTIM"
      },
      geometry: {
        coordinates: [
          23.9244,
          41.2331
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OKUDA"
      },
      geometry: {
        coordinates: [
          44.0364,
          40.1469
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OKUDU"
      },
      geometry: {
        coordinates: [
          39.0144,
          38.5019
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OLDOK"
      },
      geometry: {
        coordinates: [
          26.8839,
          40.2478
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OLDUD"
      },
      geometry: {
        coordinates: [
          32.6119,
          42.1661
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OLENA"
      },
      geometry: {
        coordinates: [
          36.6333,
          44.35
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OLIDA"
      },
      geometry: {
        coordinates: [
          24.8911,
          38.4183
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OLMAT"
      },
      geometry: {
        coordinates: [
          49.2836,
          42.5281
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OLMIP"
      },
      geometry: {
        coordinates: [
          22.37,
          46.0453
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OLNOR"
      },
      geometry: {
        coordinates: [
          26.3217,
          44.3883
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OLOTA"
      },
      geometry: {
        coordinates: [
          21.6167,
          42.23
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OLPOT"
      },
      geometry: {
        coordinates: [
          36.3606,
          39.8611
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OLUPO"
      },
      geometry: {
        coordinates: [
          37.6619,
          41.7086
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OMENO"
      },
      geometry: {
        coordinates: [
          23.4814,
          42.2969
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OMIRO"
      },
      geometry: {
        coordinates: [
          23.6672,
          38.75
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OPE"
      },
      geometry: {
        coordinates: [
          26.1319,
          44.5594
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OPT"
      },
      geometry: {
        coordinates: [
          26.5603,
          44.5925
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OPW"
      },
      geometry: {
        coordinates: [
          25.9847,
          44.5578
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ORHAN"
      },
      geometry: {
        coordinates: [
          39.5778,
          39.9475
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ORMAN"
      },
      geometry: {
        coordinates: [
          33.3858,
          41.2919
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ORMOS"
      },
      geometry: {
        coordinates: [
          26.5808,
          37.8425
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ORNOS"
      },
      geometry: {
        coordinates: [
          33.4767,
          34.76
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ORSUT"
      },
      geometry: {
        coordinates: [
          26.0758,
          44.1761
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ORTIP"
      },
      geometry: {
        coordinates: [
          25.3331,
          43.9778
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ORVET"
      },
      geometry: {
        coordinates: [
          25.6572,
          44.4119
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ORVIS"
      },
      geometry: {
        coordinates: [
          28.1392,
          35.5722
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ORVOR"
      },
      geometry: {
        coordinates: [
          35.6903,
          41.0225
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OSDAN"
      },
      geometry: {
        coordinates: [
          30.6903,
          38.8519
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OSDIP"
      },
      geometry: {
        coordinates: [
          34.7986,
          42.2383
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OSDOR"
      },
      geometry: {
        coordinates: [
          30.05,
          44.9764
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OSDUT"
      },
      geometry: {
        coordinates: [
          37.5544,
          41.19
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OSGED"
      },
      geometry: {
        coordinates: [
          30.1069,
          38.9094
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OSKAL"
      },
      geometry: {
        coordinates: [
          43.4653,
          44.7497
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OSKOV"
      },
      geometry: {
        coordinates: [
          38.1575,
          37.0711
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OSMEV"
      },
      geometry: {
        coordinates: [
          30.5717,
          41.9978
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OSMOS"
      },
      geometry: {
        coordinates: [
          23.2625,
          40.1478
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OSRIN"
      },
      geometry: {
        coordinates: [
          33.4747,
          41.3044
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OSTAL"
      },
      geometry: {
        coordinates: [
          26.7728,
          44.2778
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OSTEX"
      },
      geometry: {
        coordinates: [
          26.9561,
          42.1594
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OSTOV"
      },
      geometry: {
        coordinates: [
          23.8,
          43.7833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OSVEL"
      },
      geometry: {
        coordinates: [
          31.0186,
          38.4819
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OSVIX"
      },
      geometry: {
        coordinates: [
          21.2456,
          44.3256
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OTALO"
      },
      geometry: {
        coordinates: [
          44.3167,
          35.2833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OTESA"
      },
      geometry: {
        coordinates: [
          33.4347,
          34.9286
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OTIDO"
      },
      geometry: {
        coordinates: [
          44.3258,
          36.8653
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OTKEM"
      },
      geometry: {
        coordinates: [
          29.8708,
          40.7258
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OTKEP"
      },
      geometry: {
        coordinates: [
          42.66,
          37.8592
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OTKOK"
      },
      geometry: {
        coordinates: [
          24.0125,
          41.9994
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OTKOT"
      },
      geometry: {
        coordinates: [
          34.4328,
          42.1114
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OTL"
      },
      geometry: {
        coordinates: [
          26.0006,
          44.5703
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OTLUG"
      },
      geometry: {
        coordinates: [
          41.5122,
          39.1536
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OTPER"
      },
      geometry: {
        coordinates: [
          25.53,
          43.0433
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OTPEV"
      },
      geometry: {
        coordinates: [
          27.3672,
          37.3219
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OTPOL"
      },
      geometry: {
        coordinates: [
          31.5103,
          45.4564
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OTPOM"
      },
      geometry: {
        coordinates: [
          30.6533,
          39.5778
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OTR"
      },
      geometry: {
        coordinates: [
          26.1311,
          44.5756
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OTREX"
      },
      geometry: {
        coordinates: [
          24.9389,
          35.1544
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OTROM"
      },
      geometry: {
        coordinates: [
          40.6592,
          40.9444
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OTSAN"
      },
      geometry: {
        coordinates: [
          30.3314,
          40.7106
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OTSIX"
      },
      geometry: {
        coordinates: [
          29.9561,
          39.7617
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OTSOV"
      },
      geometry: {
        coordinates: [
          37.4314,
          39.8328
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OVACI"
      },
      geometry: {
        coordinates: [
          29.1542,
          39.7889
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OVDOT"
      },
      geometry: {
        coordinates: [
          22.9769,
          44.5389
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OVGAN"
      },
      geometry: {
        coordinates: [
          29.7222,
          40.7708
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OZBEY"
      },
      geometry: {
        coordinates: [
          39.1,
          37.2419
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "OZYAK"
      },
      geometry: {
        coordinates: [
          29.1433,
          37.125
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PAD"
      },
      geometry: {
        coordinates: [
          47.9683,
          39.5744
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PADGU"
      },
      geometry: {
        coordinates: [
          22.6106,
          44.7786
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PAIVA"
      },
      geometry: {
        coordinates: [
          29.5883,
          41.2039
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PALER"
      },
      geometry: {
        coordinates: [
          36.545,
          45.1533
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PALUT"
      },
      geometry: {
        coordinates: [
          39.5333,
          38.6939
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PANOX"
      },
      geometry: {
        coordinates: [
          25.7172,
          38.3767
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PAPUS"
      },
      geometry: {
        coordinates: [
          45.4519,
          32.8928
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PARAS"
      },
      geometry: {
        coordinates: [
          45.6928,
          37.5258
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PARAT"
      },
      geometry: {
        coordinates: [
          41.715,
          45.5331
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PAREX"
      },
      geometry: {
        coordinates: [
          46.865,
          36.0908
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PAROT"
      },
      geometry: {
        coordinates: [
          49.9781,
          36.1911
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PARSU"
      },
      geometry: {
        coordinates: [
          48.08,
          39.63
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PASIP"
      },
      geometry: {
        coordinates: [
          38.9333,
          33.1
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PATUM"
      },
      geometry: {
        coordinates: [
          37.3867,
          46.0997
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PAVET"
      },
      geometry: {
        coordinates: [
          49.8836,
          35.4442
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PAVOD"
      },
      geometry: {
        coordinates: [
          45.3094,
          37.0344
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PAXAT"
      },
      geometry: {
        coordinates: [
          46.0886,
          33.3489
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PAXIS"
      },
      geometry: {
        coordinates: [
          27.3333,
          33.9517
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PAZAR"
      },
      geometry: {
        coordinates: [
          29.9994,
          41.2989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PDV"
      },
      geometry: {
        coordinates: [
          24.8764,
          42.0533
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PEDER"
      },
      geometry: {
        coordinates: [
          30.8647,
          35.1781
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PELAG"
      },
      geometry: {
        coordinates: [
          23.7586,
          37.3208
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PELAS"
      },
      geometry: {
        coordinates: [
          23.9917,
          39.3
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PELES"
      },
      geometry: {
        coordinates: [
          27.0533,
          46.2172
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PELIL"
      },
      geometry: {
        coordinates: [
          30.2328,
          37.8397
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PELIR"
      },
      geometry: {
        coordinates: [
          42.4986,
          44.7497
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PELUR"
      },
      geometry: {
        coordinates: [
          25.4883,
          45.2867
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PEMAN"
      },
      geometry: {
        coordinates: [
          45.6422,
          40.3911
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PEMOK"
      },
      geometry: {
        coordinates: [
          24.3483,
          44.3647
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PEMUX"
      },
      geometry: {
        coordinates: [
          28.7747,
          40.9331
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PENEV"
      },
      geometry: {
        coordinates: [
          23.8094,
          43.0317
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PENOB"
      },
      geometry: {
        coordinates: [
          48.1019,
          40.4619
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PENUK"
      },
      geometry: {
        coordinates: [
          48.8519,
          42.7547
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PEP"
      },
      geometry: {
        coordinates: [
          21.4486,
          41.3378
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PEPAK"
      },
      geometry: {
        coordinates: [
          29.3217,
          40.6961
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PEPIR"
      },
      geometry: {
        coordinates: [
          34.7594,
          32.3767
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PERED"
      },
      geometry: {
        coordinates: [
          30.8631,
          45.9278
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PEREN"
      },
      geometry: {
        coordinates: [
          23.9678,
          40.5967
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PEREV"
      },
      geometry: {
        coordinates: [
          35.0972,
          45.5464
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PERIM"
      },
      geometry: {
        coordinates: [
          28.6383,
          35.0169
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PEROK"
      },
      geometry: {
        coordinates: [
          25.4517,
          37.2044
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PERUN"
      },
      geometry: {
        coordinates: [
          31.8383,
          44.815
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PESED"
      },
      geometry: {
        coordinates: [
          31.7725,
          43.9278
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PESOX"
      },
      geometry: {
        coordinates: [
          30.0333,
          39.04
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PETAR"
      },
      geometry: {
        coordinates: [
          32.0814,
          40.1711
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PETOS"
      },
      geometry: {
        coordinates: [
          25.4542,
          44.4767
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PETUM"
      },
      geometry: {
        coordinates: [
          42.615,
          45.3997
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PEVAT"
      },
      geometry: {
        coordinates: [
          35.2175,
          43.9019
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PEVOP"
      },
      geometry: {
        coordinates: [
          38.7603,
          40.1244
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PEXAL"
      },
      geometry: {
        coordinates: [
          26.0914,
          44.7167
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PEXAN"
      },
      geometry: {
        coordinates: [
          25.1797,
          36.6803
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PEXES"
      },
      geometry: {
        coordinates: [
          43.345,
          40.0014
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PHA"
      },
      geometry: {
        coordinates: [
          32.5058,
          34.7117
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PIBOM"
      },
      geometry: {
        coordinates: [
          25.3078,
          40.9042
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PIDET"
      },
      geometry: {
        coordinates: [
          34.7842,
          32.5294
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PIDEV"
      },
      geometry: {
        coordinates: [
          31.5333,
          37.0942
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PIDIT"
      },
      geometry: {
        coordinates: [
          34.2517,
          43.7944
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PIDOR"
      },
      geometry: {
        coordinates: [
          23.6561,
          42.5939
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PIKAD"
      },
      geometry: {
        coordinates: [
          22.6978,
          38.0614
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PIKAN"
      },
      geometry: {
        coordinates: [
          49.5,
          42.8833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PIKOG"
      },
      geometry: {
        coordinates: [
          33.6247,
          32.8253
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PIKOS"
      },
      geometry: {
        coordinates: [
          21.55,
          39.9617
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PILAT"
      },
      geometry: {
        coordinates: [
          28.0978,
          44.8239
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PIMAV"
      },
      geometry: {
        coordinates: [
          29.9536,
          40.4006
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PIPEN"
      },
      geometry: {
        coordinates: [
          26.1167,
          38.0614
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PIPUR"
      },
      geometry: {
        coordinates: [
          33.2389,
          41.3511
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PIRIL"
      },
      geometry: {
        coordinates: [
          38.5717,
          43.3081
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PIROX"
      },
      geometry: {
        coordinates: [
          28.05,
          36.4833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PISEM"
      },
      geometry: {
        coordinates: [
          35.6614,
          45.2711
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PITOP"
      },
      geometry: {
        coordinates: [
          39.7736,
          43.0389
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PIVOS"
      },
      geometry: {
        coordinates: [
          25.7503,
          38.3747
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PIXAP"
      },
      geometry: {
        coordinates: [
          39.6922,
          40.5017
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PLH"
      },
      geometry: {
        coordinates: [
          23.6808,
          35.2275
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "POGEN"
      },
      geometry: {
        coordinates: [
          36.6936,
          37.5031
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "POGOD"
      },
      geometry: {
        coordinates: [
          32.0967,
          45.7433
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "POGUL"
      },
      geometry: {
        coordinates: [
          44.2653,
          44.0831
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "POLAD"
      },
      geometry: {
        coordinates: [
          47.0117,
          40.9792
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "POLUN"
      },
      geometry: {
        coordinates: [
          25.2233,
          44.2375
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PRI"
      },
      geometry: {
        coordinates: [
          21.0367,
          42.5658
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PROZR"
      },
      geometry: {
        coordinates: [
          39.7103,
          43.5581
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PRT10"
      },
      geometry: {
        coordinates: [
          21.0783,
          42.41
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PRT15"
      },
      geometry: {
        coordinates: [
          21.1017,
          42.3283
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PRT21"
      },
      geometry: {
        coordinates: [
          21.2233,
          42.29
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PRT35"
      },
      geometry: {
        coordinates: [
          21.0694,
          42.3717
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PRT36"
      },
      geometry: {
        coordinates: [
          21.0361,
          42.3664
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PUSTO"
      },
      geometry: {
        coordinates: [
          42.75,
          33.35
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "PUTSI"
      },
      geometry: {
        coordinates: [
          44.6167,
          33.5333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RABDI"
      },
      geometry: {
        coordinates: [
          45.7419,
          38.8011
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RABEM"
      },
      geometry: {
        coordinates: [
          45.4969,
          37.8114
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RAFIF"
      },
      geometry: {
        coordinates: [
          38.3219,
          33.2131
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RAGET"
      },
      geometry: {
        coordinates: [
          45.8967,
          33.5133
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RAHMA"
      },
      geometry: {
        coordinates: [
          42.5081,
          40.3733
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RAKUR"
      },
      geometry: {
        coordinates: [
          31.9478,
          42.7989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RAMIX"
      },
      geometry: {
        coordinates: [
          27.3386,
          46.2894
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RAPAV"
      },
      geometry: {
        coordinates: [
          26.2269,
          44.3069
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RAPIV"
      },
      geometry: {
        coordinates: [
          34.9317,
          32.5867
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RAPLU"
      },
      geometry: {
        coordinates: [
          41.7583,
          33.3833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RAPOS"
      },
      geometry: {
        coordinates: [
          25.1356,
          37.1347
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RARTA"
      },
      geometry: {
        coordinates: [
          49.9211,
          36.8897
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RASAM"
      },
      geometry: {
        coordinates: [
          49.1942,
          40.6125
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RASDA"
      },
      geometry: {
        coordinates: [
          30.95,
          33.1
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RASIL"
      },
      geometry: {
        coordinates: [
          31.4167,
          45.41
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RASLA"
      },
      geometry: {
        coordinates: [
          49.5692,
          33.2006
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RASNO"
      },
      geometry: {
        coordinates: [
          21.4661,
          34.3333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RASOK"
      },
      geometry: {
        coordinates: [
          37.9939,
          43.9197
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RASUB"
      },
      geometry: {
        coordinates: [
          25.4181,
          43.9789
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RASVA"
      },
      geometry: {
        coordinates: [
          38.0078,
          37.4981
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RATKI"
      },
      geometry: {
        coordinates: [
          44.3,
          43.6667
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RATNO"
      },
      geometry: {
        coordinates: [
          30.1964,
          46.1733
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RATSI"
      },
      geometry: {
        coordinates: [
          36.2203,
          37.8372
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RATVO"
      },
      geometry: {
        coordinates: [
          43.9344,
          37.2406
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RATVU"
      },
      geometry: {
        coordinates: [
          29.3783,
          39.9067
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RAUMA"
      },
      geometry: {
        coordinates: [
          27.3092,
          39.9839
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RAVAK"
      },
      geometry: {
        coordinates: [
          21.6269,
          43.6875
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RAVGO"
      },
      geometry: {
        coordinates: [
          30.5008,
          39.5469
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RAVIL"
      },
      geometry: {
        coordinates: [
          30.0019,
          40.3361
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RAVLI"
      },
      geometry: {
        coordinates: [
          41.3922,
          39.4769
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RAXAD"
      },
      geometry: {
        coordinates: [
          22.2428,
          42.3083
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RAZAR"
      },
      geometry: {
        coordinates: [
          29.9994,
          41.2986
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RDIMA"
      },
      geometry: {
        coordinates: [
          36.5333,
          33.0333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RDS"
      },
      geometry: {
        coordinates: [
          28.0822,
          36.3397
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RDSXA"
      },
      geometry: {
        coordinates: [
          28.0842,
          36.4006
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RDSXD"
      },
      geometry: {
        coordinates: [
          28.0631,
          36.4008
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "REBGI"
      },
      geometry: {
        coordinates: [
          44.5775,
          40.2433
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "REBKO"
      },
      geometry: {
        coordinates: [
          34.1619,
          43.2431
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "REBLO"
      },
      geometry: {
        coordinates: [
          43.685,
          40.84
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "REBTA"
      },
      geometry: {
        coordinates: [
          33.1694,
          37.6867
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "REDMA"
      },
      geometry: {
        coordinates: [
          37.08,
          43.6231
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "REDNO"
      },
      geometry: {
        coordinates: [
          31.0139,
          38.9592
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "REDRA"
      },
      geometry: {
        coordinates: [
          26.5244,
          37.9822
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "REFUS"
      },
      geometry: {
        coordinates: [
          23.805,
          41.2764
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "REKVO"
      },
      geometry: {
        coordinates: [
          40.4983,
          39.5214
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RELTI"
      },
      geometry: {
        coordinates: [
          40.1319,
          46.0869
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RELTU"
      },
      geometry: {
        coordinates: [
          32.3233,
          41.6442
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "REMEK"
      },
      geometry: {
        coordinates: [
          42.3236,
          45.4919
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "REMPO"
      },
      geometry: {
        coordinates: [
          36.4722,
          37.66
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RENAT"
      },
      geometry: {
        coordinates: [
          36.5583,
          44.0367
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RENBA"
      },
      geometry: {
        coordinates: [
          34.0233,
          44.635
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RENGI"
      },
      geometry: {
        coordinates: [
          41.08,
          38.4639
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RERSA"
      },
      geometry: {
        coordinates: [
          21.0853,
          36.0017
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RERVA"
      },
      geometry: {
        coordinates: [
          33.8925,
          42.3597
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RESAK"
      },
      geometry: {
        coordinates: [
          45.2644,
          32.5514
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RESLA"
      },
      geometry: {
        coordinates: [
          23.3128,
          43.3283
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RESLI"
      },
      geometry: {
        coordinates: [
          30.1197,
          38.2944
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RESLO"
      },
      geometry: {
        coordinates: [
          42.625,
          43.95
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RESTI"
      },
      geometry: {
        coordinates: [
          24.4397,
          36.4678
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "REVDA"
      },
      geometry: {
        coordinates: [
          29.1433,
          43.7333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "REXAL"
      },
      geometry: {
        coordinates: [
          33.895,
          34.7233
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "REXAN"
      },
      geometry: {
        coordinates: [
          46.6597,
          35.9806
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RF"
      },
      geometry: {
        coordinates: [
          39.9175,
          45.2867
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RIDLA"
      },
      geometry: {
        coordinates: [
          37.365,
          45.7497
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RIDPA"
      },
      geometry: {
        coordinates: [
          26.4872,
          44.6219
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RIGOX"
      },
      geometry: {
        coordinates: [
          47.9433,
          35.105
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RIGRO"
      },
      geometry: {
        coordinates: [
          25.8742,
          37.59
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RIKSO"
      },
      geometry: {
        coordinates: [
          26.4333,
          38.8333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RILEX"
      },
      geometry: {
        coordinates: [
          26.7664,
          41.9711
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RILIN"
      },
      geometry: {
        coordinates: [
          22.6667,
          37.965
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RIMAX"
      },
      geometry: {
        coordinates: [
          22.7169,
          38.1186
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RIMBO"
      },
      geometry: {
        coordinates: [
          28.5522,
          41.3808
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RINAL"
      },
      geometry: {
        coordinates: [
          45.7369,
          44.3881
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RINEK"
      },
      geometry: {
        coordinates: [
          39.8633,
          45.8281
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RIPGA"
      },
      geometry: {
        coordinates: [
          27.9019,
          45.1919
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RIPLI"
      },
      geometry: {
        coordinates: [
          25.3628,
          37.2758
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RIPNU"
      },
      geometry: {
        coordinates: [
          31.2103,
          40.5253
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RISKA"
      },
      geometry: {
        coordinates: [
          44.5819,
          44.0664
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RITAG"
      },
      geometry: {
        coordinates: [
          29.5578,
          42.5858
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RITGU"
      },
      geometry: {
        coordinates: [
          27.8803,
          40.7942
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RIVBU"
      },
      geometry: {
        coordinates: [
          29.3125,
          37.3272
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RIVOS"
      },
      geometry: {
        coordinates: [
          27.6547,
          44.6558
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RIXEN"
      },
      geometry: {
        coordinates: [
          28.7661,
          42.0822
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RIXUB"
      },
      geometry: {
        coordinates: [
          30.6689,
          42.2872
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RNA"
      },
      geometry: {
        coordinates: [
          42.0614,
          37.365
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ROBUT"
      },
      geometry: {
        coordinates: [
          42.7033,
          46.0064
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ROCHE"
      },
      geometry: {
        coordinates: [
          28.9347,
          40.5519
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RODIP"
      },
      geometry: {
        coordinates: [
          24.7011,
          41.4208
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RODVU"
      },
      geometry: {
        coordinates: [
          33.9797,
          45.0517
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ROKMO"
      },
      geometry: {
        coordinates: [
          45.3636,
          45.2764
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ROKVA"
      },
      geometry: {
        coordinates: [
          31.6572,
          41.8292
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ROLIN"
      },
      geometry: {
        coordinates: [
          40.6564,
          41.7992
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ROLVI"
      },
      geometry: {
        coordinates: [
          31.8114,
          39.2178
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ROMOK"
      },
      geometry: {
        coordinates: [
          31.7283,
          43.4733
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RONBU"
      },
      geometry: {
        coordinates: [
          26.4983,
          44.0517
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ROP"
      },
      geometry: {
        coordinates: [
          35.5728,
          32.9825
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ROPTA"
      },
      geometry: {
        coordinates: [
          39.9283,
          44.9122
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ROPUT"
      },
      geometry: {
        coordinates: [
          32.5017,
          43.8333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RORKI"
      },
      geometry: {
        coordinates: [
          29.1433,
          43.0961
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RORMU"
      },
      geometry: {
        coordinates: [
          29.9269,
          39.52
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ROTKU"
      },
      geometry: {
        coordinates: [
          39.96,
          38.7933
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ROVAM"
      },
      geometry: {
        coordinates: [
          23.8078,
          43.1511
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ROVDO"
      },
      geometry: {
        coordinates: [
          25.44,
          41.9958
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ROVON"
      },
      geometry: {
        coordinates: [
          45.8894,
          37.2669
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ROXEP"
      },
      geometry: {
        coordinates: [
          27.4372,
          37.3053
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ROXOL"
      },
      geometry: {
        coordinates: [
          27.5044,
          35.7728
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ROXUK"
      },
      geometry: {
        coordinates: [
          29.7186,
          39.8903
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RST"
      },
      geometry: {
        coordinates: [
          49.6158,
          37.3264
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RUBIK"
      },
      geometry: {
        coordinates: [
          33.0817,
          34.9033
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RUDER"
      },
      geometry: {
        coordinates: [
          34.125,
          34.9533
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RUGAS"
      },
      geometry: {
        coordinates: [
          22.7914,
          41.3294
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RUGIK"
      },
      geometry: {
        coordinates: [
          42.4233,
          44.8203
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RUKAP"
      },
      geometry: {
        coordinates: [
          31.9661,
          37.8208
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RUMEN"
      },
      geometry: {
        coordinates: [
          24.3133,
          42.305
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RUNOL"
      },
      geometry: {
        coordinates: [
          29.9147,
          38.4603
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RUPUM"
      },
      geometry: {
        coordinates: [
          27.3694,
          36.1028
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RUSOS"
      },
      geometry: {
        coordinates: [
          24.3664,
          36.2083
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RUSUS"
      },
      geometry: {
        coordinates: [
          33.5925,
          44.7819
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RUTAR"
      },
      geometry: {
        coordinates: [
          28.0206,
          42.8836
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RUTEP"
      },
      geometry: {
        coordinates: [
          38.51,
          43.5881
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RUVOM"
      },
      geometry: {
        coordinates: [
          34.3933,
          42.2936
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "RUXEV"
      },
      geometry: {
        coordinates: [
          34.8622,
          41.2636
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SAGIL"
      },
      geometry: {
        coordinates: [
          49.5667,
          40.6333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SALAZ"
      },
      geometry: {
        coordinates: [
          33.2092,
          39.9558
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SALDA"
      },
      geometry: {
        coordinates: [
          30.0003,
          37.5553
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SALGO"
      },
      geometry: {
        coordinates: [
          32.1994,
          40.4739
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SALIM"
      },
      geometry: {
        coordinates: [
          36.3111,
          35.4958
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SALUN"
      },
      geometry: {
        coordinates: [
          24.45,
          34
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SAM"
      },
      geometry: {
        coordinates: [
          26.9144,
          37.6914
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SARIZ"
      },
      geometry: {
        coordinates: [
          35.3786,
          39.0411
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SARPI"
      },
      geometry: {
        coordinates: [
          41.4497,
          41.5489
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SAT02"
      },
      geometry: {
        coordinates: [
          23.6897,
          37.7453
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SBH"
      },
      geometry: {
        coordinates: [
          29.325,
          40.9042
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SBHXD"
      },
      geometry: {
        coordinates: [
          29.2933,
          40.8925
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SEHER"
      },
      geometry: {
        coordinates: [
          38.5736,
          40.5061
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SEHIR"
      },
      geometry: {
        coordinates: [
          32.2036,
          37.6517
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SELVI"
      },
      geometry: {
        coordinates: [
          34.4994,
          37.8989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SEPTU"
      },
      geometry: {
        coordinates: [
          44.7333,
          33.2167
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SERCE"
      },
      geometry: {
        coordinates: [
          27.3092,
          41.5772
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SEREN"
      },
      geometry: {
        coordinates: [
          32.8161,
          40.2322
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SETNA"
      },
      geometry: {
        coordinates: [
          45.9228,
          37.9375
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SEVAN"
      },
      geometry: {
        coordinates: [
          44.9547,
          40.5342
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SEVKU"
      },
      geometry: {
        coordinates: [
          43.2878,
          36.0967
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SG448"
      },
      geometry: {
        coordinates: [
          43.9097,
          40.6278
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SG449"
      },
      geometry: {
        coordinates: [
          43.8389,
          40.5083
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SG450"
      },
      geometry: {
        coordinates: [
          43.7439,
          40.5472
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SG453"
      },
      geometry: {
        coordinates: [
          43.8139,
          40.6611
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SG500"
      },
      geometry: {
        coordinates: [
          43.9806,
          40.7111
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SIB"
      },
      geometry: {
        coordinates: [
          24.1525,
          45.785
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SIBAN"
      },
      geometry: {
        coordinates: [
          38.965,
          44.3331
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SIBVU"
      },
      geometry: {
        coordinates: [
          45.7825,
          38.7456
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SIDNA"
      },
      geometry: {
        coordinates: [
          41.6833,
          36.5661
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SIGBI"
      },
      geometry: {
        coordinates: [
          42.3333,
          33.0333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SILBO"
      },
      geometry: {
        coordinates: [
          43.4833,
          32.9833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SIN"
      },
      geometry: {
        coordinates: [
          35.0769,
          42.0222
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SINKA"
      },
      geometry: {
        coordinates: [
          44.7981,
          33.3603
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SISIN"
      },
      geometry: {
        coordinates: [
          45.6869,
          32.835
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SISPI"
      },
      geometry: {
        coordinates: [
          29.87,
          39.9147
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SISVO"
      },
      geometry: {
        coordinates: [
          27.7764,
          37.8956
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SIT"
      },
      geometry: {
        coordinates: [
          26.1892,
          35.0683
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SITRU"
      },
      geometry: {
        coordinates: [
          26.2994,
          38.1072
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SIV"
      },
      geometry: {
        coordinates: [
          36.8933,
          39.7894
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SIVKU"
      },
      geometry: {
        coordinates: [
          29.9794,
          39.1356
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SKJ"
      },
      geometry: {
        coordinates: [
          21.6306,
          41.935
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SKJ07"
      },
      geometry: {
        coordinates: [
          21.7214,
          41.6358
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SKJ08"
      },
      geometry: {
        coordinates: [
          21.7469,
          41.6031
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SKP"
      },
      geometry: {
        coordinates: [
          23.6158,
          39.1806
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SMF"
      },
      geometry: {
        coordinates: [
          33.9808,
          45.0353
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SMF01"
      },
      geometry: {
        coordinates: [
          34.0114,
          45.1533
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SMF02"
      },
      geometry: {
        coordinates: [
          34.1003,
          45.1081
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SMF03"
      },
      geometry: {
        coordinates: [
          33.9508,
          44.9956
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SMF04"
      },
      geometry: {
        coordinates: [
          34.0325,
          44.9808
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SNI"
      },
      geometry: {
        coordinates: [
          25.4825,
          36.395
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SNJ"
      },
      geometry: {
        coordinates: [
          47.0078,
          35.2389
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOBIL"
      },
      geometry: {
        coordinates: [
          45.1689,
          34.5
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOBLO"
      },
      geometry: {
        coordinates: [
          36.3833,
          43.25
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOBOS"
      },
      geometry: {
        coordinates: [
          33.945,
          34.925
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOBSA"
      },
      geometry: {
        coordinates: [
          25.0872,
          46.0481
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SODGO"
      },
      geometry: {
        coordinates: [
          22.8475,
          44.8672
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOF"
      },
      geometry: {
        coordinates: [
          23.4089,
          42.6947
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOGTA"
      },
      geometry: {
        coordinates: [
          34.7181,
          45.6444
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOGUM"
      },
      geometry: {
        coordinates: [
          43.915,
          34.2033
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOKAL"
      },
      geometry: {
        coordinates: [
          27.6183,
          32.6003
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOKAN"
      },
      geometry: {
        coordinates: [
          38.3686,
          33.1358
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOKRI"
      },
      geometry: {
        coordinates: [
          23.4719,
          36.2578
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOKRU"
      },
      geometry: {
        coordinates: [
          25.3303,
          44.9928
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOLIN"
      },
      geometry: {
        coordinates: [
          34.1708,
          32.4947
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOLSA"
      },
      geometry: {
        coordinates: [
          35.7789,
          38.1456
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOMBU"
      },
      geometry: {
        coordinates: [
          40.2769,
          39.6003
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOMGU"
      },
      geometry: {
        coordinates: [
          29.9556,
          39.5533
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOMOV"
      },
      geometry: {
        coordinates: [
          24.85,
          43.7
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SONAD"
      },
      geometry: {
        coordinates: [
          39.6764,
          40.4181
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SONEN"
      },
      geometry: {
        coordinates: [
          28.2853,
          37.1547
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SONLU"
      },
      geometry: {
        coordinates: [
          28.7997,
          39.0831
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SONSU"
      },
      geometry: {
        coordinates: [
          38.3867,
          37.88
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SONUP"
      },
      geometry: {
        coordinates: [
          28.5,
          37.4897
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOPIS"
      },
      geometry: {
        coordinates: [
          24.6208,
          42.8494
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOPKU"
      },
      geometry: {
        coordinates: [
          42.9406,
          45.4644
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOPOV"
      },
      geometry: {
        coordinates: [
          36.7992,
          40.2003
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SORAR"
      },
      geometry: {
        coordinates: [
          39.5125,
          38.6242
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SORDU"
      },
      geometry: {
        coordinates: [
          25.4467,
          44.0425
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOREG"
      },
      geometry: {
        coordinates: [
          43.9953,
          45.9081
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOREV"
      },
      geometry: {
        coordinates: [
          24.4244,
          37.0969
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOROK"
      },
      geometry: {
        coordinates: [
          32.71,
          44.105
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOROL"
      },
      geometry: {
        coordinates: [
          43.1653,
          43.7331
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOSED"
      },
      geometry: {
        coordinates: [
          41.0042,
          42.1097
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOSEM"
      },
      geometry: {
        coordinates: [
          31.2183,
          37.3783
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOSIL"
      },
      geometry: {
        coordinates: [
          21.3078,
          45.3514
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOSUS"
      },
      geometry: {
        coordinates: [
          25.0733,
          40.7442
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOTAM"
      },
      geometry: {
        coordinates: [
          32.9333,
          44.5933
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOTIV"
      },
      geometry: {
        coordinates: [
          28.4833,
          36.55
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOTIX"
      },
      geometry: {
        coordinates: [
          26.9033,
          35.8533
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SOVAP"
      },
      geometry: {
        coordinates: [
          36.7961,
          42.2497
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SPA06"
      },
      geometry: {
        coordinates: [
          23.7828,
          37.6428
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SPATZ"
      },
      geometry: {
        coordinates: [
          29.1469,
          40.1511
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SRT"
      },
      geometry: {
        coordinates: [
          41.8819,
          37.9606
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "STJ"
      },
      geometry: {
        coordinates: [
          25.9769,
          44.9183
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SUBUT"
      },
      geometry: {
        coordinates: [
          46.8219,
          40.8992
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SUD"
      },
      geometry: {
        coordinates: [
          24.175,
          35.5231
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SUD05"
      },
      geometry: {
        coordinates: [
          23.6044,
          35.7072
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SUD06"
      },
      geometry: {
        coordinates: [
          24.535,
          35.1908
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SUDES"
      },
      geometry: {
        coordinates: [
          26.8933,
          39.7694
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SUGAT"
      },
      geometry: {
        coordinates: [
          37.7514,
          37.0508
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SUGUL"
      },
      geometry: {
        coordinates: [
          32.9717,
          43.1183
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SULAF"
      },
      geometry: {
        coordinates: [
          38.1742,
          33.455
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SULAK"
      },
      geometry: {
        coordinates: [
          36.2867,
          37.8942
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SULEL"
      },
      geometry: {
        coordinates: [
          49.5117,
          40.1892
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SULOD"
      },
      geometry: {
        coordinates: [
          42.6653,
          44.5914
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SULTA"
      },
      geometry: {
        coordinates: [
          29.7397,
          40.0456
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SUMAP"
      },
      geometry: {
        coordinates: [
          40.6067,
          38.1167
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SUMOL"
      },
      geometry: {
        coordinates: [
          33.1811,
          42.7989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SUNAT"
      },
      geometry: {
        coordinates: [
          29.2497,
          37.2519
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SUNUM"
      },
      geometry: {
        coordinates: [
          34.8575,
          42.0119
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SUREL"
      },
      geometry: {
        coordinates: [
          40.8772,
          40.8672
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SURUC"
      },
      geometry: {
        coordinates: [
          38.54,
          37.0633
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SUSUZ"
      },
      geometry: {
        coordinates: [
          41.6083,
          39.6808
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SUTBU"
      },
      geometry: {
        coordinates: [
          48.7922,
          36.5567
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SUTIS"
      },
      geometry: {
        coordinates: [
          24.7486,
          40.7019
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SUVUP"
      },
      geometry: {
        coordinates: [
          26.8086,
          40.1619
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "SWIDA"
      },
      geometry: {
        coordinates: [
          36.5667,
          32.7167
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "T1617"
      },
      geometry: {
        coordinates: [
          28.7067,
          41.2986
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "T3435"
      },
      geometry: {
        coordinates: [
          28.7072,
          41.2647
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TA033"
      },
      geometry: {
        coordinates: [
          29.3478,
          40.6308
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TABAN"
      },
      geometry: {
        coordinates: [
          39.6017,
          43.0783
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TABAS"
      },
      geometry: {
        coordinates: [
          43.8317,
          40.8353
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TABIP"
      },
      geometry: {
        coordinates: [
          32.5547,
          40.2733
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TABUR"
      },
      geometry: {
        coordinates: [
          26.2778,
          44.5911
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TAGAR"
      },
      geometry: {
        coordinates: [
          43.0694,
          42.2783
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TAGLA"
      },
      geometry: {
        coordinates: [
          43.8333,
          32.3683
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TAGRU"
      },
      geometry: {
        coordinates: [
          44.1383,
          34.5
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TALAM"
      },
      geometry: {
        coordinates: [
          30.4386,
          44.0864
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TALAS"
      },
      geometry: {
        coordinates: [
          21.9167,
          41.0767
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TALIL"
      },
      geometry: {
        coordinates: [
          39.9722,
          39.1889
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TAMER"
      },
      geometry: {
        coordinates: [
          40.8164,
          38.2406
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TAN"
      },
      geometry: {
        coordinates: [
          38.6433,
          33.5078
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TANSA"
      },
      geometry: {
        coordinates: [
          26.8167,
          34
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TARKA"
      },
      geometry: {
        coordinates: [
          31.1,
          45.865
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TARSU"
      },
      geometry: {
        coordinates: [
          34.5206,
          36.6256
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TAVAS"
      },
      geometry: {
        coordinates: [
          29.2436,
          37.5886
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TAVNI"
      },
      geometry: {
        coordinates: [
          46.9419,
          35.6353
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TAVRO"
      },
      geometry: {
        coordinates: [
          44.5025,
          41.1914
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TAVRU"
      },
      geometry: {
        coordinates: [
          28.865,
          45.975
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TAVSA"
      },
      geometry: {
        coordinates: [
          44.2489,
          42.5
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TAVUS"
      },
      geometry: {
        coordinates: [
          41.7358,
          39.8697
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TAYXA"
      },
      geometry: {
        coordinates: [
          29.7283,
          37.7781
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TAYXD"
      },
      geometry: {
        coordinates: [
          29.7072,
          37.7797
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TBN"
      },
      geometry: {
        coordinates: [
          39.7956,
          40.9953
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TBNXA"
      },
      geometry: {
        coordinates: [
          39.775,
          40.9994
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TBNXD"
      },
      geometry: {
        coordinates: [
          39.8042,
          40.9903
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TBS"
      },
      geometry: {
        coordinates: [
          44.9742,
          41.6475
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TBS01"
      },
      geometry: {
        coordinates: [
          44.9597,
          41.5967
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TBS02"
      },
      geometry: {
        coordinates: [
          44.9133,
          41.615
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TBS03"
      },
      geometry: {
        coordinates: [
          45.02,
          41.6158
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TBZ"
      },
      geometry: {
        coordinates: [
          46.2131,
          38.1481
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TBZXA"
      },
      geometry: {
        coordinates: [
          30.1589,
          39.1106
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TBZXD"
      },
      geometry: {
        coordinates: [
          30.1867,
          39.1233
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TEKDO"
      },
      geometry: {
        coordinates: [
          30.1569,
          38.3383
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TEKMI"
      },
      geometry: {
        coordinates: [
          38.3494,
          37.9589
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TELRI"
      },
      geometry: {
        coordinates: [
          27.5553,
          40.3031
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TELVO"
      },
      geometry: {
        coordinates: [
          32.9217,
          39.3711
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TEMEL"
      },
      geometry: {
        coordinates: [
          39.1372,
          41.0572
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TEMGO"
      },
      geometry: {
        coordinates: [
          29.3464,
          41.1664
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TEPKI"
      },
      geometry: {
        coordinates: [
          32.9928,
          41.4533
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TERLO"
      },
      geometry: {
        coordinates: [
          43.5411,
          44.1578
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TERME"
      },
      geometry: {
        coordinates: [
          37.2247,
          41.2144
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TESMI"
      },
      geometry: {
        coordinates: [
          42.1125,
          45.1092
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TESTU"
      },
      geometry: {
        coordinates: [
          26.0697,
          44.7517
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TESVA"
      },
      geometry: {
        coordinates: [
          44.4964,
          38.2858
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TETMA"
      },
      geometry: {
        coordinates: [
          46.1953,
          45.7167
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TETRO"
      },
      geometry: {
        coordinates: [
          42.8597,
          41.6725
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TETSA"
      },
      geometry: {
        coordinates: [
          28.7792,
          41.7461
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TEVDA"
      },
      geometry: {
        coordinates: [
          35.0667,
          38.3728
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TEVNI"
      },
      geometry: {
        coordinates: [
          30.3639,
          41.5914
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TF035"
      },
      geometry: {
        coordinates: [
          39.6017,
          39.0097
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TF036"
      },
      geometry: {
        coordinates: [
          39.7739,
          39.2897
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TFGXA"
      },
      geometry: {
        coordinates: [
          32.3508,
          36.2906
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TFGXD"
      },
      geometry: {
        coordinates: [
          32.3008,
          36.2964
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TGG"
      },
      geometry: {
        coordinates: [
          23.5522,
          38.3356
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TI022"
      },
      geometry: {
        coordinates: [
          28.2889,
          40.6628
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TIARE"
      },
      geometry: {
        coordinates: [
          32.9886,
          39.9069
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TIBLO"
      },
      geometry: {
        coordinates: [
          43.8911,
          40.3856
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TIMOP"
      },
      geometry: {
        coordinates: [
          35.3611,
          39.9919
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TIMUR"
      },
      geometry: {
        coordinates: [
          24.2392,
          43.6889
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TINAL"
      },
      geometry: {
        coordinates: [
          32.9367,
          45.32
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TIPAS"
      },
      geometry: {
        coordinates: [
          26.7633,
          35.9078
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TIRER"
      },
      geometry: {
        coordinates: [
          28.3842,
          41.1364
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TIRMA"
      },
      geometry: {
        coordinates: [
          35.765,
          38.9422
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TIRMO"
      },
      geometry: {
        coordinates: [
          28.2661,
          35.6339
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TIROS"
      },
      geometry: {
        coordinates: [
          34.3167,
          33.3
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TIRVO"
      },
      geometry: {
        coordinates: [
          28.7364,
          44.9925
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TISOM"
      },
      geometry: {
        coordinates: [
          36.4917,
          43.7417
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TISOT"
      },
      geometry: {
        coordinates: [
          44.8858,
          41.2681
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TITAG"
      },
      geometry: {
        coordinates: [
          33.5,
          45.7667
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TITEK"
      },
      geometry: {
        coordinates: [
          23.5739,
          44.4933
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TITUS"
      },
      geometry: {
        coordinates: [
          21.3847,
          36.3314
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TIVUG"
      },
      geometry: {
        coordinates: [
          33.0311,
          41.7336
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TIXIP"
      },
      geometry: {
        coordinates: [
          22.6467,
          45.8375
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TKT"
      },
      geometry: {
        coordinates: [
          36.3775,
          40.315
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TOBAL"
      },
      geometry: {
        coordinates: [
          32.1233,
          34.925
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TODRO"
      },
      geometry: {
        coordinates: [
          23.3625,
          42.9203
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TODSI"
      },
      geometry: {
        coordinates: [
          38.105,
          43.41
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TOKER"
      },
      geometry: {
        coordinates: [
          30.7722,
          40.3133
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TOLBA"
      },
      geometry: {
        coordinates: [
          34.4,
          45.1
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TOLRU"
      },
      geometry: {
        coordinates: [
          47.6525,
          45.6481
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TOLUN"
      },
      geometry: {
        coordinates: [
          38.79,
          41.34
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TOMBI"
      },
      geometry: {
        coordinates: [
          30.825,
          36.0411
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TOPLU"
      },
      geometry: {
        coordinates: [
          28.1731,
          41.4786
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TOPUZ"
      },
      geometry: {
        coordinates: [
          30.7728,
          36.7547
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TOSKA"
      },
      geometry: {
        coordinates: [
          30,
          34.9667
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TOSVI"
      },
      geometry: {
        coordinates: [
          25.1614,
          44.7539
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TOTAM"
      },
      geometry: {
        coordinates: [
          44.6683,
          35.2669
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TOTBO"
      },
      geometry: {
        coordinates: [
          45.4828,
          37.5819
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TOTKA"
      },
      geometry: {
        coordinates: [
          27.1167,
          43.2056
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TOTMA"
      },
      geometry: {
        coordinates: [
          34.0739,
          43.7739
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TR03L"
      },
      geometry: {
        coordinates: [
          32.9836,
          40.1178
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TR03R"
      },
      geometry: {
        coordinates: [
          32.9831,
          40.1142
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TR05"
      },
      geometry: {
        coordinates: [
          28.8114,
          40.9664
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TR06"
      },
      geometry: {
        coordinates: [
          29.2933,
          40.8928
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TR21L"
      },
      geometry: {
        coordinates: [
          33.0092,
          40.1414
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TR21R"
      },
      geometry: {
        coordinates: [
          33.0072,
          40.1425
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TR23"
      },
      geometry: {
        coordinates: [
          28.8361,
          40.9778
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TR24"
      },
      geometry: {
        coordinates: [
          29.3253,
          40.9044
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TRL"
      },
      geometry: {
        coordinates: [
          22.3403,
          37.4039
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TSL"
      },
      geometry: {
        coordinates: [
          22.9911,
          40.4569
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TSL01"
      },
      geometry: {
        coordinates: [
          22.9933,
          40.4628
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TSL05"
      },
      geometry: {
        coordinates: [
          22.8919,
          40.6719
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TSL10"
      },
      geometry: {
        coordinates: [
          22.5439,
          40.42
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TSL11"
      },
      geometry: {
        coordinates: [
          22.585,
          40.2956
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TSL12"
      },
      geometry: {
        coordinates: [
          22.5872,
          40.6381
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TSR"
      },
      geometry: {
        coordinates: [
          21.3053,
          45.8178
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TUBAR"
      },
      geometry: {
        coordinates: [
          45.4358,
          37.505
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TUDBU"
      },
      geometry: {
        coordinates: [
          27.7769,
          41.9667
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TUDEK"
      },
      geometry: {
        coordinates: [
          39.4031,
          42.1839
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TUDMU"
      },
      geometry: {
        coordinates: [
          38.125,
          34.5167
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TUDNU"
      },
      geometry: {
        coordinates: [
          44.7217,
          37.8561
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TUGEL"
      },
      geometry: {
        coordinates: [
          47.0789,
          36.2056
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TUGSO"
      },
      geometry: {
        coordinates: [
          27.5814,
          42.9372
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TUKDO"
      },
      geometry: {
        coordinates: [
          47.7461,
          38.7739
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TUKLO"
      },
      geometry: {
        coordinates: [
          47.2975,
          35.1706
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TUKTU"
      },
      geometry: {
        coordinates: [
          32.7161,
          36.3347
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TULNU"
      },
      geometry: {
        coordinates: [
          27.0044,
          46.2806
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TUMER"
      },
      geometry: {
        coordinates: [
          29.4703,
          38.6656
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TUMKU"
      },
      geometry: {
        coordinates: [
          42.1061,
          38.5514
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TUNCA"
      },
      geometry: {
        coordinates: [
          31.0311,
          41.2328
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TUNLA"
      },
      geometry: {
        coordinates: [
          36.0333,
          35.8833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TUNOT"
      },
      geometry: {
        coordinates: [
          37.3983,
          44.7164
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TUNSA"
      },
      geometry: {
        coordinates: [
          32.7583,
          43.9233
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TUNVO"
      },
      geometry: {
        coordinates: [
          25.3878,
          43.1422
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TUREL"
      },
      geometry: {
        coordinates: [
          30.1694,
          44.7122
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TUREN"
      },
      geometry: {
        coordinates: [
          24.5386,
          38.4292
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TURIR"
      },
      geometry: {
        coordinates: [
          28.6561,
          44.8328
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TURKO"
      },
      geometry: {
        coordinates: [
          27.5867,
          40.6494
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TURNA"
      },
      geometry: {
        coordinates: [
          41.3578,
          39.5586
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TUSOK"
      },
      geometry: {
        coordinates: [
          42.8986,
          45.0331
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TUSYR"
      },
      geometry: {
        coordinates: [
          37.3831,
          36.6489
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TUTAK"
      },
      geometry: {
        coordinates: [
          45.5461,
          40.1342
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TUXAZ"
      },
      geometry: {
        coordinates: [
          44.7436,
          39.7081
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TUXEM"
      },
      geometry: {
        coordinates: [
          25.0817,
          36.9203
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TZK"
      },
      geometry: {
        coordinates: [
          34.5428,
          38.7667
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TZKXA"
      },
      geometry: {
        coordinates: [
          34.5192,
          38.7772
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "TZKXD"
      },
      geometry: {
        coordinates: [
          34.55,
          38.765
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UBAKU"
      },
      geometry: {
        coordinates: [
          22.2131,
          45.5117
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UBARO"
      },
      geometry: {
        coordinates: [
          47.1006,
          45.725
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UBOGU"
      },
      geometry: {
        coordinates: [
          24.6683,
          44.7631
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UDROS"
      },
      geometry: {
        coordinates: [
          30.5961,
          42.7389
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UDVAR"
      },
      geometry: {
        coordinates: [
          21.0406,
          43.1158
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UDVET"
      },
      geometry: {
        coordinates: [
          35.5336,
          38.315
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UDYZ"
      },
      geometry: {
        coordinates: [
          44.3958,
          40.1472
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UGADA"
      },
      geometry: {
        coordinates: [
          43.0319,
          43.4664
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UH"
      },
      geometry: {
        coordinates: [
          40.09,
          45.8519
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UKOO"
      },
      geometry: {
        coordinates: [
          30.6781,
          46.4269
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UKSIS"
      },
      geometry: {
        coordinates: [
          48.6672,
          33.3664
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ULANA"
      },
      geometry: {
        coordinates: [
          43.7819,
          43.3164
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ULGAN"
      },
      geometry: {
        coordinates: [
          40.6925,
          39.6417
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ULGEK"
      },
      geometry: {
        coordinates: [
          30.9372,
          45.7297
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ULGUR"
      },
      geometry: {
        coordinates: [
          31.3269,
          41.1333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ULKAN"
      },
      geometry: {
        coordinates: [
          28.1258,
          37.3025
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ULKEM"
      },
      geometry: {
        coordinates: [
          43.3647,
          38.1106
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ULKUR"
      },
      geometry: {
        coordinates: [
          43.4003,
          39.7889
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ULMAR"
      },
      geometry: {
        coordinates: [
          27.1869,
          41.2111
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ULMIN"
      },
      geometry: {
        coordinates: [
          23.3981,
          45.8139
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ULMIP"
      },
      geometry: {
        coordinates: [
          30.6869,
          41.6522
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ULNAS"
      },
      geometry: {
        coordinates: [
          41.5644,
          43.9167
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ULRAS"
      },
      geometry: {
        coordinates: [
          34.1125,
          38.9933
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ULREP"
      },
      geometry: {
        coordinates: [
          40.8878,
          39.3817
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ULSAB"
      },
      geometry: {
        coordinates: [
          41.1314,
          38.1425
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ULTED"
      },
      geometry: {
        coordinates: [
          41.8261,
          38.3506
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ULVEX"
      },
      geometry: {
        coordinates: [
          31.5308,
          41.5828
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UMDOT"
      },
      geometry: {
        coordinates: [
          33.2869,
          36.3825
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UMESA"
      },
      geometry: {
        coordinates: [
          43.7186,
          35.2947
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UMH"
      },
      geometry: {
        coordinates: [
          45.0844,
          37.6872
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UMLEN"
      },
      geometry: {
        coordinates: [
          40.2167,
          38.6617
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UMPIT"
      },
      geometry: {
        coordinates: [
          24.1742,
          42.7797
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UMRUN"
      },
      geometry: {
        coordinates: [
          31.8781,
          40.1861
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UNAMI"
      },
      geometry: {
        coordinates: [
          38.78,
          43.2631
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UNEPA"
      },
      geometry: {
        coordinates: [
          39.7583,
          45.5081
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UNEPI"
      },
      geometry: {
        coordinates: [
          30.1978,
          38.2494
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UNLIR"
      },
      geometry: {
        coordinates: [
          28.085,
          41.7942
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UNOBA"
      },
      geometry: {
        coordinates: [
          34.3331,
          38.6664
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UNSAV"
      },
      geometry: {
        coordinates: [
          28.7897,
          41.4783
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UNSUL"
      },
      geometry: {
        coordinates: [
          31.3086,
          41.7664
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UNVUS"
      },
      geometry: {
        coordinates: [
          32.1414,
          41.695
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UPAMA"
      },
      geometry: {
        coordinates: [
          25.4183,
          43.6264
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UPKAG"
      },
      geometry: {
        coordinates: [
          34.1353,
          41.4547
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UPKUL"
      },
      geometry: {
        coordinates: [
          30.3175,
          38.5317
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UREBO"
      },
      geometry: {
        coordinates: [
          37.1442,
          38.7894
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "URELA"
      },
      geometry: {
        coordinates: [
          26.5611,
          45.4967
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "URGUP"
      },
      geometry: {
        coordinates: [
          34.03,
          38.5211
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "URITA"
      },
      geometry: {
        coordinates: [
          34.3967,
          43.2867
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "URKK"
      },
      geometry: {
        coordinates: [
          39.17,
          45.0347
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "URM"
      },
      geometry: {
        coordinates: [
          43.6011,
          43.5458
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "URMM"
      },
      geometry: {
        coordinates: [
          43.0831,
          44.2267
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "URNIL"
      },
      geometry: {
        coordinates: [
          26.5286,
          37.685
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "URUDI"
      },
      geometry: {
        coordinates: [
          24.5225,
          38.6103
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "USALI"
      },
      geometry: {
        coordinates: [
          23.6456,
          42.3019
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "USANU"
      },
      geometry: {
        coordinates: [
          36.0625,
          40.9356
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "USINI"
      },
      geometry: {
        coordinates: [
          27.1317,
          36.6769
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UTEKA"
      },
      geometry: {
        coordinates: [
          22.3922,
          43.9122
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UTURI"
      },
      geometry: {
        coordinates: [
          37.9747,
          39.8736
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UTUSO"
      },
      geometry: {
        coordinates: [
          31.7106,
          36.4497
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UVALU"
      },
      geometry: {
        coordinates: [
          25.4442,
          44.7108
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UVTOL"
      },
      geometry: {
        coordinates: [
          28.3128,
          37.7675
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UVUDA"
      },
      geometry: {
        coordinates: [
          27.8036,
          42.2253
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "UVULU"
      },
      geometry: {
        coordinates: [
          34.5364,
          41.5703
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VABUR"
      },
      geometry: {
        coordinates: [
          28.0597,
          42.5031
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VADEN"
      },
      geometry: {
        coordinates: [
          27.2161,
          42.0656
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VADUS"
      },
      geometry: {
        coordinates: [
          32.0581,
          35.3053
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VAGEN"
      },
      geometry: {
        coordinates: [
          22.0778,
          42.7247
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VAGSI"
      },
      geometry: {
        coordinates: [
          29.9472,
          41.4608
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VAKIS"
      },
      geometry: {
        coordinates: [
          28.7247,
          43.8522
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VAKTI"
      },
      geometry: {
        coordinates: [
          37.8894,
          40.7683
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VAKUL"
      },
      geometry: {
        coordinates: [
          42.1417,
          37.8942
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VAKUM"
      },
      geometry: {
        coordinates: [
          28.2581,
          38.5022
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VAMKO"
      },
      geometry: {
        coordinates: [
          23.9942,
          40.7647
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VAMON"
      },
      geometry: {
        coordinates: [
          24.6797,
          44.3994
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VAN"
      },
      geometry: {
        coordinates: [
          43.325,
          38.4661
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VANES"
      },
      geometry: {
        coordinates: [
          27.7317,
          36.385
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VANET"
      },
      geometry: {
        coordinates: [
          23.4103,
          42.2947
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VANIX"
      },
      geometry: {
        coordinates: [
          21.3908,
          34.8275
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VANXA"
      },
      geometry: {
        coordinates: [
          43.3411,
          38.4783
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VANXD"
      },
      geometry: {
        coordinates: [
          43.3108,
          38.4528
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VAPEK"
      },
      geometry: {
        coordinates: [
          31.6944,
          37.3667
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VARDI"
      },
      geometry: {
        coordinates: [
          21.9511,
          38.6719
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VARIX"
      },
      geometry: {
        coordinates: [
          25.0342,
          37.3639
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VARTO"
      },
      geometry: {
        coordinates: [
          41.545,
          39.0661
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VASIS"
      },
      geometry: {
        coordinates: [
          22.4081,
          45.9533
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VASTE"
      },
      geometry: {
        coordinates: [
          28.8911,
          40.9614
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VAXEB"
      },
      geometry: {
        coordinates: [
          33.5786,
          41.5969
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VAXEN"
      },
      geometry: {
        coordinates: [
          45.25,
          33.3
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VAXOS"
      },
      geometry: {
        coordinates: [
          29.3344,
          34.9931
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VEDIX"
      },
      geometry: {
        coordinates: [
          21.4403,
          40.3481
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VEGES"
      },
      geometry: {
        coordinates: [
          25.6756,
          35.2089
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VELBA"
      },
      geometry: {
        coordinates: [
          22.8833,
          41.9667
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VELIP"
      },
      geometry: {
        coordinates: [
          21.5333,
          44.7717
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VELOP"
      },
      geometry: {
        coordinates: [
          23.2867,
          37.1492
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VELOX"
      },
      geometry: {
        coordinates: [
          34.0833,
          33.8167
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VEMAG"
      },
      geometry: {
        coordinates: [
          31.1358,
          41.6789
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VEMEK"
      },
      geometry: {
        coordinates: [
          31.9222,
          36.4722
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VEPUM"
      },
      geometry: {
        coordinates: [
          33.4172,
          42.4206
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VERCA"
      },
      geometry: {
        coordinates: [
          45.6572,
          41.2081
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VESAR"
      },
      geometry: {
        coordinates: [
          34.0167,
          35.9167
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VETEN"
      },
      geometry: {
        coordinates: [
          45.9561,
          40.1342
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VEVEN"
      },
      geometry: {
        coordinates: [
          37.6383,
          39.4528
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VEVIN"
      },
      geometry: {
        coordinates: [
          26.6519,
          44.7131
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VEVUD"
      },
      geometry: {
        coordinates: [
          31.2222,
          40.3808
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VEXOL"
      },
      geometry: {
        coordinates: [
          26.1994,
          38.3489
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VEZIN"
      },
      geometry: {
        coordinates: [
          32.7244,
          40.055
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VIKBI"
      },
      geometry: {
        coordinates: [
          24.6558,
          44.2586
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VIRAN"
      },
      geometry: {
        coordinates: [
          41.7028,
          40.1186
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VIVIA"
      },
      geometry: {
        coordinates: [
          23.4161,
          39.9717
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VLADA"
      },
      geometry: {
        coordinates: [
          49.3614,
          40.5131
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VUSEB"
      },
      geometry: {
        coordinates: [
          43.8,
          36.2769
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VUSOR"
      },
      geometry: {
        coordinates: [
          23.3547,
          33
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "VUVAG"
      },
      geometry: {
        coordinates: [
          45.4906,
          38.4247
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "WAK"
      },
      geometry: {
        coordinates: [
          23.7044,
          42.575
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "WRN"
      },
      geometry: {
        coordinates: [
          27.8172,
          43.2311
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "XANEX"
      },
      geometry: {
        coordinates: [
          24.9803,
          43.1272
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "XANIS"
      },
      geometry: {
        coordinates: [
          22.1858,
          38.5722
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "XAVIS"
      },
      geometry: {
        coordinates: [
          25.5769,
          35.6947
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "XAXAN"
      },
      geometry: {
        coordinates: [
          21.3269,
          42.1367
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "XERBO"
      },
      geometry: {
        coordinates: [
          49.0947,
          40.0292
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "XERIS"
      },
      geometry: {
        coordinates: [
          24.1403,
          41.1539
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "XILTI"
      },
      geometry: {
        coordinates: [
          28.1372,
          42.6431
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "XORKI"
      },
      geometry: {
        coordinates: [
          23.5092,
          38.1697
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "XT"
      },
      geometry: {
        coordinates: [
          39.5764,
          44.9622
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "Y1LSV"
      },
      geometry: {
        coordinates: [
          26.2267,
          39.1686
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "Y1SPA"
      },
      geometry: {
        coordinates: [
          24.0758,
          38.0856
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "Y1TRL"
      },
      geometry: {
        coordinates: [
          21.6489,
          38.0025
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "Y3LCA"
      },
      geometry: {
        coordinates: [
          33.3672,
          34.8311
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "Y5SM"
      },
      geometry: {
        coordinates: [
          38.8011,
          44.7744
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "Y7ARA"
      },
      geometry: {
        coordinates: [
          21.3053,
          38.3892
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "Y7SPA"
      },
      geometry: {
        coordinates: [
          23.7339,
          37.5697
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YAA"
      },
      geometry: {
        coordinates: [
          29.2075,
          40.475
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YAG"
      },
      geometry: {
        coordinates: [
          39.0267,
          44.1394
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YAHAV"
      },
      geometry: {
        coordinates: [
          31.0817,
          41.84
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YAI24"
      },
      geometry: {
        coordinates: [
          30.8175,
          37.0811
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YAI25"
      },
      geometry: {
        coordinates: [
          30.8561,
          37.3628
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YAI26"
      },
      geometry: {
        coordinates: [
          31.0286,
          37.6669
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YAI27"
      },
      geometry: {
        coordinates: [
          31.2311,
          37.0436
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YAI28"
      },
      geometry: {
        coordinates: [
          31.3517,
          36.5544
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YAMAN"
      },
      geometry: {
        coordinates: [
          31.4239,
          40.2397
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YASEN"
      },
      geometry: {
        coordinates: [
          29.5161,
          41.1989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YASER"
      },
      geometry: {
        coordinates: [
          47.0822,
          33.9806
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YAVRU"
      },
      geometry: {
        coordinates: [
          31.8328,
          40.5822
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YAVUZ"
      },
      geometry: {
        coordinates: [
          42.4333,
          40.0444
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YAYLA"
      },
      geometry: {
        coordinates: [
          27.9953,
          39.8656
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YBG01"
      },
      geometry: {
        coordinates: [
          27.2172,
          42.5614
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YBG02"
      },
      geometry: {
        coordinates: [
          27.2633,
          42.4986
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YBG04"
      },
      geometry: {
        coordinates: [
          27.1378,
          42.4031
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YBG05"
      },
      geometry: {
        coordinates: [
          27.2186,
          42.345
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YBG13"
      },
      geometry: {
        coordinates: [
          27.5514,
          42.4783
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YBG14"
      },
      geometry: {
        coordinates: [
          27.4881,
          42.4303
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YBG17"
      },
      geometry: {
        coordinates: [
          27.2992,
          42.2867
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YBG30"
      },
      geometry: {
        coordinates: [
          27.9283,
          42.7611
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YBGS"
      },
      geometry: {
        coordinates: [
          27.5381,
          42.5872
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YBRAV"
      },
      geometry: {
        coordinates: [
          36.6531,
          34.6933
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YBRY"
      },
      geometry: {
        coordinates: [
          29.5939,
          40.2625
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YBT3"
      },
      geometry: {
        coordinates: [
          43.6503,
          42.0897
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YCEDA"
      },
      geometry: {
        coordinates: [
          36.0011,
          34.2869
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YCRL"
      },
      geometry: {
        coordinates: [
          27.935,
          41.1506
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YDEK1"
      },
      geometry: {
        coordinates: [
          34.3161,
          32.3531
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YDIGR"
      },
      geometry: {
        coordinates: [
          38.3,
          43.3681
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YDV"
      },
      geometry: {
        coordinates: [
          38.7039,
          44.3106
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YE440"
      },
      geometry: {
        coordinates: [
          44.4456,
          40.0983
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YE470"
      },
      geometry: {
        coordinates: [
          44.6964,
          40.3411
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YER"
      },
      geometry: {
        coordinates: [
          44.4558,
          40.1044
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YF423"
      },
      geometry: {
        coordinates: [
          23.0708,
          42.6331
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YHAM"
      },
      geometry: {
        coordinates: [
          48.5506,
          34.8669
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YI512"
      },
      geometry: {
        coordinates: [
          30.3086,
          37.1028
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YI513"
      },
      geometry: {
        coordinates: [
          30.5342,
          37.5103
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YI514"
      },
      geometry: {
        coordinates: [
          30.5203,
          37.2094
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YI515"
      },
      geometry: {
        coordinates: [
          30.5167,
          37.0978
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YI516"
      },
      geometry: {
        coordinates: [
          30.6844,
          37.0286
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YI521"
      },
      geometry: {
        coordinates: [
          30.6392,
          36.6936
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YI711"
      },
      geometry: {
        coordinates: [
          31.1919,
          36.6294
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YI713"
      },
      geometry: {
        coordinates: [
          31.2269,
          36.8761
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YI715"
      },
      geometry: {
        coordinates: [
          31.0033,
          37.0644
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YI716"
      },
      geometry: {
        coordinates: [
          30.9461,
          36.9808
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YI717"
      },
      geometry: {
        coordinates: [
          30.9353,
          36.9028
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YI721"
      },
      geometry: {
        coordinates: [
          30.9033,
          36.6703
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YKAD"
      },
      geometry: {
        coordinates: [
          35.4858,
          33.8075
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YKAM2"
      },
      geometry: {
        coordinates: [
          22.03,
          36.7828
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YKAM3"
      },
      geometry: {
        coordinates: [
          21.8944,
          37.3661
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YKAR"
      },
      geometry: {
        coordinates: [
          43.1039,
          40.5567
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YKAS"
      },
      geometry: {
        coordinates: [
          21.2753,
          40.4511
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YKERS"
      },
      geometry: {
        coordinates: [
          24.51,
          38.9797
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YKTN1"
      },
      geometry: {
        coordinates: [
          37.2642,
          34.2133
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YKV"
      },
      geometry: {
        coordinates: [
          44.2425,
          37.5492
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YLA1"
      },
      geometry: {
        coordinates: [
          39.3378,
          43.9103
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YLU3"
      },
      geometry: {
        coordinates: [
          41.6142,
          41.6014
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YMNW"
      },
      geometry: {
        coordinates: [
          43.0536,
          44.2397
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YND1"
      },
      geometry: {
        coordinates: [
          40.2442,
          45.7639
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YORER"
      },
      geometry: {
        coordinates: [
          43.9486,
          36.2272
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YORI"
      },
      geometry: {
        coordinates: [
          38.0944,
          40.9644
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YORSU"
      },
      geometry: {
        coordinates: [
          45.3067,
          35.5578
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YPR"
      },
      geometry: {
        coordinates: [
          41.4792,
          44.1181
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YSIN"
      },
      geometry: {
        coordinates: [
          22.3656,
          41.9808
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YSIT2"
      },
      geometry: {
        coordinates: [
          28.2028,
          42.9278
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YSOF"
      },
      geometry: {
        coordinates: [
          23.38,
          42.8311
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YUCEL"
      },
      geometry: {
        coordinates: [
          33.5853,
          39.5789
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YUNUS"
      },
      geometry: {
        coordinates: [
          27.8833,
          36.7097
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YUP"
      },
      geometry: {
        coordinates: [
          47.0603,
          45.9272
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YWN24"
      },
      geometry: {
        coordinates: [
          27.555,
          43.1717
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YWN28"
      },
      geometry: {
        coordinates: [
          27.2964,
          43.2778
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YWN37"
      },
      geometry: {
        coordinates: [
          27.7978,
          43.0664
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YWN44"
      },
      geometry: {
        coordinates: [
          27.3678,
          43.1039
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YYE01"
      },
      geometry: {
        coordinates: [
          44.4147,
          40.1164
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YYE02"
      },
      geometry: {
        coordinates: [
          44.4058,
          40.0617
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YZ400"
      },
      geometry: {
        coordinates: [
          44.125,
          40.1389
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YZ420"
      },
      geometry: {
        coordinates: [
          44.2208,
          40.0556
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YZ421"
      },
      geometry: {
        coordinates: [
          44.1361,
          40.0639
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YZ455"
      },
      geometry: {
        coordinates: [
          44.3519,
          40.1472
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "YZ457"
      },
      geometry: {
        coordinates: [
          44.6567,
          40.3681
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ZAHAV"
      },
      geometry: {
        coordinates: [
          34.81,
          32.8144
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ZAJ"
      },
      geometry: {
        coordinates: [
          48.3533,
          36.7797
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ZELAF"
      },
      geometry: {
        coordinates: [
          37.9997,
          32.9489
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ZELSU"
      },
      geometry: {
        coordinates: [
          43.7831,
          38.2656
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ZUITA"
      },
      geometry: {
        coordinates: [
          39.6339,
          38.3631
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ZVR"
      },
      geometry: {
        coordinates: [
          44.3381,
          40.1469
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ZVR01"
      },
      geometry: {
        coordinates: [
          44.3506,
          40.1997
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "beacon",
        name: "ZVR02"
      },
      geometry: {
        coordinates: [
          44.3522,
          40.0925
        ],
        type: "Point"
      }
    }
  ]
};

// apps/simulator/src/geojsons/airports.json
var airports_default = {
  type: "FeatureCollection",
  features: [
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "BKPR"
      },
      geometry: {
        coordinates: [
          21.0358,
          42.5742
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "CYYZ"
      },
      geometry: {
        coordinates: [
          -79.6306,
          43.6772
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "DFFD"
      },
      geometry: {
        coordinates: [
          -1.5119,
          12.3536
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "DNAA"
      },
      geometry: {
        coordinates: [
          7.265,
          9.005
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EBBR"
      },
      geometry: {
        coordinates: [
          4.4844,
          50.9014
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EBCI"
      },
      geometry: {
        coordinates: [
          4.4528,
          50.46
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EBLG"
      },
      geometry: {
        coordinates: [
          5.4428,
          50.6364
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EDDB"
      },
      geometry: {
        coordinates: [
          13.5006,
          52.3622
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EDDF"
      },
      geometry: {
        coordinates: [
          8.5706,
          50.0333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EDDH"
      },
      geometry: {
        coordinates: [
          9.9883,
          53.6303
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EDDK"
      },
      geometry: {
        coordinates: [
          7.1428,
          50.8658
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EDDL"
      },
      geometry: {
        coordinates: [
          6.7572,
          51.2808
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EDDM"
      },
      geometry: {
        coordinates: [
          11.7861,
          48.3539
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EDDN"
      },
      geometry: {
        coordinates: [
          11.0781,
          49.4986
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EDDP"
      },
      geometry: {
        coordinates: [
          12.2364,
          51.4239
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EDDR"
      },
      geometry: {
        coordinates: [
          7.1094,
          49.2144
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EDDS"
      },
      geometry: {
        coordinates: [
          9.2219,
          48.69
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EDDT"
      },
      geometry: {
        coordinates: [
          13.2878,
          52.5597
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EDDV"
      },
      geometry: {
        coordinates: [
          9.6836,
          52.4603
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EDFH"
      },
      geometry: {
        coordinates: [
          7.2639,
          49.9486
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EDJA"
      },
      geometry: {
        coordinates: [
          10.2394,
          47.9889
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EDLP"
      },
      geometry: {
        coordinates: [
          8.6164,
          51.6142
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EDSB"
      },
      geometry: {
        coordinates: [
          8.0806,
          48.7794
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EFHK"
      },
      geometry: {
        coordinates: [
          24.9633,
          60.3172
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EGBB"
      },
      geometry: {
        coordinates: [
          -1.7481,
          52.4539
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EGCC"
      },
      geometry: {
        coordinates: [
          -2.275,
          53.3539
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EGFF"
      },
      geometry: {
        coordinates: [
          -3.3433,
          51.3967
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EGGD"
      },
      geometry: {
        coordinates: [
          -2.7192,
          51.3828
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EGGP"
      },
      geometry: {
        coordinates: [
          -2.8497,
          53.3336
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EGGW"
      },
      geometry: {
        coordinates: [
          -0.3683,
          51.8747
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EGHH"
      },
      geometry: {
        coordinates: [
          -1.8425,
          50.78
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EGKK"
      },
      geometry: {
        coordinates: [
          -0.1903,
          51.1481
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EGLL"
      },
      geometry: {
        coordinates: [
          -0.4614,
          51.4775
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EGNM"
      },
      geometry: {
        coordinates: [
          -1.6608,
          53.8661
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EGNT"
      },
      geometry: {
        coordinates: [
          -1.6897,
          55.0381
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EGPF"
      },
      geometry: {
        coordinates: [
          -4.4331,
          55.8719
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EGPH"
      },
      geometry: {
        coordinates: [
          -3.3725,
          55.95
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EGSS"
      },
      geometry: {
        coordinates: [
          0.235,
          51.885
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EGTE"
      },
      geometry: {
        coordinates: [
          -3.4139,
          50.7342
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EGVN"
      },
      geometry: {
        coordinates: [
          -1.5831,
          51.75
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EHAM"
      },
      geometry: {
        coordinates: [
          4.7642,
          52.3081
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EHRD"
      },
      geometry: {
        coordinates: [
          4.4372,
          51.9569
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EIDW"
      },
      geometry: {
        coordinates: [
          -6.27,
          53.4214
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EINN"
      },
      geometry: {
        coordinates: [
          -8.9247,
          52.7019
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EKBI"
      },
      geometry: {
        coordinates: [
          9.1517,
          55.7403
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EKCH"
      },
      geometry: {
        coordinates: [
          12.6561,
          55.6181
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EKYT"
      },
      geometry: {
        coordinates: [
          9.8492,
          57.0928
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "ELLX"
      },
      geometry: {
        coordinates: [
          6.2044,
          49.6233
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "ENBR"
      },
      geometry: {
        coordinates: [
          5.2181,
          60.2936
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "ENGM"
      },
      geometry: {
        coordinates: [
          11.0839,
          60.2028
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EPKK"
      },
      geometry: {
        coordinates: [
          19.7847,
          50.0778
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EPKT"
      },
      geometry: {
        coordinates: [
          19.08,
          50.4742
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EPWA"
      },
      geometry: {
        coordinates: [
          20.9672,
          52.1658
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EPWR"
      },
      geometry: {
        coordinates: [
          16.8858,
          51.1028
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "ESGG"
      },
      geometry: {
        coordinates: [
          12.2911,
          57.66
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "ESSA"
      },
      geometry: {
        coordinates: [
          17.9186,
          59.6519
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EVRA"
      },
      geometry: {
        coordinates: [
          23.9711,
          56.9236
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "EYVI"
      },
      geometry: {
        coordinates: [
          25.2878,
          54.6369
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "FKKD"
      },
      geometry: {
        coordinates: [
          9.7083,
          4.0117
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "FMNN"
      },
      geometry: {
        coordinates: [
          48.3092,
          -13.3181
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "FZAA"
      },
      geometry: {
        coordinates: [
          15.445,
          -4.385
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "GMMN"
      },
      geometry: {
        coordinates: [
          -7.5817,
          33.3642
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "HAAB"
      },
      geometry: {
        coordinates: [
          38.8,
          8.9833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "HECA"
      },
      geometry: {
        coordinates: [
          31.4139,
          30.1114
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "HEGN"
      },
      geometry: {
        coordinates: [
          33.8008,
          27.1786
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "HESH"
      },
      geometry: {
        coordinates: [
          34.3933,
          27.9786
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "HRYR"
      },
      geometry: {
        coordinates: [
          30.1333,
          -1.9667
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "KBGR"
      },
      geometry: {
        coordinates: [
          -68.8283,
          44.8067
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "KBOS"
      },
      geometry: {
        coordinates: [
          -71.0056,
          42.3642
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "KEWR"
      },
      geometry: {
        coordinates: [
          -74.1683,
          40.6967
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "KFLL"
      },
      geometry: {
        coordinates: [
          -80.15,
          26.0667
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "KIAD"
      },
      geometry: {
        coordinates: [
          -77.4567,
          38.945
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "KJFK"
      },
      geometry: {
        coordinates: [
          -73.7783,
          40.6403
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "KSFO"
      },
      geometry: {
        coordinates: [
          -122.3833,
          37.6167
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LATI"
      },
      geometry: {
        coordinates: [
          19.7206,
          41.4147
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LBBG"
      },
      geometry: {
        coordinates: [
          27.5153,
          42.5703
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LBSF"
      },
      geometry: {
        coordinates: [
          23.4083,
          42.695
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LBWN"
      },
      geometry: {
        coordinates: [
          27.8253,
          43.2319
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LCLK"
      },
      geometry: {
        coordinates: [
          33.6303,
          34.8789
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LCPH"
      },
      geometry: {
        coordinates: [
          32.485,
          34.7183
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LCRA"
      },
      geometry: {
        coordinates: [
          32.9908,
          34.595
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LDZA"
      },
      geometry: {
        coordinates: [
          16.0689,
          45.7431
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LEBL"
      },
      geometry: {
        coordinates: [
          2.0783,
          41.2969
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LEMD"
      },
      geometry: {
        coordinates: [
          -3.5608,
          40.4722
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LEMG"
      },
      geometry: {
        coordinates: [
          -4.4992,
          36.675
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LEPA"
      },
      geometry: {
        coordinates: [
          2.7389,
          39.5517
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LFLL"
      },
      geometry: {
        coordinates: [
          5.0811,
          45.7256
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LFML"
      },
      geometry: {
        coordinates: [
          5.215,
          43.4367
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LFMN"
      },
      geometry: {
        coordinates: [
          7.215,
          43.6653
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LFPB"
      },
      geometry: {
        coordinates: [
          2.4414,
          48.9694
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LFPG"
      },
      geometry: {
        coordinates: [
          2.5478,
          49.0097
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LFPO"
      },
      geometry: {
        coordinates: [
          2.3794,
          48.7233
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LFSB"
      },
      geometry: {
        coordinates: [
          7.5292,
          47.59
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LFTH"
      },
      geometry: {
        coordinates: [
          6.1461,
          43.0972
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LGAV"
      },
      geometry: {
        coordinates: [
          23.9444,
          37.9367
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LGMK"
      },
      geometry: {
        coordinates: [
          25.3472,
          37.4372
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LGRP"
      },
      geometry: {
        coordinates: [
          28.0861,
          36.4053
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LGTS"
      },
      geometry: {
        coordinates: [
          22.9708,
          40.5197
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LHBP"
      },
      geometry: {
        coordinates: [
          19.2619,
          47.4394
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LICC"
      },
      geometry: {
        coordinates: [
          15.0639,
          37.4667
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LIEO"
      },
      geometry: {
        coordinates: [
          9.5178,
          40.8986
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LIMC"
      },
      geometry: {
        coordinates: [
          8.7231,
          45.63
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LIME"
      },
      geometry: {
        coordinates: [
          9.7003,
          45.6689
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LIPE"
      },
      geometry: {
        coordinates: [
          11.2969,
          44.5308
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LIPZ"
      },
      geometry: {
        coordinates: [
          12.3519,
          45.5053
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LIRF"
      },
      geometry: {
        coordinates: [
          12.2389,
          41.8003
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LIRN"
      },
      geometry: {
        coordinates: [
          14.2908,
          40.8844
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LIRP"
      },
      geometry: {
        coordinates: [
          10.3956,
          43.6828
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LJLJ"
      },
      geometry: {
        coordinates: [
          14.4561,
          46.2244
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LKMT"
      },
      geometry: {
        coordinates: [
          18.1108,
          49.6961
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LKPR"
      },
      geometry: {
        coordinates: [
          14.26,
          50.1008
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LKTB"
      },
      geometry: {
        coordinates: [
          16.6939,
          49.1514
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LLBG"
      },
      geometry: {
        coordinates: [
          34.8856,
          32.0094
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LOWI"
      },
      geometry: {
        coordinates: [
          11.3439,
          47.2603
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LOWW"
      },
      geometry: {
        coordinates: [
          16.5697,
          48.1103
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LQSA"
      },
      geometry: {
        coordinates: [
          18.3317,
          43.8244
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LQTZ"
      },
      geometry: {
        coordinates: [
          18.7247,
          44.4586
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LRIA"
      },
      geometry: {
        coordinates: [
          27.6208,
          47.1803
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LROD"
      },
      geometry: {
        coordinates: [
          21.9025,
          47.0253
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LROP"
      },
      geometry: {
        coordinates: [
          26.085,
          44.5711
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LRTR"
      },
      geometry: {
        coordinates: [
          21.3378,
          45.8097
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LSGG"
      },
      geometry: {
        coordinates: [
          6.1094,
          46.2383
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LSZH"
      },
      geometry: {
        coordinates: [
          8.5481,
          47.4581
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTAC"
      },
      geometry: {
        coordinates: [
          32.995,
          40.1281
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTAF"
      },
      geometry: {
        coordinates: [
          35.2803,
          36.9822
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTAI"
      },
      geometry: {
        coordinates: [
          30.7928,
          36.9003
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTAJ"
      },
      geometry: {
        coordinates: [
          37.4789,
          36.9478
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTAN"
      },
      geometry: {
        coordinates: [
          32.5625,
          37.9806
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTAR"
      },
      geometry: {
        coordinates: [
          36.9025,
          39.8142
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTAT"
      },
      geometry: {
        coordinates: [
          38.0831,
          38.4322
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTAU"
      },
      geometry: {
        coordinates: [
          35.4953,
          38.7703
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTAY"
      },
      geometry: {
        coordinates: [
          29.705,
          37.7878
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTAZ"
      },
      geometry: {
        coordinates: [
          34.5267,
          38.7753
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTBA"
      },
      geometry: {
        coordinates: [
          28.8142,
          40.9761
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTBJ"
      },
      geometry: {
        coordinates: [
          27.155,
          38.2892
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTBQ"
      },
      geometry: {
        coordinates: [
          30.0833,
          40.735
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTBR"
      },
      geometry: {
        coordinates: [
          29.5619,
          40.2558
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTBS"
      },
      geometry: {
        coordinates: [
          28.7914,
          36.7125
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTCA"
      },
      geometry: {
        coordinates: [
          39.2814,
          38.5978
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTCB"
      },
      geometry: {
        coordinates: [
          38.0819,
          40.9672
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTCC"
      },
      geometry: {
        coordinates: [
          40.2011,
          37.8925
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTCE"
      },
      geometry: {
        coordinates: [
          41.1706,
          39.9558
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTCF"
      },
      geometry: {
        coordinates: [
          43.0989,
          40.5586
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTCG"
      },
      geometry: {
        coordinates: [
          39.7853,
          40.9958
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTCI"
      },
      geometry: {
        coordinates: [
          43.3322,
          38.4681
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTCJ"
      },
      geometry: {
        coordinates: [
          41.1164,
          37.9322
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTCK"
      },
      geometry: {
        coordinates: [
          41.6689,
          38.7447
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTCN"
      },
      geometry: {
        coordinates: [
          36.9519,
          37.5383
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTCO"
      },
      geometry: {
        coordinates: [
          43.0286,
          39.6475
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTCR"
      },
      geometry: {
        coordinates: [
          40.6406,
          37.2328
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTCS"
      },
      geometry: {
        coordinates: [
          38.9083,
          37.4567
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTCV"
      },
      geometry: {
        coordinates: [
          42.06,
          37.3639
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTDA"
      },
      geometry: {
        coordinates: [
          36.2986,
          36.3722
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTFC"
      },
      geometry: {
        coordinates: [
          30.3669,
          37.8558
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTFE"
      },
      geometry: {
        coordinates: [
          27.6814,
          37.2472
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTFG"
      },
      geometry: {
        coordinates: [
          32.3014,
          36.2994
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTFH"
      },
      geometry: {
        coordinates: [
          36.5486,
          41.2656
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTFJ"
      },
      geometry: {
        coordinates: [
          29.3092,
          40.8983
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LTFM"
      },
      geometry: {
        coordinates: [
          28.7519,
          41.2753
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LUKK"
      },
      geometry: {
        coordinates: [
          28.9308,
          46.9278
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LYBE"
      },
      geometry: {
        coordinates: [
          20.3069,
          44.8194
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LYPG"
      },
      geometry: {
        coordinates: [
          19.2519,
          42.3594
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LYTV"
      },
      geometry: {
        coordinates: [
          18.7233,
          42.4047
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LZIB"
      },
      geometry: {
        coordinates: [
          17.2128,
          48.17
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "LZKZ"
      },
      geometry: {
        coordinates: [
          21.2411,
          48.6631
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "OAIX"
      },
      geometry: {
        coordinates: [
          69.265,
          34.9461
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "OBBI"
      },
      geometry: {
        coordinates: [
          50.6333,
          26.3
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "OEJN"
      },
      geometry: {
        coordinates: [
          39.1553,
          21.6811
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "OEMA"
      },
      geometry: {
        coordinates: [
          39.705,
          24.5533
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "OERK"
      },
      geometry: {
        coordinates: [
          46.7,
          24.9667
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "OIIE"
      },
      geometry: {
        coordinates: [
          51.1522,
          35.4161
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "OITT"
      },
      geometry: {
        coordinates: [
          46.235,
          38.1339
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "OJAI"
      },
      geometry: {
        coordinates: [
          35.9933,
          31.7225
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "OJAM"
      },
      geometry: {
        coordinates: [
          35.9917,
          31.9728
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "OKBK"
      },
      geometry: {
        coordinates: [
          47.9667,
          29.2167
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "OLBA"
      },
      geometry: {
        coordinates: [
          35.49,
          33.8192
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "OMAA"
      },
      geometry: {
        coordinates: [
          54.65,
          24.4333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "OMDB"
      },
      geometry: {
        coordinates: [
          55.36,
          25.2492
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "OMDW"
      },
      geometry: {
        coordinates: [
          55.1719,
          24.8861
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "OMFJ"
      },
      geometry: {
        coordinates: [
          56.3267,
          25.11
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "OMSJ"
      },
      geometry: {
        coordinates: [
          55.5167,
          25.3333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "OOMS"
      },
      geometry: {
        coordinates: [
          58.2667,
          23.5833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "ORBI"
      },
      geometry: {
        coordinates: [
          44.2344,
          33.2625
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "ORER"
      },
      geometry: {
        coordinates: [
          43.9631,
          36.2375
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "ORSU"
      },
      geometry: {
        coordinates: [
          45.3147,
          35.5608
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "OTBD"
      },
      geometry: {
        coordinates: [
          51.5667,
          25.2667
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "OTBH"
      },
      geometry: {
        coordinates: [
          51.3147,
          25.1172
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "OTHH"
      },
      geometry: {
        coordinates: [
          51.6083,
          25.2744
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "RKSI"
      },
      geometry: {
        coordinates: [
          126.4392,
          37.4625
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "UAAA"
      },
      geometry: {
        coordinates: [
          77.0406,
          43.3519
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "UACC"
      },
      geometry: {
        coordinates: [
          71.4669,
          51.0222
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "UATG"
      },
      geometry: {
        coordinates: [
          51.8214,
          47.1219
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "UBBB"
      },
      geometry: {
        coordinates: [
          50.0514,
          40.4697
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "UCFM"
      },
      geometry: {
        coordinates: [
          74.4775,
          43.0614
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "UDYZ"
      },
      geometry: {
        coordinates: [
          44.3958,
          40.1472
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "UGKO"
      },
      geometry: {
        coordinates: [
          42.4828,
          42.1769
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "UGSB"
      },
      geometry: {
        coordinates: [
          41.5994,
          41.6103
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "UGTB"
      },
      geometry: {
        coordinates: [
          44.9547,
          41.6692
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "UKBB"
      },
      geometry: {
        coordinates: [
          30.8933,
          50.3447
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "UKDE"
      },
      geometry: {
        coordinates: [
          35.315,
          47.8672
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "UKHH"
      },
      geometry: {
        coordinates: [
          36.29,
          49.9269
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "UKLL"
      },
      geometry: {
        coordinates: [
          23.9583,
          49.8097
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "UKOO"
      },
      geometry: {
        coordinates: [
          30.6764,
          46.4267
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "ULLI"
      },
      geometry: {
        coordinates: [
          30.2625,
          59.8003
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "UMII"
      },
      geometry: {
        coordinates: [
          30.3497,
          55.1264
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "UMMS"
      },
      geometry: {
        coordinates: [
          28.0308,
          53.8825
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "UNTT"
      },
      geometry: {
        coordinates: [
          85.2106,
          56.3831
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "UNWW"
      },
      geometry: {
        coordinates: [
          86.8783,
          53.81
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "URKK"
      },
      geometry: {
        coordinates: [
          39.17,
          45.0347
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "URMM"
      },
      geometry: {
        coordinates: [
          43.0831,
          44.2267
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "URMT"
      },
      geometry: {
        coordinates: [
          42.1122,
          45.1092
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "URRP"
      },
      geometry: {
        coordinates: [
          39.9247,
          47.4939
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "URSS"
      },
      geometry: {
        coordinates: [
          39.9483,
          43.445
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "USCC"
      },
      geometry: {
        coordinates: [
          61.505,
          55.305
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "USSS"
      },
      geometry: {
        coordinates: [
          60.8031,
          56.7431
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "UTAA"
      },
      geometry: {
        coordinates: [
          58.3633,
          37.9917
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "UTAK"
      },
      geometry: {
        coordinates: [
          53.0067,
          40.0633
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "UTSA"
      },
      geometry: {
        coordinates: [
          65.1717,
          40.1167
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "UTSS"
      },
      geometry: {
        coordinates: [
          66.9503,
          39.6667
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "UTTT"
      },
      geometry: {
        coordinates: [
          69.2833,
          41.2567
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "UUBW"
      },
      geometry: {
        coordinates: [
          38.1517,
          55.5533
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "UUDD"
      },
      geometry: {
        coordinates: [
          37.9064,
          55.4086
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "UUEE"
      },
      geometry: {
        coordinates: [
          37.4131,
          55.9725
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "UUOB"
      },
      geometry: {
        coordinates: [
          36.59,
          50.6439
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "UUWW"
      },
      geometry: {
        coordinates: [
          37.2731,
          55.5992
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "UWKD"
      },
      geometry: {
        coordinates: [
          49.2803,
          55.6069
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "UWUU"
      },
      geometry: {
        coordinates: [
          55.875,
          54.5567
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "VABB"
      },
      geometry: {
        coordinates: [
          72.8333,
          19.0908
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "VCBI"
      },
      geometry: {
        coordinates: [
          79.8842,
          7.1692
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "VGHS"
      },
      geometry: {
        coordinates: [
          90.4083,
          23.835
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "VIDP"
      },
      geometry: {
        coordinates: [
          77.1133,
          28.5686
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "VOBL"
      },
      geometry: {
        coordinates: [
          77.7061,
          13.1978
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "VOMM"
      },
      geometry: {
        coordinates: [
          80.1769,
          12.9936
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "VTBS"
      },
      geometry: {
        coordinates: [
          100.7472,
          13.6811
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "VTSP"
      },
      geometry: {
        coordinates: [
          98.3167,
          8.1133
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "VVTS"
      },
      geometry: {
        coordinates: [
          106.65,
          10.8167
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "WSSS"
      },
      geometry: {
        coordinates: [
          103.9892,
          1.3592
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "YPPH"
      },
      geometry: {
        coordinates: [
          115.9667,
          -31.94
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "ZBAA"
      },
      geometry: {
        coordinates: [
          116.6,
          40.0667
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "ZHHH"
      },
      geometry: {
        coordinates: [
          114.2067,
          30.785
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "ZUCK"
      },
      geometry: {
        coordinates: [
          106.64,
          29.72
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airport",
        name: "ZUUU"
      },
      geometry: {
        coordinates: [
          103.9483,
          30.58
        ],
        type: "Point"
      }
    }
  ]
};

// apps/simulator/src/geojsons/airwaypoints.json
var airwaypoints_default = {
  type: "FeatureCollection",
  features: [
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "UMRUN"
      },
      geometry: {
        coordinates: [
          31.8781,
          40.1861
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ODRUP"
      },
      geometry: {
        coordinates: [
          31.9161,
          40.2667
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SURUC"
      },
      geometry: {
        coordinates: [
          38.54,
          37.0633
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ORMAN"
      },
      geometry: {
        coordinates: [
          33.3858,
          41.2919
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "GELBU"
      },
      geometry: {
        coordinates: [
          27.1408,
          40.9353
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "UDROS"
      },
      geometry: {
        coordinates: [
          30.5961,
          42.7389
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ROLVI"
      },
      geometry: {
        coordinates: [
          31.8114,
          39.2178
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SALDA"
      },
      geometry: {
        coordinates: [
          30.0003,
          37.5553
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "IPT"
      },
      geometry: {
        coordinates: [
          30.3447,
          37.8422
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SARPI"
      },
      geometry: {
        coordinates: [
          41.4497,
          41.5489
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SERCE"
      },
      geometry: {
        coordinates: [
          27.3092,
          41.5772
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "OSRIN"
      },
      geometry: {
        coordinates: [
          33.4747,
          41.3044
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SOTIV"
      },
      geometry: {
        coordinates: [
          28.4833,
          36.55
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "YAVRU"
      },
      geometry: {
        coordinates: [
          31.8328,
          40.5822
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ARLAT"
      },
      geometry: {
        coordinates: [
          38.7019,
          41.0969
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ALMUS"
      },
      geometry: {
        coordinates: [
          36.6656,
          40.7742
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "INTAB"
      },
      geometry: {
        coordinates: [
          39.1019,
          39.9406
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TARSU"
      },
      geometry: {
        coordinates: [
          34.5206,
          36.6256
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NULRU"
      },
      geometry: {
        coordinates: [
          39.645,
          38.9789
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KILIS"
      },
      geometry: {
        coordinates: [
          37.4006,
          36.7036
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ADNOS"
      },
      geometry: {
        coordinates: [
          40.8533,
          39.3183
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "RELTU"
      },
      geometry: {
        coordinates: [
          32.3233,
          41.6442
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "PIMAV"
      },
      geometry: {
        coordinates: [
          29.9536,
          40.4006
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EKPOS"
      },
      geometry: {
        coordinates: [
          43.3772,
          40.6906
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KETEK"
      },
      geometry: {
        coordinates: [
          32.4783,
          36.8878
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "UNSUL"
      },
      geometry: {
        coordinates: [
          31.3086,
          41.7664
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EKMIN"
      },
      geometry: {
        coordinates: [
          40.8844,
          38.2842
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EKMIM"
      },
      geometry: {
        coordinates: [
          30.4817,
          38.2347
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "RIPNU"
      },
      geometry: {
        coordinates: [
          31.2103,
          40.5253
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NETPU"
      },
      geometry: {
        coordinates: [
          40.4189,
          40.9228
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ERMUP"
      },
      geometry: {
        coordinates: [
          31.0228,
          42.0006
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NENDO"
      },
      geometry: {
        coordinates: [
          34.2461,
          41.3253
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NUMTI"
      },
      geometry: {
        coordinates: [
          29.5242,
          39.6411
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EKSUK"
      },
      geometry: {
        coordinates: [
          34.3372,
          41.4025
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ERGIN"
      },
      geometry: {
        coordinates: [
          29.9994,
          37.23
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SUSUZ"
      },
      geometry: {
        coordinates: [
          41.6083,
          39.6808
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NUMSO"
      },
      geometry: {
        coordinates: [
          30.3453,
          40.9228
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "MIMTO"
      },
      geometry: {
        coordinates: [
          33.0467,
          41.8469
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "YAMAN"
      },
      geometry: {
        coordinates: [
          31.4239,
          40.2397
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "OKUDU"
      },
      geometry: {
        coordinates: [
          39.0144,
          38.5019
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EMLAD"
      },
      geometry: {
        coordinates: [
          37.6181,
          41.1869
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ODPOT"
      },
      geometry: {
        coordinates: [
          35.8661,
          40.9903
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "RUKAP"
      },
      geometry: {
        coordinates: [
          31.9661,
          37.8208
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TOMBI"
      },
      geometry: {
        coordinates: [
          30.825,
          36.0411
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "AZBUL"
      },
      geometry: {
        coordinates: [
          33.3619,
          39.3822
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "OTSIX"
      },
      geometry: {
        coordinates: [
          29.9561,
          39.7617
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TEVNI"
      },
      geometry: {
        coordinates: [
          30.3639,
          41.5914
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ALRAM"
      },
      geometry: {
        coordinates: [
          44.6267,
          37.7083
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NISAP"
      },
      geometry: {
        coordinates: [
          36.6414,
          36.7844
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ERTAS"
      },
      geometry: {
        coordinates: [
          29.1467,
          41.4614
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "MINSU"
      },
      geometry: {
        coordinates: [
          28.0561,
          39.0844
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TUSYR"
      },
      geometry: {
        coordinates: [
          37.3831,
          36.6489
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "DOKUB"
      },
      geometry: {
        coordinates: [
          29.8958,
          38.8914
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ERKOS"
      },
      geometry: {
        coordinates: [
          37.8839,
          41.1644
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BDR"
      },
      geometry: {
        coordinates: [
          27.6814,
          37.2469
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ATRIV"
      },
      geometry: {
        coordinates: [
          37.3186,
          40.2125
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "LEGMU"
      },
      geometry: {
        coordinates: [
          31.5892,
          41.9475
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NUNTU"
      },
      geometry: {
        coordinates: [
          37.3597,
          39.5797
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TALIL"
      },
      geometry: {
        coordinates: [
          39.9722,
          39.1889
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ELROP"
      },
      geometry: {
        coordinates: [
          32.6533,
          36.5061
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "POGEN"
      },
      geometry: {
        coordinates: [
          36.6936,
          37.5031
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EKI"
      },
      geometry: {
        coordinates: [
          27.4261,
          40.9511
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "GURBU"
      },
      geometry: {
        coordinates: [
          33.8328,
          40.1683
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "MARTI"
      },
      geometry: {
        coordinates: [
          35.1828,
          39.4017
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BEPTO"
      },
      geometry: {
        coordinates: [
          32.0533,
          36.2697
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "IST"
      },
      geometry: {
        coordinates: [
          28.8106,
          40.9614
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "LATSU"
      },
      geometry: {
        coordinates: [
          41.4139,
          39.4208
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ULGAN"
      },
      geometry: {
        coordinates: [
          40.6925,
          39.6417
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ASMAP"
      },
      geometry: {
        coordinates: [
          30.7114,
          40.6314
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ESOSU"
      },
      geometry: {
        coordinates: [
          33.5381,
          41.6072
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ROKVA"
      },
      geometry: {
        coordinates: [
          31.6572,
          41.8292
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "YAVUZ"
      },
      geometry: {
        coordinates: [
          42.4333,
          40.0444
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "VEMEK"
      },
      geometry: {
        coordinates: [
          31.9222,
          36.4722
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "AKSEK"
      },
      geometry: {
        coordinates: [
          28.2231,
          36.9261
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ADORU"
      },
      geometry: {
        coordinates: [
          26.5683,
          41.8717
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ABVEX"
      },
      geometry: {
        coordinates: [
          40.6578,
          40.8942
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ESOTA"
      },
      geometry: {
        coordinates: [
          41.7725,
          37.77
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ADA"
      },
      geometry: {
        coordinates: [
          35.2103,
          36.9406
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "DAMAT"
      },
      geometry: {
        coordinates: [
          40.6647,
          39.9561
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SISVO"
      },
      geometry: {
        coordinates: [
          27.7764,
          37.8956
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ASVOD"
      },
      geometry: {
        coordinates: [
          37.5728,
          40.0822
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BALUM"
      },
      geometry: {
        coordinates: [
          37.6667,
          42.6833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "OSDIP"
      },
      geometry: {
        coordinates: [
          34.7986,
          42.2383
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "LORKO"
      },
      geometry: {
        coordinates: [
          29.765,
          36.8069
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "VEVUD"
      },
      geometry: {
        coordinates: [
          31.2222,
          40.3808
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "UMLEN"
      },
      geometry: {
        coordinates: [
          40.2167,
          38.6617
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EDISI"
      },
      geometry: {
        coordinates: [
          30.1464,
          36.8492
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BADEM"
      },
      geometry: {
        coordinates: [
          38.66,
          37.6044
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ENFOR"
      },
      geometry: {
        coordinates: [
          36.2747,
          39.8739
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SORAR"
      },
      geometry: {
        coordinates: [
          39.5125,
          38.6242
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TUMKU"
      },
      geometry: {
        coordinates: [
          42.1061,
          38.5514
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NEPNO"
      },
      geometry: {
        coordinates: [
          28.2778,
          37.1514
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "AKEDO"
      },
      geometry: {
        coordinates: [
          35.4469,
          40.9528
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EVKAM"
      },
      geometry: {
        coordinates: [
          35.4131,
          42.1514
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TAMER"
      },
      geometry: {
        coordinates: [
          40.8164,
          38.2406
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "LUMOM"
      },
      geometry: {
        coordinates: [
          44.8233,
          37.27
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "LIVDO"
      },
      geometry: {
        coordinates: [
          42.4139,
          38.2614
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NESTU"
      },
      geometry: {
        coordinates: [
          40.3494,
          40.5936
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ERGEP"
      },
      geometry: {
        coordinates: [
          33.9625,
          37.4439
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "INBAT"
      },
      geometry: {
        coordinates: [
          42.7083,
          39.7025
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TIMOP"
      },
      geometry: {
        coordinates: [
          35.3611,
          39.9919
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "IVNAP"
      },
      geometry: {
        coordinates: [
          31.2533,
          41.0908
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KIZIK"
      },
      geometry: {
        coordinates: [
          32.1494,
          40.4183
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ELNEM"
      },
      geometry: {
        coordinates: [
          38.1981,
          39.7567
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EKMEL"
      },
      geometry: {
        coordinates: [
          30.1828,
          40.3767
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "GIPDA"
      },
      geometry: {
        coordinates: [
          32.2047,
          42.2469
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EKMEK"
      },
      geometry: {
        coordinates: [
          33.9433,
          40.5036
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "VAXEB"
      },
      geometry: {
        coordinates: [
          33.5786,
          41.5969
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ESKIN"
      },
      geometry: {
        coordinates: [
          28.3981,
          39.05
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BAGLU"
      },
      geometry: {
        coordinates: [
          29.3253,
          38.0711
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "VIRAN"
      },
      geometry: {
        coordinates: [
          41.7028,
          40.1186
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NOLGA"
      },
      geometry: {
        coordinates: [
          42.9789,
          41.4281
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "RAUMA"
      },
      geometry: {
        coordinates: [
          27.3092,
          39.9839
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SIN"
      },
      geometry: {
        coordinates: [
          35.0769,
          42.0222
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EVBOL"
      },
      geometry: {
        coordinates: [
          29.6383,
          37.1711
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TKT"
      },
      geometry: {
        coordinates: [
          36.3775,
          40.315
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ALEDA"
      },
      geometry: {
        coordinates: [
          27.8394,
          39.8608
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SIV"
      },
      geometry: {
        coordinates: [
          36.8933,
          39.7894
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ERVAK"
      },
      geometry: {
        coordinates: [
          36.7269,
          40.5119
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "IPDAL"
      },
      geometry: {
        coordinates: [
          38.0103,
          40.8842
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "IRGAK"
      },
      geometry: {
        coordinates: [
          30.6178,
          38.2806
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ELTOX"
      },
      geometry: {
        coordinates: [
          43.3694,
          40.0997
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ELMAS"
      },
      geometry: {
        coordinates: [
          30.7083,
          37.5833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BAMUP"
      },
      geometry: {
        coordinates: [
          32.0172,
          42.5875
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BELGI"
      },
      geometry: {
        coordinates: [
          25.8833,
          40.5
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NEKAT"
      },
      geometry: {
        coordinates: [
          36.3536,
          37.7436
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "HTY"
      },
      geometry: {
        coordinates: [
          36.29,
          36.3628
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "RILEX"
      },
      geometry: {
        coordinates: [
          26.7664,
          41.9711
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BALSU"
      },
      geometry: {
        coordinates: [
          29.4236,
          37.4583
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ARMAM"
      },
      geometry: {
        coordinates: [
          28.4714,
          37.2394
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ADASU"
      },
      geometry: {
        coordinates: [
          31.3889,
          36.7511
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "GAKSU"
      },
      geometry: {
        coordinates: [
          33.8142,
          42.1892
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EVPIM"
      },
      geometry: {
        coordinates: [
          32.3664,
          41.895
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "GELIN"
      },
      geometry: {
        coordinates: [
          40.7858,
          39.6981
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "PALUT"
      },
      geometry: {
        coordinates: [
          39.5333,
          38.6939
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ERVAG"
      },
      geometry: {
        coordinates: [
          30.1828,
          39.0653
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NIVLA"
      },
      geometry: {
        coordinates: [
          42.7961,
          40.4622
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "PELIL"
      },
      geometry: {
        coordinates: [
          30.2328,
          37.8397
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EVLAP"
      },
      geometry: {
        coordinates: [
          31.5858,
          41.5375
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SELVI"
      },
      geometry: {
        coordinates: [
          34.4994,
          37.8989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BIG"
      },
      geometry: {
        coordinates: [
          27.3653,
          40.2842
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TUNLA"
      },
      geometry: {
        coordinates: [
          36.0333,
          35.8833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "GONPU"
      },
      geometry: {
        coordinates: [
          41.9606,
          41.3006
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ERMOD"
      },
      geometry: {
        coordinates: [
          35.28,
          39.2233
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "UNVUS"
      },
      geometry: {
        coordinates: [
          32.1414,
          41.695
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "MOVUL"
      },
      geometry: {
        coordinates: [
          39.2319,
          38.1528
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BEYAZ"
      },
      geometry: {
        coordinates: [
          42.7881,
          38.505
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ULKEM"
      },
      geometry: {
        coordinates: [
          43.3647,
          38.1106
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "AKCAK"
      },
      geometry: {
        coordinates: [
          30.7247,
          41.4289
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "AKIMO"
      },
      geometry: {
        coordinates: [
          29.4011,
          37.2206
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "VEMAG"
      },
      geometry: {
        coordinates: [
          31.1358,
          41.6789
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "CLD"
      },
      geometry: {
        coordinates: [
          27.8964,
          37.8147
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "OZYAK"
      },
      geometry: {
        coordinates: [
          29.1433,
          37.125
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ATGOB"
      },
      geometry: {
        coordinates: [
          31.2508,
          40.7253
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "DASIS"
      },
      geometry: {
        coordinates: [
          44.2083,
          38.9097
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "LUTAM"
      },
      geometry: {
        coordinates: [
          38.5231,
          37.325
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "VEPUM"
      },
      geometry: {
        coordinates: [
          33.4172,
          42.4206
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "GELKI"
      },
      geometry: {
        coordinates: [
          31.6808,
          36.5786
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "INBET"
      },
      geometry: {
        coordinates: [
          27.275,
          40.1867
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NEXAM"
      },
      geometry: {
        coordinates: [
          28.6353,
          37.5003
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "RASVA"
      },
      geometry: {
        coordinates: [
          38.0078,
          37.4981
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TUDEK"
      },
      geometry: {
        coordinates: [
          39.4031,
          42.1839
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "MAKOL"
      },
      geometry: {
        coordinates: [
          29.1428,
          42.1706
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ATSAL"
      },
      geometry: {
        coordinates: [
          28.7189,
          37.5003
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "IPSAT"
      },
      geometry: {
        coordinates: [
          38.6058,
          41.1053
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ERGAN"
      },
      geometry: {
        coordinates: [
          39.0272,
          38.515
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "APTOX"
      },
      geometry: {
        coordinates: [
          32.5042,
          41.5931
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BOYAT"
      },
      geometry: {
        coordinates: [
          37.2433,
          37.1208
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TOKER"
      },
      geometry: {
        coordinates: [
          30.7722,
          40.3133
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ARPAG"
      },
      geometry: {
        coordinates: [
          37.2744,
          37.2625
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ATGIT"
      },
      geometry: {
        coordinates: [
          29.7492,
          38.2014
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KEPES"
      },
      geometry: {
        coordinates: [
          36.7075,
          38.14
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "RATVU"
      },
      geometry: {
        coordinates: [
          29.3783,
          39.9067
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "FILIZ"
      },
      geometry: {
        coordinates: [
          39.4703,
          38.8664
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TIRER"
      },
      geometry: {
        coordinates: [
          28.3842,
          41.1364
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "OTROM"
      },
      geometry: {
        coordinates: [
          40.6592,
          40.9444
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "MAVES"
      },
      geometry: {
        coordinates: [
          39.2275,
          37.5628
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TUKTU"
      },
      geometry: {
        coordinates: [
          32.7161,
          36.3347
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EKTOD"
      },
      geometry: {
        coordinates: [
          37.7067,
          40.5919
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ULTED"
      },
      geometry: {
        coordinates: [
          41.8261,
          38.3506
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SONEN"
      },
      geometry: {
        coordinates: [
          28.2853,
          37.1547
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BKZ"
      },
      geometry: {
        coordinates: [
          29.1428,
          41.1269
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "YASEN"
      },
      geometry: {
        coordinates: [
          29.5161,
          41.1989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SOMBU"
      },
      geometry: {
        coordinates: [
          40.2769,
          39.6003
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "RIVBU"
      },
      geometry: {
        coordinates: [
          29.3125,
          37.3272
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KULOL"
      },
      geometry: {
        coordinates: [
          31.5936,
          36.6831
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ROXUK"
      },
      geometry: {
        coordinates: [
          29.7186,
          39.8903
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ERH"
      },
      geometry: {
        coordinates: [
          38.1119,
          38.4625
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "LEMDA"
      },
      geometry: {
        coordinates: [
          30.6569,
          37.9822
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ERIDU"
      },
      geometry: {
        coordinates: [
          39.1697,
          41.2153
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ERN"
      },
      geometry: {
        coordinates: [
          39.5292,
          39.7083
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ASBEP"
      },
      geometry: {
        coordinates: [
          32.1236,
          42.2628
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "CNK"
      },
      geometry: {
        coordinates: [
          26.4275,
          40.1353
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "VAKUM"
      },
      geometry: {
        coordinates: [
          28.2581,
          38.5022
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ULVEX"
      },
      geometry: {
        coordinates: [
          31.5308,
          41.5828
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NEKES"
      },
      geometry: {
        coordinates: [
          33.2847,
          36.1536
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ALVAR"
      },
      geometry: {
        coordinates: [
          41.7431,
          39.9958
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ERZ"
      },
      geometry: {
        coordinates: [
          41.2069,
          39.9567
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BALON"
      },
      geometry: {
        coordinates: [
          39.6083,
          40.0917
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "VAKUL"
      },
      geometry: {
        coordinates: [
          42.1417,
          37.8942
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "RUXEV"
      },
      geometry: {
        coordinates: [
          34.8622,
          41.2636
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TETSA"
      },
      geometry: {
        coordinates: [
          28.7792,
          41.7461
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KONAK"
      },
      geometry: {
        coordinates: [
          31.4161,
          36.8947
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "HOCAM"
      },
      geometry: {
        coordinates: [
          40.82,
          40.2458
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "GERZE"
      },
      geometry: {
        coordinates: [
          35.1661,
          41.8322
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "RESLI"
      },
      geometry: {
        coordinates: [
          30.1197,
          38.2944
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ERHAN"
      },
      geometry: {
        coordinates: [
          35.2289,
          38.5239
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TEPKI"
      },
      geometry: {
        coordinates: [
          32.9928,
          41.4533
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ELVON"
      },
      geometry: {
        coordinates: [
          29.4389,
          40.1931
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BAYIR"
      },
      geometry: {
        coordinates: [
          41.4039,
          38.5947
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KESIR"
      },
      geometry: {
        coordinates: [
          41.4514,
          39.3153
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TEMEL"
      },
      geometry: {
        coordinates: [
          39.1372,
          41.0572
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ESR"
      },
      geometry: {
        coordinates: [
          30.5122,
          39.8131
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ETAMP"
      },
      geometry: {
        coordinates: [
          29.7289,
          39.5797
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "DERYA"
      },
      geometry: {
        coordinates: [
          30.8119,
          36.4156
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "PIXAP"
      },
      geometry: {
        coordinates: [
          39.6922,
          40.5017
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ULSAB"
      },
      geometry: {
        coordinates: [
          41.1314,
          38.1425
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BULUT"
      },
      geometry: {
        coordinates: [
          38.9022,
          38.7561
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BNG"
      },
      geometry: {
        coordinates: [
          40.6008,
          38.8556
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "GIRNO"
      },
      geometry: {
        coordinates: [
          33.2544,
          41.0172
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SUNUM"
      },
      geometry: {
        coordinates: [
          34.8575,
          42.0119
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NAREN"
      },
      geometry: {
        coordinates: [
          40.825,
          38.6306
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EMKUD"
      },
      geometry: {
        coordinates: [
          30.2775,
          38.6053
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "RNA"
      },
      geometry: {
        coordinates: [
          42.0614,
          37.365
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ELGOV"
      },
      geometry: {
        coordinates: [
          28.0175,
          40.5944
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "OKESA"
      },
      geometry: {
        coordinates: [
          27.3864,
          37.6292
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "LAMSA"
      },
      geometry: {
        coordinates: [
          29.9228,
          37.1108
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KUDAK"
      },
      geometry: {
        coordinates: [
          28.2767,
          39.2989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BENEM"
      },
      geometry: {
        coordinates: [
          29.3167,
          36.1833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "REKVO"
      },
      geometry: {
        coordinates: [
          40.4983,
          39.5214
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SALGO"
      },
      geometry: {
        coordinates: [
          32.1994,
          40.4739
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "GOKPA"
      },
      geometry: {
        coordinates: [
          34.5947,
          41.7461
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TERME"
      },
      geometry: {
        coordinates: [
          37.2247,
          41.2144
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KUXIL"
      },
      geometry: {
        coordinates: [
          29.005,
          37.4808
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NELNI"
      },
      geometry: {
        coordinates: [
          30.5022,
          41.6175
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "IBLAL"
      },
      geometry: {
        coordinates: [
          28.0011,
          41.9822
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "OVACI"
      },
      geometry: {
        coordinates: [
          29.1542,
          39.7889
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SUGAT"
      },
      geometry: {
        coordinates: [
          37.7514,
          37.0508
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SONAD"
      },
      geometry: {
        coordinates: [
          39.6764,
          40.4181
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "AMANI"
      },
      geometry: {
        coordinates: [
          26.4994,
          39.3322
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "IBURA"
      },
      geometry: {
        coordinates: [
          33.3736,
          41.0175
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KUTAY"
      },
      geometry: {
        coordinates: [
          29.6219,
          39.4617
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "PIROX"
      },
      geometry: {
        coordinates: [
          28.05,
          36.4833
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ETESU"
      },
      geometry: {
        coordinates: [
          39.3544,
          39.1381
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BANRO"
      },
      geometry: {
        coordinates: [
          27.9953,
          36.4947
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "LUTFU"
      },
      geometry: {
        coordinates: [
          28.1833,
          39.9394
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ATLOM"
      },
      geometry: {
        coordinates: [
          39.3486,
          37.3856
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "VAKTI"
      },
      geometry: {
        coordinates: [
          37.8894,
          40.7683
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EMBAG"
      },
      geometry: {
        coordinates: [
          42.2086,
          38.1267
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "URGUP"
      },
      geometry: {
        coordinates: [
          34.03,
          38.5211
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TUDBU"
      },
      geometry: {
        coordinates: [
          27.7769,
          41.9667
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ODSAM"
      },
      geometry: {
        coordinates: [
          37.7647,
          40.6481
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "CRD"
      },
      geometry: {
        coordinates: [
          29.7042,
          37.7897
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ASTAL"
      },
      geometry: {
        coordinates: [
          33.1244,
          40.7406
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ZELSU"
      },
      geometry: {
        coordinates: [
          43.7831,
          38.2656
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "DIGTI"
      },
      geometry: {
        coordinates: [
          26.3214,
          41.1253
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "VADEN"
      },
      geometry: {
        coordinates: [
          27.2161,
          42.0656
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "RATSI"
      },
      geometry: {
        coordinates: [
          36.2203,
          37.8372
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TOPLU"
      },
      geometry: {
        coordinates: [
          28.1731,
          41.4786
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "CRL"
      },
      geometry: {
        coordinates: [
          27.9422,
          41.1522
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "GZP"
      },
      geometry: {
        coordinates: [
          32.2972,
          36.3042
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KAR"
      },
      geometry: {
        coordinates: [
          43.1042,
          40.5567
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "CRM"
      },
      geometry: {
        coordinates: [
          36.5489,
          41.2656
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "LANVO"
      },
      geometry: {
        coordinates: [
          39.2919,
          39.9436
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BEDOP"
      },
      geometry: {
        coordinates: [
          32.2325,
          41.9269
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "CENGO"
      },
      geometry: {
        coordinates: [
          28.0911,
          37.0656
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TAVAS"
      },
      geometry: {
        coordinates: [
          29.2436,
          37.5886
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BAPSI"
      },
      geometry: {
        coordinates: [
          27.9042,
          38.0022
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ABKEV"
      },
      geometry: {
        coordinates: [
          32.0483,
          42.5839
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ROTKU"
      },
      geometry: {
        coordinates: [
          39.96,
          38.7933
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "RIXEN"
      },
      geometry: {
        coordinates: [
          28.7661,
          42.0822
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ORHAN"
      },
      geometry: {
        coordinates: [
          39.5778,
          39.9475
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "DEKEK"
      },
      geometry: {
        coordinates: [
          29.3231,
          40.3344
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SRT"
      },
      geometry: {
        coordinates: [
          41.8819,
          37.9606
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ATVEP"
      },
      geometry: {
        coordinates: [
          26.9536,
          41.4622
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BAKIR"
      },
      geometry: {
        coordinates: [
          33.3244,
          39.4378
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KAVAK"
      },
      geometry: {
        coordinates: [
          28.7328,
          37.3572
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KONEN"
      },
      geometry: {
        coordinates: [
          27.2772,
          39.8117
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BIMVO"
      },
      geometry: {
        coordinates: [
          33.1319,
          42.4561
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "RATVO"
      },
      geometry: {
        coordinates: [
          43.9344,
          37.2406
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "UPKAG"
      },
      geometry: {
        coordinates: [
          34.1353,
          41.4547
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KUMRU"
      },
      geometry: {
        coordinates: [
          30.7328,
          37.4156
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SUMOL"
      },
      geometry: {
        coordinates: [
          33.1811,
          42.7989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EMGIM"
      },
      geometry: {
        coordinates: [
          29.5422,
          39.9094
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "OTSOV"
      },
      geometry: {
        coordinates: [
          37.4314,
          39.8328
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "PETAR"
      },
      geometry: {
        coordinates: [
          32.0814,
          40.1711
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "LESRI"
      },
      geometry: {
        coordinates: [
          41.2303,
          37.0722
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "CTP"
      },
      geometry: {
        coordinates: [
          30.0714,
          40.7375
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "OSDUT"
      },
      geometry: {
        coordinates: [
          37.5544,
          41.19
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "GOKSU"
      },
      geometry: {
        coordinates: [
          41.8797,
          39.4928
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "APSER"
      },
      geometry: {
        coordinates: [
          29.8483,
          39.3672
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BRY"
      },
      geometry: {
        coordinates: [
          29.5936,
          40.2625
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ELDEN"
      },
      geometry: {
        coordinates: [
          35.4292,
          39.9097
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "HAKAN"
      },
      geometry: {
        coordinates: [
          32.2983,
          41.7233
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ARTAT"
      },
      geometry: {
        coordinates: [
          29.6242,
          42.3639
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "DELEL"
      },
      geometry: {
        coordinates: [
          40.8903,
          40.965
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ADUMU"
      },
      geometry: {
        coordinates: [
          33.0778,
          42.0711
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ARTAR"
      },
      geometry: {
        coordinates: [
          38.8447,
          37.0939
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TIVUG"
      },
      geometry: {
        coordinates: [
          33.0311,
          41.7336
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BALIM"
      },
      geometry: {
        coordinates: [
          41.1242,
          38.4297
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TIRMA"
      },
      geometry: {
        coordinates: [
          35.765,
          38.9422
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "GELSU"
      },
      geometry: {
        coordinates: [
          40.5569,
          39.5583
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EVSEP"
      },
      geometry: {
        coordinates: [
          26.1881,
          40.1567
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ERMEM"
      },
      geometry: {
        coordinates: [
          36.9197,
          37.8114
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ADVOK"
      },
      geometry: {
        coordinates: [
          36.5011,
          39.5036
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ERKAL"
      },
      geometry: {
        coordinates: [
          29.9797,
          40.9867
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "DORUK"
      },
      geometry: {
        coordinates: [
          42.1853,
          39.2792
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "INLAP"
      },
      geometry: {
        coordinates: [
          43.7458,
          37.6836
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "FATIH"
      },
      geometry: {
        coordinates: [
          28.7994,
          41.2281
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "GINLI"
      },
      geometry: {
        coordinates: [
          28.7744,
          41.8711
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BAMLA"
      },
      geometry: {
        coordinates: [
          38.9028,
          40.6403
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EBEDI"
      },
      geometry: {
        coordinates: [
          39.1236,
          39.725
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "UVTOL"
      },
      geometry: {
        coordinates: [
          28.3128,
          37.7675
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ATNOP"
      },
      geometry: {
        coordinates: [
          34.8583,
          42.0522
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "OZBEY"
      },
      geometry: {
        coordinates: [
          39.1,
          37.2419
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "PEVOP"
      },
      geometry: {
        coordinates: [
          38.7603,
          40.1244
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "DUGLA"
      },
      geometry: {
        coordinates: [
          27.2244,
          39.4989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "MILBA"
      },
      geometry: {
        coordinates: [
          36.4794,
          36.9514
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NILER"
      },
      geometry: {
        coordinates: [
          27.8697,
          39.0839
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "YAA"
      },
      geometry: {
        coordinates: [
          29.2075,
          40.475
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EZN"
      },
      geometry: {
        coordinates: [
          38.8869,
          39.9369
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ARI"
      },
      geometry: {
        coordinates: [
          43.0269,
          39.6458
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EKSEN"
      },
      geometry: {
        coordinates: [
          30.6703,
          37.8906
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "RENGI"
      },
      geometry: {
        coordinates: [
          41.08,
          38.4639
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ODIRA"
      },
      geometry: {
        coordinates: [
          36.9147,
          42.7089
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "MILAS"
      },
      geometry: {
        coordinates: [
          27.6419,
          37.1678
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EZS"
      },
      geometry: {
        coordinates: [
          39.2239,
          38.7081
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ASNUT"
      },
      geometry: {
        coordinates: [
          27.0081,
          40.2283
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "OSGED"
      },
      geometry: {
        coordinates: [
          30.1069,
          38.9094
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ABKAL"
      },
      geometry: {
        coordinates: [
          41.5319,
          38.0194
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ZUITA"
      },
      geometry: {
        coordinates: [
          39.6339,
          38.3631
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BONAM"
      },
      geometry: {
        coordinates: [
          44.2997,
          38.0489
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "DYB"
      },
      geometry: {
        coordinates: [
          40.2081,
          37.8733
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NASIM"
      },
      geometry: {
        coordinates: [
          32.3333,
          40.5722
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KFK"
      },
      geometry: {
        coordinates: [
          30.5467,
          38.8039
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ATVAM"
      },
      geometry: {
        coordinates: [
          39.5831,
          41.6433
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BERGO"
      },
      geometry: {
        coordinates: [
          27.1328,
          38.9989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ERPIM"
      },
      geometry: {
        coordinates: [
          42.7089,
          38.1069
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ULREP"
      },
      geometry: {
        coordinates: [
          40.8878,
          39.3817
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "DEMEB"
      },
      geometry: {
        coordinates: [
          39.2317,
          37.5639
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NEMRO"
      },
      geometry: {
        coordinates: [
          33.2028,
          40.9083
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "UDVET"
      },
      geometry: {
        coordinates: [
          35.5336,
          38.315
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BUK"
      },
      geometry: {
        coordinates: [
          33.105,
          40.2419
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "AKBUK"
      },
      geometry: {
        coordinates: [
          27.4606,
          37.5
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ILHAN"
      },
      geometry: {
        coordinates: [
          33.7036,
          40.4439
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "UNSAV"
      },
      geometry: {
        coordinates: [
          28.7897,
          41.4783
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NELPO"
      },
      geometry: {
        coordinates: [
          37.6758,
          40.47
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "OKLAM"
      },
      geometry: {
        coordinates: [
          31.5828,
          38.0908
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KEMER"
      },
      geometry: {
        coordinates: [
          34.7258,
          37.6008
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "AGINA"
      },
      geometry: {
        coordinates: [
          44.0867,
          39.3233
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ESEPO"
      },
      geometry: {
        coordinates: [
          39.5583,
          39.8519
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KOZAN"
      },
      geometry: {
        coordinates: [
          37.1542,
          36.9542
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "HAZAR"
      },
      geometry: {
        coordinates: [
          39.4322,
          38.5325
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "VESAR"
      },
      geometry: {
        coordinates: [
          34.0167,
          35.9167
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "OLUPO"
      },
      geometry: {
        coordinates: [
          37.6619,
          41.7086
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SUREL"
      },
      geometry: {
        coordinates: [
          40.8772,
          40.8672
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ATPUM"
      },
      geometry: {
        coordinates: [
          40.3758,
          41.1933
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ARMUD"
      },
      geometry: {
        coordinates: [
          33.4856,
          39.2217
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BUMOM"
      },
      geometry: {
        coordinates: [
          33.2297,
          38.0144
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "HAVZA"
      },
      geometry: {
        coordinates: [
          35.9286,
          41.0925
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NEGEM"
      },
      geometry: {
        coordinates: [
          29.8703,
          42.4617
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EKTES"
      },
      geometry: {
        coordinates: [
          40.2044,
          40.9853
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EKTEL"
      },
      geometry: {
        coordinates: [
          38.9978,
          37.8267
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BUPUN"
      },
      geometry: {
        coordinates: [
          37.9056,
          37.3944
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EVSAS"
      },
      geometry: {
        coordinates: [
          40.1886,
          39.3247
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "HAY"
      },
      geometry: {
        coordinates: [
          32.5094,
          39.4364
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "YUCEL"
      },
      geometry: {
        coordinates: [
          33.5853,
          39.5789
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "YAYLA"
      },
      geometry: {
        coordinates: [
          27.9953,
          39.8656
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TZK"
      },
      geometry: {
        coordinates: [
          34.5428,
          38.7667
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KHD"
      },
      geometry: {
        coordinates: [
          38.4567,
          37.7247
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EDASU"
      },
      geometry: {
        coordinates: [
          42.7767,
          40.6067
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KUGOS"
      },
      geometry: {
        coordinates: [
          34.0878,
          42.7806
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "UVULU"
      },
      geometry: {
        coordinates: [
          34.5364,
          41.5703
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "HANKO"
      },
      geometry: {
        coordinates: [
          30.2661,
          39.4989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KUBER"
      },
      geometry: {
        coordinates: [
          33.6106,
          39.8322
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NAPIP"
      },
      geometry: {
        coordinates: [
          31.7389,
          41.8067
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ADSEP"
      },
      geometry: {
        coordinates: [
          36.5481,
          37.6858
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "REBLO"
      },
      geometry: {
        coordinates: [
          43.685,
          40.84
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "INLEV"
      },
      geometry: {
        coordinates: [
          37.0881,
          37.2594
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "UTURI"
      },
      geometry: {
        coordinates: [
          37.9747,
          39.8736
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "AKUTU"
      },
      geometry: {
        coordinates: [
          42.5886,
          40.6347
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SIVKU"
      },
      geometry: {
        coordinates: [
          29.9794,
          39.1356
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ERGUN"
      },
      geometry: {
        coordinates: [
          34.7389,
          40.7464
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ETISI"
      },
      geometry: {
        coordinates: [
          43.2956,
          40.2003
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ARPUT"
      },
      geometry: {
        coordinates: [
          38.9419,
          38.8422
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ESENK"
      },
      geometry: {
        coordinates: [
          42.9381,
          38.7447
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "LUUPU"
      },
      geometry: {
        coordinates: [
          32.2383,
          41.9094
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "UTUSO"
      },
      geometry: {
        coordinates: [
          31.7106,
          36.4497
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "MANAZ"
      },
      geometry: {
        coordinates: [
          34.4114,
          36.9147
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SOMGU"
      },
      geometry: {
        coordinates: [
          29.9556,
          39.5533
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KISLA"
      },
      geometry: {
        coordinates: [
          34.3333,
          39.11
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "OLDUD"
      },
      geometry: {
        coordinates: [
          32.6119,
          42.1661
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "VEVEN"
      },
      geometry: {
        coordinates: [
          37.6383,
          39.4528
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SULTA"
      },
      geometry: {
        coordinates: [
          29.7397,
          40.0456
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "OTKEP"
      },
      geometry: {
        coordinates: [
          42.66,
          37.8592
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "VAPEK"
      },
      geometry: {
        coordinates: [
          31.6944,
          37.3667
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BABSA"
      },
      geometry: {
        coordinates: [
          30.305,
          38.0156
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "MARIS"
      },
      geometry: {
        coordinates: [
          28.2828,
          36.8989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "MANAV"
      },
      geometry: {
        coordinates: [
          31.3578,
          36.6989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "INDUR"
      },
      geometry: {
        coordinates: [
          43.6647,
          40.1156
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "RORMU"
      },
      geometry: {
        coordinates: [
          29.9269,
          39.52
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "LEGDO"
      },
      geometry: {
        coordinates: [
          41.1372,
          40.835
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ATSUB"
      },
      geometry: {
        coordinates: [
          31.6239,
          36.585
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "GAP"
      },
      geometry: {
        coordinates: [
          38.9047,
          37.4581
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EDASA"
      },
      geometry: {
        coordinates: [
          30.1244,
          39.46
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "USANU"
      },
      geometry: {
        coordinates: [
          36.0625,
          40.9356
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "GAZ"
      },
      geometry: {
        coordinates: [
          37.4728,
          36.9514
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "HALIL"
      },
      geometry: {
        coordinates: [
          32.3578,
          39.3906
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "REDRA"
      },
      geometry: {
        coordinates: [
          26.5244,
          37.9822
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TEKDO"
      },
      geometry: {
        coordinates: [
          30.1569,
          38.3383
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "INPOR"
      },
      geometry: {
        coordinates: [
          34.1033,
          36.675
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ADRES"
      },
      geometry: {
        coordinates: [
          37.3336,
          37.1714
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "DETOS"
      },
      geometry: {
        coordinates: [
          36.6711,
          41.7583
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SONLU"
      },
      geometry: {
        coordinates: [
          28.7997,
          39.0831
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NAMAN"
      },
      geometry: {
        coordinates: [
          30.9994,
          40.9989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ASPUL"
      },
      geometry: {
        coordinates: [
          40.4128,
          38.5517
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "LATGA"
      },
      geometry: {
        coordinates: [
          32.0922,
          40.3314
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ASMOB"
      },
      geometry: {
        coordinates: [
          32.2328,
          41.6694
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NARLI"
      },
      geometry: {
        coordinates: [
          43.2497,
          37.8156
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ADBEL"
      },
      geometry: {
        coordinates: [
          31.7464,
          36.9053
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ULRAS"
      },
      geometry: {
        coordinates: [
          34.1125,
          38.9933
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ELGEX"
      },
      geometry: {
        coordinates: [
          38.1128,
          37.1806
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "PIPUR"
      },
      geometry: {
        coordinates: [
          33.2389,
          41.3511
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EKDAM"
      },
      geometry: {
        coordinates: [
          29.6172,
          40.4347
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "DIGIL"
      },
      geometry: {
        coordinates: [
          39.0772,
          38.1953
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KABAN"
      },
      geometry: {
        coordinates: [
          42.6497,
          37.2489
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BARPE"
      },
      geometry: {
        coordinates: [
          26.9781,
          40.9261
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SUDES"
      },
      geometry: {
        coordinates: [
          26.8933,
          39.7694
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EVKOR"
      },
      geometry: {
        coordinates: [
          32,
          36.4289
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "MISRO"
      },
      geometry: {
        coordinates: [
          29.8011,
          39.9528
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TESVA"
      },
      geometry: {
        coordinates: [
          44.4964,
          38.2858
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SOPOV"
      },
      geometry: {
        coordinates: [
          36.7992,
          40.2003
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "MODAU"
      },
      geometry: {
        coordinates: [
          31.8858,
          42.0092
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "RIKSO"
      },
      geometry: {
        coordinates: [
          26.4333,
          38.8333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "PAZAR"
      },
      geometry: {
        coordinates: [
          29.9994,
          41.2989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "VAN"
      },
      geometry: {
        coordinates: [
          43.325,
          38.4661
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KARDE"
      },
      geometry: {
        coordinates: [
          37.0453,
          41.9039
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SOLSA"
      },
      geometry: {
        coordinates: [
          35.7789,
          38.1456
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "GOBIT"
      },
      geometry: {
        coordinates: [
          33.8869,
          39.7761
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "MARMA"
      },
      geometry: {
        coordinates: [
          27.6489,
          40.5272
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "DERIL"
      },
      geometry: {
        coordinates: [
          44.415,
          37.7344
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NIZIP"
      },
      geometry: {
        coordinates: [
          37.7667,
          36.9847
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ULKAN"
      },
      geometry: {
        coordinates: [
          28.1258,
          37.3025
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ERCIS"
      },
      geometry: {
        coordinates: [
          34.9436,
          38.2703
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "GETKO"
      },
      geometry: {
        coordinates: [
          40.5383,
          40.4547
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ABDIK"
      },
      geometry: {
        coordinates: [
          41.9553,
          37.6883
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "DONDU"
      },
      geometry: {
        coordinates: [
          37.0581,
          37.5864
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "UNEPI"
      },
      geometry: {
        coordinates: [
          30.1978,
          38.2494
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EKNUD"
      },
      geometry: {
        coordinates: [
          30.8103,
          38.1292
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "VARTO"
      },
      geometry: {
        coordinates: [
          41.545,
          39.0661
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "AYT"
      },
      geometry: {
        coordinates: [
          30.7944,
          36.9206
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ATKAN"
      },
      geometry: {
        coordinates: [
          27.8494,
          39.52
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NIVAX"
      },
      geometry: {
        coordinates: [
          39.6342,
          41.4892
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BALAX"
      },
      geometry: {
        coordinates: [
          33.7808,
          39.4575
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NEGOL"
      },
      geometry: {
        coordinates: [
          41.0792,
          39.4764
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EVGEG"
      },
      geometry: {
        coordinates: [
          31.1075,
          42.4572
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ABISI"
      },
      geometry: {
        coordinates: [
          31.9525,
          40.3628
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "GEM"
      },
      geometry: {
        coordinates: [
          36.0286,
          39.1542
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TELVO"
      },
      geometry: {
        coordinates: [
          32.9217,
          39.3711
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ODERO"
      },
      geometry: {
        coordinates: [
          30.2644,
          42.6106
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SITRU"
      },
      geometry: {
        coordinates: [
          26.2994,
          38.1072
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ODMAX"
      },
      geometry: {
        coordinates: [
          31.4031,
          42.1211
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NODKO"
      },
      geometry: {
        coordinates: [
          28.2686,
          38.2197
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KOZLU"
      },
      geometry: {
        coordinates: [
          30.0744,
          37.4972
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "DAMLA"
      },
      geometry: {
        coordinates: [
          31.0911,
          37.3614
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "HISAR"
      },
      geometry: {
        coordinates: [
          31.5411,
          38.1156
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "RUVOM"
      },
      geometry: {
        coordinates: [
          34.3933,
          42.2936
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "MERAM"
      },
      geometry: {
        coordinates: [
          33.2869,
          36.0364
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "RAKUR"
      },
      geometry: {
        coordinates: [
          31.9478,
          42.7989
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "OTSAN"
      },
      geometry: {
        coordinates: [
          30.3314,
          40.7106
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SONUP"
      },
      geometry: {
        coordinates: [
          28.5,
          37.4897
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "MRD"
      },
      geometry: {
        coordinates: [
          40.6386,
          37.2278
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "UMDOT"
      },
      geometry: {
        coordinates: [
          33.2869,
          36.3825
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NESET"
      },
      geometry: {
        coordinates: [
          29.1197,
          38.6314
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "UREBO"
      },
      geometry: {
        coordinates: [
          37.1442,
          38.7894
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "OLPOT"
      },
      geometry: {
        coordinates: [
          36.3606,
          39.8611
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SARIZ"
      },
      geometry: {
        coordinates: [
          35.3786,
          39.0411
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BELSU"
      },
      geometry: {
        coordinates: [
          34.2864,
          39.1308
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BADOX"
      },
      geometry: {
        coordinates: [
          33.9753,
          39.3319
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TOLUN"
      },
      geometry: {
        coordinates: [
          38.79,
          41.34
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "GULMO"
      },
      geometry: {
        coordinates: [
          36.7333,
          42.0042
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KEKIK"
      },
      geometry: {
        coordinates: [
          28.3678,
          37.0786
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EVPUV"
      },
      geometry: {
        coordinates: [
          32.7594,
          41.8003
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TAVUS"
      },
      geometry: {
        coordinates: [
          41.7358,
          39.8697
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "OTLUG"
      },
      geometry: {
        coordinates: [
          41.5122,
          39.1536
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BASMU"
      },
      geometry: {
        coordinates: [
          30.5425,
          40.6667
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "REMPO"
      },
      geometry: {
        coordinates: [
          36.4722,
          37.66
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TUMER"
      },
      geometry: {
        coordinates: [
          29.4703,
          38.6656
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BABLI"
      },
      geometry: {
        coordinates: [
          36.8631,
          36.9533
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ARKIN"
      },
      geometry: {
        coordinates: [
          39.9167,
          39.9514
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "RIMBO"
      },
      geometry: {
        coordinates: [
          28.5522,
          41.3808
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "RAVLI"
      },
      geometry: {
        coordinates: [
          41.3922,
          39.4769
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BAVTI"
      },
      geometry: {
        coordinates: [
          40.2547,
          40.6628
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SEHIR"
      },
      geometry: {
        coordinates: [
          32.2036,
          37.6517
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SULAK"
      },
      geometry: {
        coordinates: [
          36.2867,
          37.8942
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "DAL"
      },
      geometry: {
        coordinates: [
          28.7822,
          36.6894
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "UPKUL"
      },
      geometry: {
        coordinates: [
          30.3175,
          38.5317
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ASKER"
      },
      geometry: {
        coordinates: [
          38.7847,
          38.2769
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TEVDA"
      },
      geometry: {
        coordinates: [
          35.0667,
          38.3728
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "DEVMU"
      },
      geometry: {
        coordinates: [
          32.4608,
          41.8722
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "YKV"
      },
      geometry: {
        coordinates: [
          44.2425,
          37.5492
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "DEREL"
      },
      geometry: {
        coordinates: [
          32.1933,
          40.7139
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ETVER"
      },
      geometry: {
        coordinates: [
          34.2272,
          38.6158
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ORVOR"
      },
      geometry: {
        coordinates: [
          35.6903,
          41.0225
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "RAVGO"
      },
      geometry: {
        coordinates: [
          30.5008,
          39.5469
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NONDU"
      },
      geometry: {
        coordinates: [
          26.675,
          41.13
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "OSKOV"
      },
      geometry: {
        coordinates: [
          38.1575,
          37.0711
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "LASON"
      },
      geometry: {
        coordinates: [
          27.4528,
          38.3847
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EVKIT"
      },
      geometry: {
        coordinates: [
          33.7544,
          36.2611
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KINIK"
      },
      geometry: {
        coordinates: [
          29.9994,
          38.7322
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ASBOM"
      },
      geometry: {
        coordinates: [
          37.0414,
          37.2589
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ULMAR"
      },
      geometry: {
        coordinates: [
          27.1869,
          41.2111
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EVNOT"
      },
      geometry: {
        coordinates: [
          29.9706,
          40.7844
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BAFRA"
      },
      geometry: {
        coordinates: [
          35.9664,
          41.5086
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "OSVEL"
      },
      geometry: {
        coordinates: [
          31.0186,
          38.4819
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "DEDIM"
      },
      geometry: {
        coordinates: [
          29.2686,
          39.3972
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KULAR"
      },
      geometry: {
        coordinates: [
          28.6328,
          38.5822
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ERSEN"
      },
      geometry: {
        coordinates: [
          30.6661,
          40.8656
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "FIRAT"
      },
      geometry: {
        coordinates: [
          37.6542,
          37.1389
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SOVAP"
      },
      geometry: {
        coordinates: [
          36.7961,
          42.2497
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "GAYEM"
      },
      geometry: {
        coordinates: [
          29.63,
          41.0458
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KARGI"
      },
      geometry: {
        coordinates: [
          30.0544,
          39.4292
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TBN"
      },
      geometry: {
        coordinates: [
          39.7956,
          40.9953
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TURNA"
      },
      geometry: {
        coordinates: [
          41.3578,
          39.5586
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "FENER"
      },
      geometry: {
        coordinates: [
          28.3578,
          41.2864
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ERKUK"
      },
      geometry: {
        coordinates: [
          32.9431,
          39.2153
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "MUS"
      },
      geometry: {
        coordinates: [
          41.6608,
          38.7494
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "MUT"
      },
      geometry: {
        coordinates: [
          33.2917,
          36.8628
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "IMR"
      },
      geometry: {
        coordinates: [
          27.0072,
          38.3172
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "GUMRU"
      },
      geometry: {
        coordinates: [
          31.3494,
          41.5489
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NINVA"
      },
      geometry: {
        coordinates: [
          43.2167,
          37.35
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ABSAX"
      },
      geometry: {
        coordinates: [
          32.5836,
          42.3336
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "CAY"
      },
      geometry: {
        coordinates: [
          32.0444,
          41.5139
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "INB"
      },
      geometry: {
        coordinates: [
          33.7061,
          41.9514
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BATNU"
      },
      geometry: {
        coordinates: [
          32.7239,
          36.1608
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ROLIN"
      },
      geometry: {
        coordinates: [
          40.6564,
          41.7992
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "REBTA"
      },
      geometry: {
        coordinates: [
          33.1694,
          37.6867
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "APVAS"
      },
      geometry: {
        coordinates: [
          36.6683,
          40.7642
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "LETBU"
      },
      geometry: {
        coordinates: [
          32.0692,
          41.1325
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "LUMEX"
      },
      geometry: {
        coordinates: [
          42.4692,
          40.6525
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SISPI"
      },
      geometry: {
        coordinates: [
          29.87,
          39.9147
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BRONZ"
      },
      geometry: {
        coordinates: [
          30.3494,
          37.2697
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "DESEM"
      },
      geometry: {
        coordinates: [
          30.0019,
          38.1522
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KONUK"
      },
      geometry: {
        coordinates: [
          39.4681,
          39.5117
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ALPAY"
      },
      geometry: {
        coordinates: [
          29.9994,
          36.8322
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TUNCA"
      },
      geometry: {
        coordinates: [
          31.0311,
          41.2328
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "OBRUK"
      },
      geometry: {
        coordinates: [
          33.1189,
          38.0239
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "RERVA"
      },
      geometry: {
        coordinates: [
          33.8925,
          42.3597
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "DIGBO"
      },
      geometry: {
        coordinates: [
          28.4044,
          41.4936
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SEHER"
      },
      geometry: {
        coordinates: [
          38.5736,
          40.5061
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "PIDEV"
      },
      geometry: {
        coordinates: [
          31.5333,
          37.0942
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "TEKMI"
      },
      geometry: {
        coordinates: [
          38.3494,
          37.9589
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KUMAN"
      },
      geometry: {
        coordinates: [
          27.8328,
          38.0317
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ALTIN"
      },
      geometry: {
        coordinates: [
          29.4092,
          36.7656
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BENTA"
      },
      geometry: {
        coordinates: [
          33.9558,
          40.1514
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "GKA"
      },
      geometry: {
        coordinates: [
          25.9236,
          40.1797
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "YUNUS"
      },
      geometry: {
        coordinates: [
          27.8833,
          36.7097
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "GULRA"
      },
      geometry: {
        coordinates: [
          38.2794,
          40.3797
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ERTEK"
      },
      geometry: {
        coordinates: [
          39.2994,
          38.9564
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "PESOX"
      },
      geometry: {
        coordinates: [
          30.0333,
          39.04
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "LEKRO"
      },
      geometry: {
        coordinates: [
          40.9714,
          37.2772
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "GOLDO"
      },
      geometry: {
        coordinates: [
          26.2494,
          40.8822
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SONSU"
      },
      geometry: {
        coordinates: [
          38.3867,
          37.88
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "LAVTA"
      },
      geometry: {
        coordinates: [
          28.7033,
          37.7217
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "SUNAT"
      },
      geometry: {
        coordinates: [
          29.2497,
          37.2519
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BAG"
      },
      geometry: {
        coordinates: [
          32.8103,
          40.0697
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "RIXUB"
      },
      geometry: {
        coordinates: [
          30.6689,
          42.2872
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "OKMOT"
      },
      geometry: {
        coordinates: [
          31.7908,
          38.5106
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "OTKOT"
      },
      geometry: {
        coordinates: [
          34.4328,
          42.1114
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KSR"
      },
      geometry: {
        coordinates: [
          35.5217,
          38.7756
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "DEN"
      },
      geometry: {
        coordinates: [
          28.6028,
          38.5781
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "EVLIG"
      },
      geometry: {
        coordinates: [
          31.4831,
          40.4661
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NUGBA"
      },
      geometry: {
        coordinates: [
          30.6742,
          41.5911
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KST"
      },
      geometry: {
        coordinates: [
          33.8,
          41.3503
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ENESU"
      },
      geometry: {
        coordinates: [
          27.3306,
          41.4753
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ARSUG"
      },
      geometry: {
        coordinates: [
          38.2722,
          41.1331
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "RAHMA"
      },
      geometry: {
        coordinates: [
          42.5081,
          40.3733
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "ODALI"
      },
      geometry: {
        coordinates: [
          38.15,
          40.3278
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "DOREN"
      },
      geometry: {
        coordinates: [
          33.2833,
          35.9333
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "BIRPU"
      },
      geometry: {
        coordinates: [
          29.1747,
          36.3189
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "NESIL"
      },
      geometry: {
        coordinates: [
          29.7231,
          37.3431
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "VEXOL"
      },
      geometry: {
        coordinates: [
          26.1994,
          38.3489
        ],
        type: "Point"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airwaypoint",
        name: "KTH"
      },
      geometry: {
        coordinates: [
          30.1367,
          39.1081
        ],
        type: "Point"
      }
    }
  ]
};

// apps/simulator/src/geojsons/airways.json
var airways_default = {
  type: "FeatureCollection",
  features: [
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UA16"
      },
      geometry: {
        coordinates: [
          [
            27.2161,
            42.0656
          ],
          [
            28.3578,
            41.2864
          ],
          [
            28.8106,
            40.9614
          ],
          [
            29.2075,
            40.475
          ],
          [
            29.3231,
            40.3344
          ],
          [
            29.4389,
            40.1931
          ],
          [
            29.9556,
            39.5533
          ],
          [
            30.0544,
            39.4292
          ],
          [
            30.5467,
            38.8039
          ],
          [
            30.6178,
            38.2806
          ],
          [
            30.6569,
            37.9822
          ],
          [
            30.6703,
            37.8906
          ],
          [
            30.7083,
            37.5833
          ],
          [
            30.7328,
            37.4156
          ],
          [
            30.7944,
            36.9206
          ],
          [
            30.8119,
            36.4156
          ],
          [
            30.825,
            36.0411
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UA17"
      },
      geometry: {
        coordinates: [
          [
            28.7661,
            42.0822
          ],
          [
            30.9994,
            40.9989
          ],
          [
            31.8328,
            40.5822
          ],
          [
            32.1494,
            40.4183
          ],
          [
            32.8103,
            40.0697
          ],
          [
            33.5853,
            39.5789
          ],
          [
            33.7808,
            39.4575
          ],
          [
            34.2864,
            39.1308
          ],
          [
            34.3333,
            39.11
          ],
          [
            35.2289,
            38.5239
          ],
          [
            35.7789,
            38.1456
          ],
          [
            36.2203,
            37.8372
          ],
          [
            36.4722,
            37.66
          ],
          [
            36.6936,
            37.5031
          ],
          [
            37.0414,
            37.2589
          ],
          [
            37.2433,
            37.1208
          ],
          [
            37.4728,
            36.9514
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UA28"
      },
      geometry: {
        coordinates: [
          [
            33.7061,
            41.9514
          ],
          [
            33.3858,
            41.2919
          ],
          [
            33.2544,
            41.0172
          ],
          [
            33.2028,
            40.9083
          ],
          [
            33.1244,
            40.7406
          ],
          [
            32.8103,
            40.0697
          ],
          [
            32.9217,
            39.3711
          ],
          [
            32.9431,
            39.2153
          ],
          [
            33.1189,
            38.0239
          ],
          [
            33.2917,
            36.8628
          ],
          [
            33.2869,
            36.3825
          ],
          [
            33.2847,
            36.1536
          ],
          [
            33.2869,
            36.0364
          ],
          [
            33.2833,
            35.9333
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UA285"
      },
      geometry: {
        coordinates: [
          [
            33.2917,
            36.8628
          ],
          [
            33.9625,
            37.4439
          ],
          [
            34.4994,
            37.8989
          ],
          [
            34.9436,
            38.2703
          ],
          [
            35.0667,
            38.3728
          ],
          [
            35.2289,
            38.5239
          ],
          [
            35.765,
            38.9422
          ],
          [
            36.0286,
            39.1542
          ],
          [
            36.5011,
            39.5036
          ],
          [
            36.8933,
            39.7894
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UA4"
      },
      geometry: {
        coordinates: [
          [
            26.5683,
            41.8717
          ],
          [
            27.3092,
            41.5772
          ],
          [
            28.3842,
            41.1364
          ],
          [
            29.1428,
            41.1269
          ],
          [
            29.63,
            41.0458
          ],
          [
            29.9797,
            40.9867
          ],
          [
            30.3453,
            40.9228
          ],
          [
            30.6661,
            40.8656
          ],
          [
            31.8328,
            40.5822
          ],
          [
            32.1994,
            40.4739
          ],
          [
            33.105,
            40.2419
          ],
          [
            33.8328,
            40.1683
          ],
          [
            33.9558,
            40.1514
          ],
          [
            35.3611,
            39.9919
          ],
          [
            36.2747,
            39.8739
          ],
          [
            36.3606,
            39.8611
          ],
          [
            36.8933,
            39.7894
          ],
          [
            37.4314,
            39.8328
          ],
          [
            37.9747,
            39.8736
          ],
          [
            38.8869,
            39.9369
          ],
          [
            39.1019,
            39.9406
          ],
          [
            39.5778,
            39.9475
          ],
          [
            39.9167,
            39.9514
          ],
          [
            40.6647,
            39.9561
          ],
          [
            41.2069,
            39.9567
          ],
          [
            41.6083,
            39.6808
          ],
          [
            41.8797,
            39.4928
          ],
          [
            42.1853,
            39.2792
          ],
          [
            42.9381,
            38.7447
          ],
          [
            43.325,
            38.4661
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UB111"
      },
      geometry: {
        coordinates: [
          [
            39.7956,
            40.9953
          ],
          [
            40.4189,
            40.9228
          ],
          [
            40.8772,
            40.8672
          ],
          [
            42.5886,
            40.6347
          ],
          [
            42.7767,
            40.6067
          ],
          [
            43.1042,
            40.5567
          ],
          [
            43.3772,
            40.6906
          ],
          [
            43.685,
            40.84
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UB36"
      },
      geometry: {
        coordinates: [
          [
            36.0286,
            39.1542
          ],
          [
            36.7075,
            38.14
          ],
          [
            36.9197,
            37.8114
          ],
          [
            37.0581,
            37.5864
          ],
          [
            37.2744,
            37.2625
          ],
          [
            37.3336,
            37.1714
          ],
          [
            37.4728,
            36.9514
          ],
          [
            37.4006,
            36.7036
          ],
          [
            37.3831,
            36.6489
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UB374"
      },
      geometry: {
        coordinates: [
          [
            41.2069,
            39.9567
          ],
          [
            41.7431,
            39.9958
          ],
          [
            42.4333,
            40.0444
          ],
          [
            43.3694,
            40.0997
          ],
          [
            43.6647,
            40.1156
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UB545"
      },
      geometry: {
        coordinates: [
          [
            30.1069,
            38.9094
          ],
          [
            30.5467,
            38.8039
          ],
          [
            31.0186,
            38.4819
          ],
          [
            31.5411,
            38.1156
          ],
          [
            31.5828,
            38.0908
          ],
          [
            32.2036,
            37.6517
          ],
          [
            33.2917,
            36.8628
          ],
          [
            33.7544,
            36.2611
          ],
          [
            34.0167,
            35.9167
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UG1"
      },
      geometry: {
        coordinates: [
          [
            28.7661,
            42.0822
          ],
          [
            28.7792,
            41.7461
          ],
          [
            28.7897,
            41.4783
          ],
          [
            28.7994,
            41.2281
          ],
          [
            28.8106,
            40.9614
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UG12"
      },
      geometry: {
        coordinates: [
          [
            26.2494,
            40.8822
          ],
          [
            26.9781,
            40.9261
          ],
          [
            27.1408,
            40.9353
          ],
          [
            27.4261,
            40.9511
          ],
          [
            29.2075,
            40.475
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UG123"
      },
      geometry: {
        coordinates: [
          [
            29.2075,
            40.475
          ],
          [
            29.1428,
            41.1269
          ],
          [
            29.1467,
            41.4614
          ],
          [
            29.1428,
            42.1706
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UG261"
      },
      geometry: {
        coordinates: [
          [
            39.7956,
            40.9953
          ],
          [
            42.9789,
            41.4281
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UG67"
      },
      geometry: {
        coordinates: [
          [
            39.7956,
            40.9953
          ],
          [
            40.3758,
            41.1933
          ],
          [
            41.4497,
            41.5489
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UG8"
      },
      geometry: {
        coordinates: [
          [
            26.4994,
            39.3322
          ],
          [
            26.8933,
            39.7694
          ],
          [
            27.3653,
            40.2842
          ],
          [
            28.0175,
            40.5944
          ],
          [
            28.8106,
            40.9614
          ],
          [
            29.2075,
            40.475
          ],
          [
            29.6172,
            40.4347
          ],
          [
            29.9536,
            40.4006
          ],
          [
            30.1828,
            40.3767
          ],
          [
            30.7722,
            40.3133
          ],
          [
            31.8781,
            40.1861
          ],
          [
            32.0814,
            40.1711
          ],
          [
            32.8103,
            40.0697
          ],
          [
            33.6106,
            39.8322
          ],
          [
            33.8869,
            39.7761
          ],
          [
            35.1828,
            39.4017
          ],
          [
            36.0286,
            39.1542
          ],
          [
            38.9022,
            38.7561
          ],
          [
            39.2239,
            38.7081
          ],
          [
            39.5125,
            38.6242
          ],
          [
            40.8164,
            38.2406
          ],
          [
            41.1314,
            38.1425
          ],
          [
            41.5319,
            38.0194
          ],
          [
            41.8819,
            37.9606
          ],
          [
            42.1417,
            37.8942
          ],
          [
            42.66,
            37.8592
          ],
          [
            43.2497,
            37.8156
          ],
          [
            44.415,
            37.7344
          ],
          [
            44.6267,
            37.7083
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UG80"
      },
      geometry: {
        coordinates: [
          [
            26.5683,
            41.8717
          ],
          [
            26.9536,
            41.4622
          ],
          [
            27.1869,
            41.2111
          ],
          [
            27.4261,
            40.9511
          ],
          [
            27.3653,
            40.2842
          ],
          [
            27.3092,
            39.9839
          ],
          [
            27.2772,
            39.8117
          ],
          [
            27.2244,
            39.4989
          ],
          [
            27.1328,
            38.9989
          ],
          [
            27.0072,
            38.3172
          ],
          [
            27.3864,
            37.6292
          ],
          [
            27.4606,
            37.5
          ],
          [
            27.6419,
            37.1678
          ],
          [
            27.8833,
            36.7097
          ],
          [
            27.9953,
            36.4947
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UG802"
      },
      geometry: {
        coordinates: [
          [
            26.1994,
            38.3489
          ],
          [
            27.0072,
            38.3172
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UG81"
      },
      geometry: {
        coordinates: [
          [
            39.2239,
            38.7081
          ],
          [
            39.5333,
            38.6939
          ],
          [
            40.2167,
            38.6617
          ],
          [
            40.825,
            38.6306
          ],
          [
            41.4039,
            38.5947
          ],
          [
            42.7881,
            38.505
          ],
          [
            43.325,
            38.4661
          ],
          [
            43.7831,
            38.2656
          ],
          [
            44.2997,
            38.0489
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UG901"
      },
      geometry: {
        coordinates: [
          [
            37.6667,
            42.6833
          ],
          [
            37.0453,
            41.9039
          ],
          [
            36.5489,
            41.2656
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UL124"
      },
      geometry: {
        coordinates: [
          [
            34.7389,
            40.7464
          ],
          [
            37.5728,
            40.0822
          ],
          [
            39.4681,
            39.5117
          ],
          [
            40.1886,
            39.3247
          ],
          [
            43.325,
            38.4661
          ],
          [
            43.7831,
            38.2656
          ],
          [
            44.2997,
            38.0489
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UL223"
      },
      geometry: {
        coordinates: [
          [
            43.0269,
            39.6458
          ],
          [
            44.2083,
            38.9097
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UL333"
      },
      geometry: {
        coordinates: [
          [
            29.1428,
            41.1269
          ],
          [
            30.7114,
            40.6314
          ],
          [
            31.2103,
            40.5253
          ],
          [
            31.4831,
            40.4661
          ],
          [
            31.9525,
            40.3628
          ],
          [
            32.0922,
            40.3314
          ],
          [
            32.8103,
            40.0697
          ],
          [
            35.4292,
            39.9097
          ],
          [
            36.8933,
            39.7894
          ],
          [
            38.1981,
            39.7567
          ],
          [
            39.1236,
            39.725
          ],
          [
            39.5292,
            39.7083
          ],
          [
            40.5569,
            39.5583
          ],
          [
            41.0792,
            39.4764
          ],
          [
            41.4139,
            39.4208
          ],
          [
            42.1853,
            39.2792
          ],
          [
            44.2083,
            38.9097
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UL601"
      },
      geometry: {
        coordinates: [
          [
            29.6242,
            42.3639
          ],
          [
            30.5022,
            41.6175
          ],
          [
            30.7247,
            41.4289
          ],
          [
            31.0311,
            41.2328
          ],
          [
            31.2533,
            41.0908
          ],
          [
            32.1994,
            40.4739
          ],
          [
            32.8103,
            40.0697
          ],
          [
            33.3244,
            39.4378
          ],
          [
            33.3619,
            39.3822
          ],
          [
            33.4856,
            39.2217
          ],
          [
            34.03,
            38.5211
          ],
          [
            34.4994,
            37.8989
          ],
          [
            34.7258,
            37.6008
          ],
          [
            35.2103,
            36.9406
          ],
          [
            36.0333,
            35.8833
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UL602"
      },
      geometry: {
        coordinates: [
          [
            37.4728,
            36.9514
          ],
          [
            37.0881,
            37.2594
          ],
          [
            36.5481,
            37.6858
          ],
          [
            36.2867,
            37.8942
          ],
          [
            33.105,
            40.2419
          ],
          [
            32.1933,
            40.7139
          ],
          [
            30.7247,
            41.4289
          ],
          [
            29.1428,
            42.1706
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UL605"
      },
      geometry: {
        coordinates: [
          [
            28.7661,
            42.0822
          ],
          [
            30.9994,
            40.9989
          ],
          [
            31.8328,
            40.5822
          ],
          [
            32.1494,
            40.4183
          ],
          [
            32.8103,
            40.0697
          ],
          [
            33.5853,
            39.5789
          ],
          [
            33.7808,
            39.4575
          ],
          [
            33.9753,
            39.3319
          ],
          [
            34.2864,
            39.1308
          ],
          [
            34.3333,
            39.11
          ],
          [
            35.2289,
            38.5239
          ],
          [
            35.7789,
            38.1456
          ],
          [
            36.2203,
            37.8372
          ],
          [
            36.3536,
            37.7436
          ],
          [
            36.4722,
            37.66
          ],
          [
            36.6936,
            37.5031
          ],
          [
            37.0414,
            37.2589
          ],
          [
            37.2433,
            37.1208
          ],
          [
            37.4728,
            36.9514
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UL606"
      },
      geometry: {
        coordinates: [
          [
            26.5683,
            41.8717
          ],
          [
            26.9536,
            41.4622
          ],
          [
            27.1869,
            41.2111
          ],
          [
            27.4261,
            40.9511
          ],
          [
            29.1542,
            39.7889
          ],
          [
            29.6219,
            39.4617
          ],
          [
            30.1367,
            39.1081
          ],
          [
            30.5467,
            38.8039
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UL610"
      },
      geometry: {
        coordinates: [
          [
            31.6944,
            37.3667
          ],
          [
            30.6703,
            37.8906
          ],
          [
            30.4817,
            38.2347
          ],
          [
            30.3175,
            38.5317
          ],
          [
            30.2775,
            38.6053
          ],
          [
            30.1069,
            38.9094
          ],
          [
            30.0333,
            39.04
          ],
          [
            29.9794,
            39.1356
          ],
          [
            29.8483,
            39.3672
          ],
          [
            29.7289,
            39.5797
          ],
          [
            29.5422,
            39.9094
          ],
          [
            29.2075,
            40.475
          ],
          [
            28.8106,
            40.9614
          ],
          [
            28.3578,
            41.2864
          ],
          [
            27.2161,
            42.0656
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UL614"
      },
      geometry: {
        coordinates: [
          [
            26.5683,
            41.8717
          ],
          [
            27.3306,
            41.4753
          ],
          [
            27.9422,
            41.1522
          ],
          [
            29.2075,
            40.475
          ],
          [
            29.6172,
            40.4347
          ],
          [
            29.9536,
            40.4006
          ],
          [
            30.7722,
            40.3133
          ],
          [
            31.4239,
            40.2397
          ],
          [
            31.8781,
            40.1861
          ],
          [
            32.0814,
            40.1711
          ],
          [
            32.8103,
            40.0697
          ],
          [
            33.6106,
            39.8322
          ],
          [
            33.8869,
            39.7761
          ],
          [
            35.1828,
            39.4017
          ],
          [
            36.0286,
            39.1542
          ],
          [
            38.9022,
            38.7561
          ],
          [
            39.2239,
            38.7081
          ],
          [
            39.5125,
            38.6242
          ],
          [
            40.8164,
            38.2406
          ],
          [
            41.1314,
            38.1425
          ],
          [
            41.5319,
            38.0194
          ],
          [
            41.8819,
            37.9606
          ],
          [
            42.1417,
            37.8942
          ],
          [
            42.66,
            37.8592
          ],
          [
            43.2497,
            37.8156
          ],
          [
            44.415,
            37.7344
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UL615"
      },
      geometry: {
        coordinates: [
          [
            43.325,
            38.4661
          ],
          [
            42.9381,
            38.7447
          ],
          [
            42.1853,
            39.2792
          ],
          [
            41.8797,
            39.4928
          ],
          [
            41.6083,
            39.6808
          ],
          [
            41.2069,
            39.9567
          ],
          [
            40.6647,
            39.9561
          ],
          [
            39.9167,
            39.9514
          ],
          [
            39.5778,
            39.9475
          ],
          [
            39.1019,
            39.9406
          ],
          [
            38.8869,
            39.9369
          ],
          [
            37.9747,
            39.8736
          ],
          [
            37.4314,
            39.8328
          ],
          [
            36.8933,
            39.7894
          ],
          [
            36.3606,
            39.8611
          ],
          [
            36.2747,
            39.8739
          ],
          [
            35.3611,
            39.9919
          ],
          [
            33.9558,
            40.1514
          ],
          [
            33.8328,
            40.1683
          ],
          [
            33.105,
            40.2419
          ],
          [
            32.1994,
            40.4739
          ],
          [
            31.8328,
            40.5822
          ],
          [
            31.2508,
            40.7253
          ],
          [
            30.6661,
            40.8656
          ],
          [
            30.3453,
            40.9228
          ],
          [
            29.9797,
            40.9867
          ],
          [
            29.63,
            41.0458
          ],
          [
            29.1428,
            41.1269
          ],
          [
            28.4044,
            41.4936
          ],
          [
            27.2161,
            42.0656
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UL619"
      },
      geometry: {
        coordinates: [
          [
            34.0167,
            35.9167
          ],
          [
            33.7544,
            36.2611
          ],
          [
            33.2917,
            36.8628
          ],
          [
            31.5828,
            38.0908
          ],
          [
            31.0186,
            38.4819
          ],
          [
            30.5467,
            38.8039
          ],
          [
            30.2661,
            39.4989
          ],
          [
            29.5161,
            41.1989
          ],
          [
            29.1428,
            42.1706
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UL620"
      },
      geometry: {
        coordinates: [
          [
            28.7661,
            42.0822
          ],
          [
            28.7744,
            41.8711
          ],
          [
            28.7792,
            41.7461
          ],
          [
            28.7897,
            41.4783
          ],
          [
            28.7994,
            41.2281
          ],
          [
            28.8106,
            40.9614
          ],
          [
            29.2075,
            40.475
          ],
          [
            29.3231,
            40.3344
          ],
          [
            29.4389,
            40.1931
          ],
          [
            29.9556,
            39.5533
          ],
          [
            30.0544,
            39.4292
          ],
          [
            30.5467,
            38.8039
          ],
          [
            31.0186,
            38.4819
          ],
          [
            31.5411,
            38.1156
          ],
          [
            31.5828,
            38.0908
          ],
          [
            33.2917,
            36.8628
          ],
          [
            33.7544,
            36.2611
          ],
          [
            34.0167,
            35.9167
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UL621"
      },
      geometry: {
        coordinates: [
          [
            33.2917,
            36.8628
          ],
          [
            33.2297,
            38.0144
          ],
          [
            33.105,
            40.2419
          ],
          [
            32.0692,
            41.1325
          ],
          [
            31.5858,
            41.5375
          ],
          [
            31.5308,
            41.5828
          ],
          [
            31.3086,
            41.7664
          ],
          [
            31.0228,
            42.0006
          ],
          [
            30.6689,
            42.2872
          ],
          [
            30.2644,
            42.6106
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UL746"
      },
      geometry: {
        coordinates: [
          [
            44.2083,
            38.9097
          ],
          [
            41.2069,
            39.9567
          ],
          [
            39.6764,
            40.4181
          ],
          [
            38.9028,
            40.6403
          ],
          [
            36.5489,
            41.2656
          ],
          [
            34.5947,
            41.7461
          ],
          [
            33.7061,
            41.9514
          ],
          [
            33.0778,
            42.0711
          ],
          [
            32.6119,
            42.1661
          ],
          [
            32.2047,
            42.2469
          ],
          [
            32.1236,
            42.2628
          ],
          [
            31.1075,
            42.4572
          ],
          [
            30.2644,
            42.6106
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UL851"
      },
      geometry: {
        coordinates: [
          [
            34.0878,
            42.7806
          ],
          [
            37.0453,
            41.9039
          ],
          [
            37.6619,
            41.7086
          ],
          [
            38.79,
            41.34
          ],
          [
            39.1697,
            41.2153
          ],
          [
            39.7956,
            40.9953
          ],
          [
            40.2547,
            40.6628
          ],
          [
            40.3494,
            40.5936
          ],
          [
            40.5383,
            40.4547
          ],
          [
            40.82,
            40.2458
          ],
          [
            41.2069,
            39.9567
          ],
          [
            41.7358,
            39.8697
          ],
          [
            42.7083,
            39.7025
          ],
          [
            43.0269,
            39.6458
          ],
          [
            44.0867,
            39.3233
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UL852"
      },
      geometry: {
        coordinates: [
          [
            44.4964,
            38.2858
          ],
          [
            42.9381,
            38.7447
          ],
          [
            41.4514,
            39.3153
          ],
          [
            40.5569,
            39.5583
          ],
          [
            39.5583,
            39.8519
          ],
          [
            39.2919,
            39.9436
          ],
          [
            38.7603,
            40.1244
          ],
          [
            38.15,
            40.3278
          ],
          [
            37.6758,
            40.47
          ],
          [
            36.6683,
            40.7642
          ],
          [
            36.0625,
            40.9356
          ],
          [
            35.8661,
            40.9903
          ],
          [
            34.8622,
            41.2636
          ],
          [
            34.3372,
            41.4025
          ],
          [
            34.1353,
            41.4547
          ],
          [
            33.5786,
            41.5969
          ],
          [
            33.5381,
            41.6072
          ],
          [
            33.0311,
            41.7336
          ],
          [
            32.7594,
            41.8003
          ],
          [
            32.4608,
            41.8722
          ],
          [
            32.3664,
            41.895
          ],
          [
            32.2325,
            41.9269
          ],
          [
            31.8858,
            42.0092
          ],
          [
            31.4031,
            42.1211
          ],
          [
            29.8703,
            42.4617
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UL854"
      },
      geometry: {
        coordinates: [
          [
            27.4261,
            40.9511
          ],
          [
            27.6489,
            40.5272
          ],
          [
            27.9953,
            39.8656
          ],
          [
            28.2767,
            39.2989
          ],
          [
            28.3981,
            39.05
          ],
          [
            28.6328,
            38.5822
          ],
          [
            29.3253,
            38.0711
          ],
          [
            29.7042,
            37.7897
          ],
          [
            30.0003,
            37.5553
          ],
          [
            30.0744,
            37.4972
          ],
          [
            30.3494,
            37.2697
          ],
          [
            30.7944,
            36.9206
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UL867"
      },
      geometry: {
        coordinates: [
          [
            26.7664,
            41.9711
          ],
          [
            27.3306,
            41.4753
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UM10"
      },
      geometry: {
        coordinates: [
          [
            41.4497,
            41.5489
          ],
          [
            39.5831,
            41.6433
          ],
          [
            37.6619,
            41.7086
          ],
          [
            34.5947,
            41.7461
          ],
          [
            33.0311,
            41.7336
          ],
          [
            32.2983,
            41.7233
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UM11"
      },
      geometry: {
        coordinates: [
          [
            36.5489,
            41.2656
          ],
          [
            37.2247,
            41.2144
          ],
          [
            37.5544,
            41.19
          ],
          [
            37.6181,
            41.1869
          ],
          [
            37.8839,
            41.1644
          ],
          [
            38.2722,
            41.1331
          ],
          [
            38.6058,
            41.1053
          ],
          [
            38.7019,
            41.0969
          ],
          [
            39.1372,
            41.0572
          ],
          [
            39.7956,
            40.9953
          ],
          [
            40.2044,
            40.9853
          ],
          [
            40.8903,
            40.965
          ],
          [
            43.685,
            40.84
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UM603"
      },
      geometry: {
        coordinates: [
          [
            26.2494,
            40.8822
          ],
          [
            26.9781,
            40.9261
          ],
          [
            27.1408,
            40.9353
          ],
          [
            27.4261,
            40.9511
          ],
          [
            28.8106,
            40.9614
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UM688"
      },
      geometry: {
        coordinates: [
          [
            34.3372,
            41.4025
          ],
          [
            36.5489,
            41.2656
          ],
          [
            38.2794,
            40.3797
          ],
          [
            39.1019,
            39.9406
          ],
          [
            39.5292,
            39.7083
          ],
          [
            40.1886,
            39.3247
          ],
          [
            41.4039,
            38.5947
          ],
          [
            41.8261,
            38.3506
          ],
          [
            42.2086,
            38.1267
          ],
          [
            42.66,
            37.8592
          ],
          [
            43.9344,
            37.2406
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UM853"
      },
      geometry: {
        coordinates: [
          [
            30.7944,
            36.9206
          ],
          [
            31.5828,
            38.0908
          ],
          [
            33.105,
            40.2419
          ],
          [
            33.3736,
            41.0175
          ],
          [
            33.4747,
            41.3044
          ],
          [
            33.7061,
            41.9514
          ],
          [
            33.8142,
            42.1892
          ],
          [
            34.0878,
            42.7806
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UM854"
      },
      geometry: {
        coordinates: [
          [
            37.4728,
            36.9514
          ],
          [
            37.3336,
            37.1714
          ],
          [
            37.2744,
            37.2625
          ],
          [
            37.0581,
            37.5864
          ],
          [
            36.9197,
            37.8114
          ],
          [
            36.7075,
            38.14
          ],
          [
            36.0286,
            39.1542
          ],
          [
            35.4292,
            39.9097
          ],
          [
            35.3611,
            39.9919
          ],
          [
            34.7389,
            40.7464
          ],
          [
            34.2461,
            41.3253
          ],
          [
            33.7061,
            41.9514
          ],
          [
            33.1811,
            42.7989
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UM855"
      },
      geometry: {
        coordinates: [
          [
            30.825,
            36.0411
          ],
          [
            30.8119,
            36.4156
          ],
          [
            30.7944,
            36.9206
          ],
          [
            30.7328,
            37.4156
          ],
          [
            30.7083,
            37.5833
          ],
          [
            30.6703,
            37.8906
          ],
          [
            30.6569,
            37.9822
          ],
          [
            30.6178,
            38.2806
          ],
          [
            30.5467,
            38.8039
          ],
          [
            30.1244,
            39.46
          ],
          [
            29.9561,
            39.7617
          ],
          [
            29.87,
            39.9147
          ],
          [
            29.1428,
            41.1269
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UM856"
      },
      geometry: {
        coordinates: [
          [
            31.9478,
            42.7989
          ],
          [
            32.2983,
            41.7233
          ],
          [
            32.8103,
            40.0697
          ],
          [
            32.9217,
            39.3711
          ],
          [
            32.9431,
            39.2153
          ],
          [
            33.1189,
            38.0239
          ],
          [
            33.1694,
            37.6867
          ],
          [
            33.2917,
            36.8628
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UM859"
      },
      geometry: {
        coordinates: [
          [
            30.5961,
            42.7389
          ],
          [
            32.0172,
            42.5875
          ],
          [
            32.0483,
            42.5839
          ],
          [
            33.1319,
            42.4561
          ],
          [
            33.4172,
            42.4206
          ],
          [
            33.8925,
            42.3597
          ],
          [
            34.3933,
            42.2936
          ],
          [
            34.7986,
            42.2383
          ],
          [
            35.4131,
            42.1514
          ],
          [
            37.0453,
            41.9039
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UM860"
      },
      geometry: {
        coordinates: [
          [
            34.0878,
            42.7806
          ],
          [
            35.0769,
            42.0222
          ],
          [
            36.5489,
            41.2656
          ],
          [
            38.15,
            40.3278
          ],
          [
            39.1236,
            39.725
          ],
          [
            39.4681,
            39.5117
          ],
          [
            39.9722,
            39.1889
          ],
          [
            40.825,
            38.6306
          ],
          [
            41.08,
            38.4639
          ],
          [
            41.8819,
            37.9606
          ],
          [
            43.2167,
            37.35
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UM861"
      },
      geometry: {
        coordinates: [
          [
            36.6414,
            36.7844
          ],
          [
            36.4794,
            36.9514
          ],
          [
            35.0667,
            38.3728
          ],
          [
            34.2864,
            39.1308
          ],
          [
            33.105,
            40.2419
          ],
          [
            31.9478,
            42.7989
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UN127"
      },
      geometry: {
        coordinates: [
          [
            26.4333,
            38.8333
          ],
          [
            27.0072,
            38.3172
          ],
          [
            28.1258,
            37.3025
          ],
          [
            28.2853,
            37.1547
          ],
          [
            28.3678,
            37.0786
          ],
          [
            28.7822,
            36.6894
          ],
          [
            29.1747,
            36.3189
          ],
          [
            29.3167,
            36.1833
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UN128"
      },
      geometry: {
        coordinates: [
          [
            26.4333,
            38.8333
          ],
          [
            27.0072,
            38.3172
          ],
          [
            27.3864,
            37.6292
          ],
          [
            27.4606,
            37.5
          ],
          [
            27.6419,
            37.1678
          ],
          [
            27.8833,
            36.7097
          ],
          [
            27.9953,
            36.4947
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UN129"
      },
      geometry: {
        coordinates: [
          [
            27.2244,
            39.4989
          ],
          [
            28.05,
            36.4833
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UN131"
      },
      geometry: {
        coordinates: [
          [
            25.8833,
            40.5
          ],
          [
            26.4275,
            40.1353
          ],
          [
            26.8933,
            39.7694
          ],
          [
            27.2244,
            39.4989
          ],
          [
            27.8697,
            39.0839
          ],
          [
            28.6328,
            38.5822
          ],
          [
            29.3253,
            38.0711
          ],
          [
            29.7042,
            37.7897
          ],
          [
            30.0003,
            37.5553
          ],
          [
            30.0744,
            37.4972
          ],
          [
            30.3494,
            37.2697
          ],
          [
            30.7944,
            36.9206
          ],
          [
            31.3578,
            36.6989
          ],
          [
            31.6808,
            36.5786
          ],
          [
            31.9222,
            36.4722
          ],
          [
            32.7239,
            36.1608
          ],
          [
            33.2833,
            35.9333
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UN135"
      },
      geometry: {
        coordinates: [
          [
            34.0167,
            35.9167
          ],
          [
            33.2847,
            36.1536
          ],
          [
            32.7161,
            36.3347
          ],
          [
            31.5936,
            36.6831
          ],
          [
            31.3889,
            36.7511
          ],
          [
            30.7944,
            36.9206
          ],
          [
            29.9994,
            37.23
          ],
          [
            29.7231,
            37.3431
          ],
          [
            29.4236,
            37.4583
          ],
          [
            28.7033,
            37.7217
          ],
          [
            27.9042,
            38.0022
          ],
          [
            27.8328,
            38.0317
          ],
          [
            27.0072,
            38.3172
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UN136"
      },
      geometry: {
        coordinates: [
          [
            28.4833,
            36.55
          ],
          [
            28.7822,
            36.6894
          ],
          [
            29.1433,
            37.125
          ],
          [
            29.2497,
            37.2519
          ],
          [
            29.3125,
            37.3272
          ],
          [
            29.4236,
            37.4583
          ],
          [
            29.7042,
            37.7897
          ],
          [
            30.0019,
            38.1522
          ],
          [
            30.1197,
            38.2944
          ],
          [
            30.1569,
            38.3383
          ],
          [
            30.3175,
            38.5317
          ],
          [
            30.5467,
            38.8039
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UN161"
      },
      geometry: {
        coordinates: [
          [
            41.2069,
            39.9567
          ],
          [
            41.7431,
            39.9958
          ],
          [
            42.4333,
            40.0444
          ],
          [
            43.3694,
            40.0997
          ],
          [
            43.6647,
            40.1156
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UN37"
      },
      geometry: {
        coordinates: [
          [
            39.7956,
            40.9953
          ],
          [
            40.3758,
            41.1933
          ],
          [
            41.4497,
            41.5489
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UN604"
      },
      geometry: {
        coordinates: [
          [
            26.4994,
            39.3322
          ],
          [
            26.8933,
            39.7694
          ],
          [
            27.275,
            40.1867
          ],
          [
            27.3653,
            40.2842
          ],
          [
            29.1428,
            41.1269
          ],
          [
            29.1467,
            41.4614
          ],
          [
            29.1428,
            42.1706
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UN61"
      },
      geometry: {
        coordinates: [
          [
            39.7956,
            40.9953
          ],
          [
            41.9606,
            41.3006
          ],
          [
            42.9789,
            41.4281
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UN616"
      },
      geometry: {
        coordinates: [
          [
            28.7661,
            42.0822
          ],
          [
            28.7744,
            41.8711
          ],
          [
            28.7792,
            41.7461
          ],
          [
            28.7897,
            41.4783
          ],
          [
            28.7994,
            41.2281
          ],
          [
            28.8106,
            40.9614
          ],
          [
            29.1542,
            39.7889
          ],
          [
            29.2686,
            39.3972
          ],
          [
            29.4703,
            38.6656
          ],
          [
            29.7042,
            37.7897
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UN617"
      },
      geometry: {
        coordinates: [
          [
            29.1428,
            42.1706
          ],
          [
            29.1467,
            41.4614
          ],
          [
            29.1428,
            41.1269
          ],
          [
            29.2075,
            40.475
          ],
          [
            29.7186,
            39.8903
          ],
          [
            29.9269,
            39.52
          ],
          [
            30.1828,
            39.0653
          ],
          [
            30.6178,
            38.2806
          ],
          [
            31.6944,
            37.3667
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UN618"
      },
      geometry: {
        coordinates: [
          [
            28.7822,
            36.6894
          ],
          [
            28.2828,
            36.8989
          ],
          [
            28.2231,
            36.9261
          ],
          [
            27.6419,
            37.1678
          ],
          [
            27.4606,
            37.5
          ],
          [
            27.3864,
            37.6292
          ],
          [
            27.0072,
            38.3172
          ],
          [
            27.1328,
            38.9989
          ],
          [
            27.2244,
            39.4989
          ],
          [
            27.2772,
            39.8117
          ],
          [
            27.3092,
            39.9839
          ],
          [
            27.3653,
            40.2842
          ],
          [
            27.4261,
            40.9511
          ],
          [
            27.3092,
            41.5772
          ],
          [
            27.2161,
            42.0656
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UN644"
      },
      geometry: {
        coordinates: [
          [
            26.3214,
            41.1253
          ],
          [
            26.675,
            41.13
          ],
          [
            28.3842,
            41.1364
          ],
          [
            29.1428,
            41.1269
          ],
          [
            30.6742,
            41.5911
          ],
          [
            31.1358,
            41.6789
          ],
          [
            31.7389,
            41.8067
          ],
          [
            32.2383,
            41.9094
          ],
          [
            33.0778,
            42.0711
          ],
          [
            33.8142,
            42.1892
          ],
          [
            34.4328,
            42.1114
          ],
          [
            34.8583,
            42.0522
          ],
          [
            35.0769,
            42.0222
          ],
          [
            37.0453,
            41.9039
          ],
          [
            40.6564,
            41.7992
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UN743"
      },
      geometry: {
        coordinates: [
          [
            30.5961,
            42.7389
          ],
          [
            32.5836,
            42.3336
          ],
          [
            33.8142,
            42.1892
          ],
          [
            34.3933,
            42.2936
          ],
          [
            36.9147,
            42.7089
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UP146"
      },
      geometry: {
        coordinates: [
          [
            39.7956,
            40.9953
          ],
          [
            42.4333,
            40.0444
          ],
          [
            43.0269,
            39.6458
          ],
          [
            44.0867,
            39.3233
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UP29"
      },
      geometry: {
        coordinates: [
          [
            33.1811,
            42.7989
          ],
          [
            33.1319,
            42.4561
          ],
          [
            33.0467,
            41.8469
          ],
          [
            32.9928,
            41.4533
          ],
          [
            32.8103,
            40.0697
          ],
          [
            32.3578,
            39.3906
          ],
          [
            31.5411,
            38.1156
          ],
          [
            31.0911,
            37.3614
          ],
          [
            30.7944,
            36.9206
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UP727"
      },
      geometry: {
        coordinates: [
          [
            28.3578,
            41.2864
          ],
          [
            28.0011,
            41.9822
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UP975"
      },
      geometry: {
        coordinates: [
          [
            29.6242,
            42.3639
          ],
          [
            31.0228,
            42.0006
          ],
          [
            31.6572,
            41.8292
          ],
          [
            31.7389,
            41.8067
          ],
          [
            32.1414,
            41.695
          ],
          [
            32.2328,
            41.6694
          ],
          [
            32.3233,
            41.6442
          ],
          [
            32.5042,
            41.5931
          ],
          [
            32.9928,
            41.4533
          ],
          [
            33.2389,
            41.3511
          ],
          [
            33.3858,
            41.2919
          ],
          [
            34.7389,
            40.7464
          ],
          [
            36.8933,
            39.7894
          ],
          [
            37.3597,
            39.5797
          ],
          [
            37.6383,
            39.4528
          ],
          [
            38.9419,
            38.8422
          ],
          [
            39.2239,
            38.7081
          ],
          [
            40.2081,
            37.8733
          ],
          [
            40.9714,
            37.2772
          ],
          [
            41.2303,
            37.0722
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UR114"
      },
      geometry: {
        coordinates: [
          [
            39.4031,
            42.1839
          ],
          [
            39.5831,
            41.6433
          ],
          [
            39.6342,
            41.4892
          ],
          [
            39.7956,
            40.9953
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UR20"
      },
      geometry: {
        coordinates: [
          [
            26.2994,
            38.1072
          ],
          [
            27.0072,
            38.3172
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UR21"
      },
      geometry: {
        coordinates: [
          [
            41.8819,
            37.9606
          ],
          [
            42.6497,
            37.2489
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UR317"
      },
      geometry: {
        coordinates: [
          [
            39.7956,
            40.9953
          ],
          [
            40.2044,
            40.9853
          ],
          [
            40.8903,
            40.965
          ],
          [
            43.685,
            40.84
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UR32"
      },
      geometry: {
        coordinates: [
          [
            26.5244,
            37.9822
          ],
          [
            27.0072,
            38.3172
          ],
          [
            27.4528,
            38.3847
          ],
          [
            28.2581,
            38.5022
          ],
          [
            28.6028,
            38.5781
          ],
          [
            29.1197,
            38.6314
          ],
          [
            29.4703,
            38.6656
          ],
          [
            29.9994,
            38.7322
          ],
          [
            30.5467,
            38.8039
          ],
          [
            32.3578,
            39.3906
          ],
          [
            32.5094,
            39.4364
          ],
          [
            32.8103,
            40.0697
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UR55"
      },
      geometry: {
        coordinates: [
          [
            28.6028,
            38.5781
          ],
          [
            29.3253,
            38.0711
          ],
          [
            29.7042,
            37.7897
          ],
          [
            30.0003,
            37.5553
          ],
          [
            30.0744,
            37.4972
          ],
          [
            30.3494,
            37.2697
          ],
          [
            30.7944,
            36.9206
          ],
          [
            31.4161,
            36.8947
          ],
          [
            31.7464,
            36.9053
          ],
          [
            32.4783,
            36.8878
          ],
          [
            33.2917,
            36.8628
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UR660"
      },
      geometry: {
        coordinates: [
          [
            41.2069,
            39.9567
          ],
          [
            44.2083,
            38.9097
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT142"
      },
      geometry: {
        coordinates: [
          [
            38.7847,
            38.2769
          ],
          [
            38.3867,
            37.88
          ],
          [
            37.9056,
            37.3944
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT143"
      },
      geometry: {
        coordinates: [
          [
            38.8447,
            37.0939
          ],
          [
            38.1575,
            37.0711
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT165"
      },
      geometry: {
        coordinates: [
          [
            39.7956,
            40.9953
          ],
          [
            40.4189,
            40.9228
          ],
          [
            40.6578,
            40.8942
          ],
          [
            40.8772,
            40.8672
          ],
          [
            41.1372,
            40.835
          ],
          [
            42.4692,
            40.6525
          ],
          [
            42.5886,
            40.6347
          ],
          [
            42.7767,
            40.6067
          ],
          [
            43.1042,
            40.5567
          ],
          [
            43.3772,
            40.6906
          ],
          [
            43.685,
            40.84
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT166"
      },
      geometry: {
        coordinates: [
          [
            39.5292,
            39.7083
          ],
          [
            39.5778,
            39.9475
          ],
          [
            39.6083,
            40.0917
          ],
          [
            39.6764,
            40.4181
          ],
          [
            39.6922,
            40.5017
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT167"
      },
      geometry: {
        coordinates: [
          [
            40.8903,
            40.965
          ],
          [
            40.6592,
            40.9444
          ],
          [
            40.4189,
            40.9228
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT238"
      },
      geometry: {
        coordinates: [
          [
            27.3864,
            37.6292
          ],
          [
            27.8964,
            37.8147
          ],
          [
            28.3128,
            37.7675
          ],
          [
            28.7033,
            37.7217
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT241"
      },
      geometry: {
        coordinates: [
          [
            27.4606,
            37.5
          ],
          [
            27.8964,
            37.8147
          ],
          [
            28.2686,
            38.2197
          ],
          [
            28.6028,
            38.5781
          ],
          [
            29.5242,
            39.6411
          ],
          [
            29.8011,
            39.9528
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT243"
      },
      geometry: {
        coordinates: [
          [
            36.0286,
            39.1542
          ],
          [
            36.2747,
            39.8739
          ],
          [
            36.3775,
            40.315
          ],
          [
            36.5489,
            41.2656
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT244"
      },
      geometry: {
        coordinates: [
          [
            29.9556,
            39.5533
          ],
          [
            30.1244,
            39.46
          ],
          [
            31.7908,
            38.5106
          ],
          [
            33.1694,
            37.6867
          ],
          [
            34.4114,
            36.9147
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT253"
      },
      geometry: {
        coordinates: [
          [
            41.08,
            38.4639
          ],
          [
            42.66,
            37.8592
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT264"
      },
      geometry: {
        coordinates: [
          [
            28.3578,
            41.2864
          ],
          [
            27.7769,
            41.9667
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT268"
      },
      geometry: {
        coordinates: [
          [
            28.1731,
            41.4786
          ],
          [
            27.7769,
            41.9667
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT275"
      },
      geometry: {
        coordinates: [
          [
            33.7061,
            41.9514
          ],
          [
            33.8,
            41.3503
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT276"
      },
      geometry: {
        coordinates: [
          [
            33.8,
            41.3503
          ],
          [
            33.4747,
            41.3044
          ],
          [
            33.3858,
            41.2919
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT277"
      },
      geometry: {
        coordinates: [
          [
            30.7944,
            36.9206
          ],
          [
            31.7106,
            36.4497
          ],
          [
            32.0533,
            36.2697
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT283"
      },
      geometry: {
        coordinates: [
          [
            27.3864,
            37.6292
          ],
          [
            28.7328,
            37.3572
          ],
          [
            29.4236,
            37.4583
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT284"
      },
      geometry: {
        coordinates: [
          [
            33.7544,
            36.2611
          ],
          [
            34.1033,
            36.675
          ],
          [
            35.5336,
            38.315
          ],
          [
            36.8933,
            39.7894
          ],
          [
            37.3186,
            40.2125
          ],
          [
            37.7067,
            40.5919
          ],
          [
            37.7647,
            40.6481
          ],
          [
            37.8894,
            40.7683
          ],
          [
            38.0103,
            40.8842
          ],
          [
            38.2722,
            41.1331
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT30"
      },
      geometry: {
        coordinates: [
          [
            29.7492,
            38.2014
          ],
          [
            29.9794,
            39.1356
          ],
          [
            30.0544,
            39.4292
          ],
          [
            29.9561,
            39.7617
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT301"
      },
      geometry: {
        coordinates: [
          [
            41.8261,
            38.3506
          ],
          [
            43.2497,
            37.8156
          ],
          [
            43.7458,
            37.6836
          ],
          [
            44.2425,
            37.5492
          ],
          [
            44.8233,
            37.27
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT306"
      },
      geometry: {
        coordinates: [
          [
            41.8819,
            37.9606
          ],
          [
            41.9553,
            37.6883
          ],
          [
            42.0614,
            37.365
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT308"
      },
      geometry: {
        coordinates: [
          [
            40.6008,
            38.8556
          ],
          [
            39.96,
            38.7933
          ],
          [
            39.2239,
            38.7081
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT309"
      },
      geometry: {
        coordinates: [
          [
            40.6008,
            38.8556
          ],
          [
            40.8533,
            39.3183
          ],
          [
            41.2069,
            39.9567
          ],
          [
            41.7028,
            40.1186
          ],
          [
            42.5081,
            40.3733
          ],
          [
            42.7961,
            40.4622
          ],
          [
            43.1042,
            40.5567
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT310"
      },
      geometry: {
        coordinates: [
          [
            33.7061,
            41.9514
          ],
          [
            33.0467,
            41.8469
          ],
          [
            32.2983,
            41.7233
          ],
          [
            31.3494,
            41.5489
          ],
          [
            30.7247,
            41.4289
          ],
          [
            29.9994,
            41.2989
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT315"
      },
      geometry: {
        coordinates: [
          [
            30.6742,
            41.5911
          ],
          [
            31.3494,
            41.5489
          ],
          [
            32.0444,
            41.5139
          ],
          [
            32.2983,
            41.7233
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT32"
      },
      geometry: {
        coordinates: [
          [
            36.0286,
            39.1542
          ],
          [
            33.105,
            40.2419
          ],
          [
            32.0922,
            40.3314
          ],
          [
            31.9525,
            40.3628
          ],
          [
            31.4831,
            40.4661
          ],
          [
            31.2103,
            40.5253
          ],
          [
            30.7114,
            40.6314
          ],
          [
            30.5425,
            40.6667
          ],
          [
            30.3314,
            40.7106
          ],
          [
            29.9706,
            40.7844
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT327"
      },
      geometry: {
        coordinates: [
          [
            28.5522,
            41.3808
          ],
          [
            27.7769,
            41.9667
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT331"
      },
      geometry: {
        coordinates: [
          [
            42.4333,
            40.0444
          ],
          [
            43.2956,
            40.2003
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT332"
      },
      geometry: {
        coordinates: [
          [
            42.7881,
            38.505
          ],
          [
            42.7089,
            38.1069
          ],
          [
            42.66,
            37.8592
          ],
          [
            42.6497,
            37.2489
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT333"
      },
      geometry: {
        coordinates: [
          [
            42.7881,
            38.505
          ],
          [
            42.4139,
            38.2614
          ],
          [
            42.2086,
            38.1267
          ],
          [
            41.8819,
            37.9606
          ],
          [
            41.7725,
            37.77
          ],
          [
            41.2303,
            37.0722
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT334"
      },
      geometry: {
        coordinates: [
          [
            42.6497,
            37.2489
          ],
          [
            41.7725,
            37.77
          ],
          [
            41.1314,
            38.1425
          ],
          [
            40.8844,
            38.2842
          ],
          [
            40.4128,
            38.5517
          ],
          [
            40.2167,
            38.6617
          ],
          [
            39.645,
            38.9789
          ],
          [
            39.3544,
            39.1381
          ],
          [
            38.1981,
            39.7567
          ],
          [
            37.9747,
            39.8736
          ],
          [
            37.5728,
            40.0822
          ],
          [
            36.7269,
            40.5119
          ],
          [
            35.6903,
            41.0225
          ],
          [
            34.5364,
            41.5703
          ],
          [
            33.7061,
            41.9514
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT336"
      },
      geometry: {
        coordinates: [
          [
            30.7944,
            36.9206
          ],
          [
            31.6239,
            36.585
          ],
          [
            32,
            36.4289
          ],
          [
            32.2972,
            36.3042
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT337"
      },
      geometry: {
        coordinates: [
          [
            30.6703,
            37.8906
          ],
          [
            30.8103,
            38.1292
          ],
          [
            31.0186,
            38.4819
          ],
          [
            30.5008,
            39.5469
          ],
          [
            29.5161,
            41.1989
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT338"
      },
      geometry: {
        coordinates: [
          [
            29.9269,
            39.52
          ],
          [
            30.1244,
            39.46
          ],
          [
            30.1569,
            38.3383
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT339"
      },
      geometry: {
        coordinates: [
          [
            32.2972,
            36.3042
          ],
          [
            32.6533,
            36.5061
          ],
          [
            33.2917,
            36.8628
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT341"
      },
      geometry: {
        coordinates: [
          [
            29.9797,
            40.9867
          ],
          [
            30.0714,
            40.7375
          ],
          [
            30.7114,
            40.6314
          ],
          [
            31.2222,
            40.3808
          ],
          [
            31.9161,
            40.2667
          ],
          [
            32.8103,
            40.0697
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT342"
      },
      geometry: {
        coordinates: [
          [
            29.9536,
            40.4006
          ],
          [
            30.0714,
            40.7375
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT35"
      },
      geometry: {
        coordinates: [
          [
            28.8106,
            40.9614
          ],
          [
            29.3783,
            39.9067
          ],
          [
            29.5242,
            39.6411
          ],
          [
            29.8958,
            38.8914
          ],
          [
            30.1569,
            38.3383
          ],
          [
            30.1978,
            38.2494
          ],
          [
            30.305,
            38.0156
          ],
          [
            30.7944,
            36.9206
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT350"
      },
      geometry: {
        coordinates: [
          [
            27.2244,
            39.4989
          ],
          [
            28.6353,
            37.5003
          ],
          [
            28.7328,
            37.3572
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT36"
      },
      geometry: {
        coordinates: [
          [
            39.2239,
            38.7081
          ],
          [
            40.4128,
            38.5517
          ],
          [
            41.08,
            38.4639
          ],
          [
            41.8261,
            38.3506
          ],
          [
            42.4139,
            38.2614
          ],
          [
            43.3647,
            38.1106
          ],
          [
            44.415,
            37.7344
          ],
          [
            44.6267,
            37.7083
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT366"
      },
      geometry: {
        coordinates: [
          [
            44.2997,
            38.0489
          ],
          [
            43.325,
            38.4661
          ],
          [
            41.3578,
            39.5586
          ],
          [
            40.6647,
            39.9561
          ],
          [
            39.6764,
            40.4181
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT367"
      },
      geometry: {
        coordinates: [
          [
            44.2997,
            38.0489
          ],
          [
            43.325,
            38.4661
          ],
          [
            41.5122,
            39.1536
          ],
          [
            40.8878,
            39.3817
          ],
          [
            40.4983,
            39.5214
          ],
          [
            40.2769,
            39.6003
          ],
          [
            39.5583,
            39.8519
          ],
          [
            39.2919,
            39.9436
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT368"
      },
      geometry: {
        coordinates: [
          [
            39.2239,
            38.7081
          ],
          [
            39.5333,
            38.6939
          ],
          [
            40.2167,
            38.6617
          ],
          [
            40.825,
            38.6306
          ],
          [
            41.4039,
            38.5947
          ],
          [
            42.1061,
            38.5514
          ],
          [
            42.7881,
            38.505
          ],
          [
            43.325,
            38.4661
          ],
          [
            43.7831,
            38.2656
          ],
          [
            44.2997,
            38.0489
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT38"
      },
      geometry: {
        coordinates: [
          [
            25.8833,
            40.5
          ],
          [
            27.2772,
            39.8117
          ],
          [
            27.8494,
            39.52
          ],
          [
            28.2767,
            39.2989
          ],
          [
            29.4703,
            38.6656
          ],
          [
            30.1197,
            38.2944
          ],
          [
            30.1978,
            38.2494
          ],
          [
            30.6569,
            37.9822
          ],
          [
            31.6944,
            37.3667
          ],
          [
            32.4783,
            36.8878
          ],
          [
            33.2869,
            36.3825
          ],
          [
            34.0167,
            35.9167
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT39"
      },
      geometry: {
        coordinates: [
          [
            28.6328,
            38.5822
          ],
          [
            29.7231,
            37.3431
          ],
          [
            29.9228,
            37.1108
          ],
          [
            30.1464,
            36.8492
          ],
          [
            30.825,
            36.0411
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT40"
      },
      geometry: {
        coordinates: [
          [
            26.675,
            41.13
          ],
          [
            27.1408,
            40.9353
          ],
          [
            27.4261,
            40.9511
          ],
          [
            28.1833,
            39.9394
          ],
          [
            28.7997,
            39.0831
          ],
          [
            29.1197,
            38.6314
          ],
          [
            29.7042,
            37.7897
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT422"
      },
      geometry: {
        coordinates: [
          [
            32.0444,
            41.5139
          ],
          [
            31.7389,
            41.8067
          ],
          [
            31.5892,
            41.9475
          ],
          [
            31.4031,
            42.1211
          ],
          [
            31.1075,
            42.4572
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT44"
      },
      geometry: {
        coordinates: [
          [
            27.6489,
            40.5272
          ],
          [
            27.8394,
            39.8608
          ],
          [
            28.0561,
            39.0844
          ],
          [
            28.6328,
            38.5822
          ],
          [
            28.7033,
            37.7217
          ],
          [
            28.7189,
            37.5003
          ],
          [
            28.7328,
            37.3572
          ],
          [
            28.7822,
            36.6894
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT470"
      },
      geometry: {
        coordinates: [
          [
            37.4728,
            36.9514
          ],
          [
            37.7667,
            36.9847
          ],
          [
            38.54,
            37.0633
          ],
          [
            38.8447,
            37.0939
          ],
          [
            39.1,
            37.2419
          ],
          [
            40.2081,
            37.8733
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT471"
      },
      geometry: {
        coordinates: [
          [
            40.6386,
            37.2278
          ],
          [
            38.8447,
            37.0939
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT472"
      },
      geometry: {
        coordinates: [
          [
            38.9047,
            37.4581
          ],
          [
            38.8447,
            37.0939
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT489"
      },
      geometry: {
        coordinates: [
          [
            27.0072,
            38.3172
          ],
          [
            27.7764,
            37.8956
          ],
          [
            28.5,
            37.4897
          ],
          [
            28.7328,
            37.3572
          ],
          [
            29.2497,
            37.2519
          ],
          [
            29.4011,
            37.2206
          ],
          [
            29.6383,
            37.1711
          ],
          [
            29.9228,
            37.1108
          ],
          [
            30.7944,
            36.9206
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT495"
      },
      geometry: {
        coordinates: [
          [
            28.7328,
            37.3572
          ],
          [
            28.4714,
            37.2394
          ],
          [
            28.2778,
            37.1514
          ],
          [
            28.0911,
            37.0656
          ],
          [
            27.6814,
            37.2469
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT54"
      },
      geometry: {
        coordinates: [
          [
            27.0072,
            38.3172
          ],
          [
            27.4528,
            38.3847
          ],
          [
            28.2581,
            38.5022
          ],
          [
            28.6328,
            38.5822
          ],
          [
            29.1197,
            38.6314
          ],
          [
            29.4703,
            38.6656
          ],
          [
            29.9994,
            38.7322
          ],
          [
            30.5467,
            38.8039
          ],
          [
            31.8114,
            39.2178
          ],
          [
            32.3578,
            39.3906
          ],
          [
            32.5094,
            39.4364
          ],
          [
            32.8103,
            40.0697
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT58"
      },
      geometry: {
        coordinates: [
          [
            29.7492,
            38.2014
          ],
          [
            30.2775,
            38.6053
          ],
          [
            30.5467,
            38.8039
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT61"
      },
      geometry: {
        coordinates: [
          [
            35.0769,
            42.0222
          ],
          [
            34.5364,
            41.5703
          ],
          [
            34.2461,
            41.3253
          ],
          [
            32.8103,
            40.0697
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UT62"
      },
      geometry: {
        coordinates: [
          [
            32.9217,
            39.3711
          ],
          [
            31.9661,
            37.8208
          ],
          [
            31.6944,
            37.3667
          ],
          [
            31.5333,
            37.0942
          ],
          [
            31.4161,
            36.8947
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW100"
      },
      geometry: {
        coordinates: [
          [
            33.1811,
            42.7989
          ],
          [
            33.7061,
            41.9514
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW101"
      },
      geometry: {
        coordinates: [
          [
            34.0878,
            42.7806
          ],
          [
            33.8142,
            42.1892
          ],
          [
            33.7061,
            41.9514
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW102"
      },
      geometry: {
        coordinates: [
          [
            27.2161,
            42.0656
          ],
          [
            27.3092,
            41.5772
          ],
          [
            27.4261,
            40.9511
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW103"
      },
      geometry: {
        coordinates: [
          [
            38.1119,
            38.4625
          ],
          [
            38.3494,
            37.9589
          ],
          [
            38.3867,
            37.88
          ],
          [
            38.4567,
            37.7247
          ],
          [
            38.66,
            37.6044
          ],
          [
            38.9047,
            37.4581
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW104"
      },
      geometry: {
        coordinates: [
          [
            39.2239,
            38.7081
          ],
          [
            39.4322,
            38.5325
          ],
          [
            39.6339,
            38.3631
          ],
          [
            40.2081,
            37.8733
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW105"
      },
      geometry: {
        coordinates: [
          [
            33.3619,
            39.3822
          ],
          [
            34.1125,
            38.9933
          ],
          [
            34.5428,
            38.7667
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW106"
      },
      geometry: {
        coordinates: [
          [
            34.03,
            38.5211
          ],
          [
            34.2272,
            38.6158
          ],
          [
            34.5428,
            38.7667
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW107"
      },
      geometry: {
        coordinates: [
          [
            30.3639,
            41.5914
          ],
          [
            31.3494,
            41.5489
          ],
          [
            31.5858,
            41.5375
          ],
          [
            32.0444,
            41.5139
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW108"
      },
      geometry: {
        coordinates: [
          [
            40.6386,
            37.2278
          ],
          [
            38.8447,
            37.0939
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW110"
      },
      geometry: {
        coordinates: [
          [
            30.6703,
            37.8906
          ],
          [
            30.3447,
            37.8422
          ],
          [
            30.2328,
            37.8397
          ],
          [
            29.7042,
            37.7897
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW197"
      },
      geometry: {
        coordinates: [
          [
            41.8819,
            37.9606
          ],
          [
            41.9553,
            37.6883
          ],
          [
            42.0614,
            37.365
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW27"
      },
      geometry: {
        coordinates: [
          [
            41.2069,
            39.9567
          ],
          [
            41.7028,
            40.1186
          ],
          [
            42.7961,
            40.4622
          ],
          [
            43.1042,
            40.5567
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW308"
      },
      geometry: {
        coordinates: [
          [
            33.7061,
            41.9514
          ],
          [
            33.8,
            41.3503
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW309"
      },
      geometry: {
        coordinates: [
          [
            33.8,
            41.3503
          ],
          [
            33.4747,
            41.3044
          ],
          [
            33.3858,
            41.2919
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW310"
      },
      geometry: {
        coordinates: [
          [
            40.6008,
            38.8556
          ],
          [
            39.96,
            38.7933
          ],
          [
            39.2239,
            38.7081
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW311"
      },
      geometry: {
        coordinates: [
          [
            40.6008,
            38.8556
          ],
          [
            40.8533,
            39.3183
          ],
          [
            41.2069,
            39.9567
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW315"
      },
      geometry: {
        coordinates: [
          [
            32.0444,
            41.5139
          ],
          [
            32.2983,
            41.7233
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW701"
      },
      geometry: {
        coordinates: [
          [
            41.2069,
            39.9567
          ],
          [
            40.7858,
            39.6981
          ],
          [
            40.6925,
            39.6417
          ],
          [
            40.5569,
            39.5583
          ],
          [
            40.1886,
            39.3247
          ],
          [
            39.9722,
            39.1889
          ],
          [
            39.645,
            38.9789
          ],
          [
            39.4703,
            38.8664
          ],
          [
            39.2239,
            38.7081
          ],
          [
            39.0272,
            38.515
          ],
          [
            39.0144,
            38.5019
          ],
          [
            38.7847,
            38.2769
          ],
          [
            38.0078,
            37.4981
          ],
          [
            37.6542,
            37.1389
          ],
          [
            37.4728,
            36.9514
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW702"
      },
      geometry: {
        coordinates: [
          [
            33.7061,
            41.9514
          ],
          [
            33.0467,
            41.8469
          ],
          [
            32.2983,
            41.7233
          ],
          [
            31.3494,
            41.5489
          ],
          [
            29.9994,
            41.2989
          ],
          [
            29.5161,
            41.1989
          ],
          [
            29.1428,
            41.1269
          ],
          [
            27.4261,
            40.9511
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW703"
      },
      geometry: {
        coordinates: [
          [
            33.7061,
            41.9514
          ],
          [
            34.2461,
            41.3253
          ],
          [
            34.7389,
            40.7464
          ],
          [
            35.3611,
            39.9919
          ],
          [
            35.4292,
            39.9097
          ],
          [
            36.0286,
            39.1542
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW704"
      },
      geometry: {
        coordinates: [
          [
            34.0878,
            42.7806
          ],
          [
            35.0769,
            42.0222
          ],
          [
            36.5489,
            41.2656
          ],
          [
            38.9028,
            40.6403
          ],
          [
            39.6764,
            40.4181
          ],
          [
            41.2069,
            39.9567
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW705"
      },
      geometry: {
        coordinates: [
          [
            32.5094,
            39.4364
          ],
          [
            33.3619,
            39.3822
          ],
          [
            33.9753,
            39.3319
          ],
          [
            35.28,
            39.2233
          ],
          [
            36.0286,
            39.1542
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW706"
      },
      geometry: {
        coordinates: [
          [
            39.7956,
            40.9953
          ],
          [
            38.9028,
            40.6403
          ],
          [
            38.5736,
            40.5061
          ],
          [
            38.2794,
            40.3797
          ],
          [
            38.15,
            40.3278
          ],
          [
            37.5728,
            40.0822
          ],
          [
            36.8933,
            39.7894
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW71"
      },
      geometry: {
        coordinates: [
          [
            32.8103,
            40.0697
          ],
          [
            33.105,
            40.2419
          ],
          [
            33.7036,
            40.4439
          ],
          [
            33.9433,
            40.5036
          ],
          [
            34.7389,
            40.7464
          ],
          [
            35.4469,
            40.9528
          ],
          [
            35.6903,
            41.0225
          ],
          [
            35.9286,
            41.0925
          ],
          [
            36.5489,
            41.2656
          ],
          [
            37.2247,
            41.2144
          ],
          [
            37.5544,
            41.19
          ],
          [
            37.6181,
            41.1869
          ],
          [
            37.8839,
            41.1644
          ],
          [
            38.2722,
            41.1331
          ],
          [
            38.6058,
            41.1053
          ],
          [
            38.7019,
            41.0969
          ],
          [
            39.1372,
            41.0572
          ],
          [
            39.7956,
            40.9953
          ],
          [
            40.2547,
            40.6628
          ],
          [
            40.82,
            40.2458
          ],
          [
            41.2069,
            39.9567
          ],
          [
            41.3578,
            39.5586
          ],
          [
            41.3922,
            39.4769
          ],
          [
            41.4139,
            39.4208
          ],
          [
            41.4514,
            39.3153
          ],
          [
            41.545,
            39.0661
          ],
          [
            41.6608,
            38.7494
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW710"
      },
      geometry: {
        coordinates: [
          [
            36.8933,
            39.7894
          ],
          [
            37.3597,
            39.5797
          ],
          [
            37.6383,
            39.4528
          ],
          [
            38.9419,
            38.8422
          ],
          [
            39.2239,
            38.7081
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW711"
      },
      geometry: {
        coordinates: [
          [
            36.3775,
            40.315
          ],
          [
            36.2747,
            39.8739
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW714"
      },
      geometry: {
        coordinates: [
          [
            29.2075,
            40.475
          ],
          [
            29.5936,
            40.2625
          ],
          [
            29.7397,
            40.0456
          ],
          [
            29.8011,
            39.9528
          ],
          [
            30.1244,
            39.46
          ],
          [
            30.5467,
            38.8039
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW715"
      },
      geometry: {
        coordinates: [
          [
            29.1428,
            41.1269
          ],
          [
            29.5936,
            40.2625
          ],
          [
            29.7397,
            40.0456
          ],
          [
            29.8011,
            39.9528
          ],
          [
            30.1244,
            39.46
          ],
          [
            30.5467,
            38.8039
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW716"
      },
      geometry: {
        coordinates: [
          [
            37.4728,
            36.9514
          ],
          [
            37.7514,
            37.0508
          ],
          [
            38.1128,
            37.1806
          ],
          [
            38.5231,
            37.325
          ],
          [
            38.9047,
            37.4581
          ],
          [
            39.2275,
            37.5628
          ],
          [
            39.2317,
            37.5639
          ],
          [
            40.2081,
            37.8733
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW717"
      },
      geometry: {
        coordinates: [
          [
            35.2103,
            36.9406
          ],
          [
            36.29,
            36.3628
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW719"
      },
      geometry: {
        coordinates: [
          [
            36.4794,
            36.9514
          ],
          [
            36.29,
            36.3628
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW72"
      },
      geometry: {
        coordinates: [
          [
            36.5489,
            41.2656
          ],
          [
            36.6656,
            40.7742
          ],
          [
            36.7269,
            40.5119
          ],
          [
            36.7992,
            40.2003
          ],
          [
            36.8933,
            39.7894
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW73"
      },
      geometry: {
        coordinates: [
          [
            36.0286,
            39.1542
          ],
          [
            37.1442,
            38.7894
          ],
          [
            38.1119,
            38.4625
          ],
          [
            38.7847,
            38.2769
          ],
          [
            39.0772,
            38.1953
          ],
          [
            39.2319,
            38.1528
          ],
          [
            40.2081,
            37.8733
          ],
          [
            40.8164,
            38.2406
          ],
          [
            40.8844,
            38.2842
          ],
          [
            41.1242,
            38.4297
          ],
          [
            41.4039,
            38.5947
          ],
          [
            41.6608,
            38.7494
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW74"
      },
      geometry: {
        coordinates: [
          [
            33.2917,
            36.8628
          ],
          [
            34.4114,
            36.9147
          ],
          [
            35.2103,
            36.9406
          ],
          [
            36.4794,
            36.9514
          ],
          [
            36.8631,
            36.9533
          ],
          [
            37.1542,
            36.9542
          ],
          [
            37.4728,
            36.9514
          ],
          [
            37.7667,
            36.9847
          ],
          [
            38.54,
            37.0633
          ],
          [
            38.8447,
            37.0939
          ],
          [
            39.1,
            37.2419
          ],
          [
            39.3486,
            37.3856
          ],
          [
            40.2081,
            37.8733
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW75"
      },
      geometry: {
        coordinates: [
          [
            32.1933,
            40.7139
          ],
          [
            32.3333,
            40.5722
          ],
          [
            32.8103,
            40.0697
          ],
          [
            33.3244,
            39.4378
          ],
          [
            33.3619,
            39.3822
          ],
          [
            33.4856,
            39.2217
          ],
          [
            34.03,
            38.5211
          ],
          [
            34.4994,
            37.8989
          ],
          [
            34.7258,
            37.6008
          ],
          [
            35.2103,
            36.9406
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW76"
      },
      geometry: {
        coordinates: [
          [
            35.5217,
            38.7756
          ],
          [
            35.3786,
            39.0411
          ],
          [
            35.28,
            39.2233
          ],
          [
            35.1828,
            39.4017
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW77"
      },
      geometry: {
        coordinates: [
          [
            32.8103,
            40.0697
          ],
          [
            32.3578,
            39.3906
          ],
          [
            31.5411,
            38.1156
          ],
          [
            31.0911,
            37.3614
          ],
          [
            30.7944,
            36.9206
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW770"
      },
      geometry: {
        coordinates: [
          [
            29.4703,
            38.6656
          ],
          [
            30.0333,
            39.04
          ],
          [
            30.1367,
            39.1081
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW78"
      },
      geometry: {
        coordinates: [
          [
            30.5467,
            38.8039
          ],
          [
            30.1569,
            38.3383
          ],
          [
            30.1197,
            38.2944
          ],
          [
            30.0019,
            38.1522
          ],
          [
            29.7042,
            37.7897
          ],
          [
            29.4236,
            37.4583
          ],
          [
            29.3125,
            37.3272
          ],
          [
            29.2497,
            37.2519
          ],
          [
            29.1433,
            37.125
          ],
          [
            28.7822,
            36.6894
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW780"
      },
      geometry: {
        coordinates: [
          [
            30.0544,
            39.4292
          ],
          [
            30.1367,
            39.1081
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW79"
      },
      geometry: {
        coordinates: [
          [
            27.6419,
            37.1678
          ],
          [
            28.2231,
            36.9261
          ],
          [
            28.2828,
            36.8989
          ],
          [
            28.7822,
            36.6894
          ],
          [
            29.4092,
            36.7656
          ],
          [
            29.765,
            36.8069
          ],
          [
            29.9994,
            36.8322
          ],
          [
            30.1464,
            36.8492
          ],
          [
            30.7944,
            36.9206
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW790"
      },
      geometry: {
        coordinates: [
          [
            30.5467,
            38.8039
          ],
          [
            30.1367,
            39.1081
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW80"
      },
      geometry: {
        coordinates: [
          [
            30.7722,
            40.3133
          ],
          [
            30.5122,
            39.8131
          ],
          [
            30.0544,
            39.4292
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW81"
      },
      geometry: {
        coordinates: [
          [
            26.675,
            41.13
          ],
          [
            27.4261,
            40.9511
          ],
          [
            27.9953,
            39.8656
          ],
          [
            28.2767,
            39.2989
          ],
          [
            28.3981,
            39.05
          ],
          [
            28.6028,
            38.5781
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW83"
      },
      geometry: {
        coordinates: [
          [
            30.7944,
            36.9206
          ],
          [
            31.3578,
            36.6989
          ],
          [
            31.6808,
            36.5786
          ],
          [
            31.9222,
            36.4722
          ],
          [
            32.7239,
            36.1608
          ],
          [
            33.2833,
            35.9333
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW84"
      },
      geometry: {
        coordinates: [
          [
            35.2103,
            36.9406
          ],
          [
            34.5206,
            36.6256
          ],
          [
            33.7544,
            36.2611
          ],
          [
            33.2869,
            36.0364
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW86"
      },
      geometry: {
        coordinates: [
          [
            35.0769,
            42.0222
          ],
          [
            35.1661,
            41.8322
          ],
          [
            35.9664,
            41.5086
          ],
          [
            36.5489,
            41.2656
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW87"
      },
      geometry: {
        coordinates: [
          [
            28.6028,
            38.5781
          ],
          [
            28.7033,
            37.7217
          ],
          [
            28.7189,
            37.5003
          ],
          [
            28.7328,
            37.3572
          ],
          [
            28.7822,
            36.6894
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW88"
      },
      geometry: {
        coordinates: [
          [
            39.7956,
            40.9953
          ],
          [
            39.6922,
            40.5017
          ],
          [
            39.6764,
            40.4181
          ],
          [
            39.6083,
            40.0917
          ],
          [
            39.5778,
            39.9475
          ],
          [
            39.5292,
            39.7083
          ],
          [
            39.4681,
            39.5117
          ],
          [
            39.3544,
            39.1381
          ],
          [
            39.2994,
            38.9564
          ],
          [
            39.2239,
            38.7081
          ],
          [
            38.9978,
            37.8267
          ],
          [
            38.9047,
            37.4581
          ],
          [
            38.8447,
            37.0939
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW89"
      },
      geometry: {
        coordinates: [
          [
            27.0072,
            38.3172
          ],
          [
            27.7764,
            37.8956
          ],
          [
            28.5,
            37.4897
          ],
          [
            28.7328,
            37.3572
          ],
          [
            29.2497,
            37.2519
          ],
          [
            29.4011,
            37.2206
          ],
          [
            29.6383,
            37.1711
          ],
          [
            29.9228,
            37.1108
          ],
          [
            30.7944,
            36.9206
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW90"
      },
      geometry: {
        coordinates: [
          [
            32.4608,
            41.8722
          ],
          [
            33.7061,
            41.9514
          ],
          [
            34.8575,
            42.0119
          ],
          [
            35.0769,
            42.0222
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW91"
      },
      geometry: {
        coordinates: [
          [
            28.8106,
            40.9614
          ],
          [
            29.1542,
            39.7889
          ],
          [
            29.2686,
            39.3972
          ],
          [
            29.4703,
            38.6656
          ],
          [
            29.7042,
            37.7897
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW92"
      },
      geometry: {
        coordinates: [
          [
            27.3653,
            40.2842
          ],
          [
            27.0081,
            40.2283
          ],
          [
            26.4275,
            40.1353
          ],
          [
            26.1881,
            40.1567
          ],
          [
            25.9236,
            40.1797
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW94"
      },
      geometry: {
        coordinates: [
          [
            41.2069,
            39.9567
          ],
          [
            41.7358,
            39.8697
          ],
          [
            42.7083,
            39.7025
          ],
          [
            43.0269,
            39.6458
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW95"
      },
      geometry: {
        coordinates: [
          [
            29.7042,
            37.7897
          ],
          [
            29.2436,
            37.5886
          ],
          [
            29.005,
            37.4808
          ],
          [
            28.7328,
            37.3572
          ],
          [
            28.4714,
            37.2394
          ],
          [
            28.2853,
            37.1547
          ],
          [
            28.2778,
            37.1514
          ],
          [
            28.0911,
            37.0656
          ],
          [
            27.6814,
            37.2469
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW96"
      },
      geometry: {
        coordinates: [
          [
            35.0769,
            42.0222
          ],
          [
            35.4131,
            42.1514
          ],
          [
            36.9147,
            42.7089
          ]
        ],
        type: "LineString"
      }
    },
    {
      type: "Feature",
      properties: {
        kind: "airway",
        name: "UW99"
      },
      geometry: {
        coordinates: [
          [
            36.5489,
            41.2656
          ],
          [
            36.6711,
            41.7583
          ],
          [
            36.7333,
            42.0042
          ],
          [
            36.7961,
            42.2497
          ],
          [
            36.9147,
            42.7089
          ]
        ],
        type: "LineString"
      }
    }
  ]
};

// apps/simulator/src/WebSocketService.ts
var import_eventsShim = __toESM(require_eventsShim());
var WebSocketService = class {
  // Add messageCallback property
  constructor() {
    this.messageCallback = null;
    this.eventEmitter = new import_eventsShim.EventEmitter();
    this.socket = new WebSocket("wss://racemusaircrafttrafficgenerator.azurewebsites.net/ws");
    this.socket.onopen = () => {
      this.eventEmitter.emit("open");
    };
    this.socket.onmessage = (event) => {
      this.handleMessage(event.data);
    };
    this.socket.onerror = (error) => {
      console.error("WebSocket error:", error);
      this.eventEmitter.emit("error", error);
    };
  }
  sendMessage(message) {
    if (this.socket.readyState === WebSocket.OPEN) {
      this.socket.send(message);
    } else {
      console.error("WebSocket connection not open.");
    }
  }
  on(event, listener) {
    this.eventEmitter.on(event, listener);
  }
  // Implement onMessage method to register callback for incoming messages
  onMessage(callback) {
    this.messageCallback = callback;
  }
  handleMessage(data) {
    if (this.messageCallback) {
      this.messageCallback(data);
    }
  }
};
var WebSocketService_default = WebSocketService;

// apps/simulator/src/main.ts
var MyElement = class extends s3 {
  constructor() {
    super();
    this.webSocketService = new WebSocketService_default();
    this.webSocketService.onMessage(this.handleWebSocketMessage.bind(this));
  }
  handleWebSocketMessage(data) {
    this.flights = { ...JSON.parse(data) };
    this.requestUpdate();
  }
  startSendingData() {
    fetch("https://racemusaircrafttrafficgenerator.azurewebsites.net/send").then((response) => {
      if (!response.ok) {
        if (response.status === 403) {
          window.alert("Backend service https://racemusaircrafttrafficgenerator.azurewebsites.net has been blocked by your firewall, please contact your IT service to whitelist the URL or connect from another network.");
        } else {
          throw new Error(`Failed to fetch data: ${response.status} ${response.statusText}`);
        }
      }
    }).catch((error) => {
      console.error("Error fetching data:", error);
    });
  }
  connectedCallback() {
    super.connectedCallback();
    this.startSendingData();
  }
  render() {
    return x`
      <section style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; font-size: 1vmin;">
        <ats-simulator-map .geojson=${sectors_default} .beacons=${beacons_default} .flights=${this.flights?.aircrafts} .airwaypoints=${airwaypoints_default} .airports=${airports_default} .airways=${airways_default}></ats-simulator-map>
      </section>
    `;
  }
};
MyElement = __decorateClass([
  t3("ats-simulator")
], MyElement);
export {
  MyElement
};
/*! Bundled license information:

lodash/lodash.js:
  (**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   *)

@lit-labs/ssr-dom-shim/lib/element-internals.js:
  (**
   * @license
   * Copyright 2023 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit-labs/ssr-dom-shim/index.js:
  (**
   * @license
   * Copyright 2019 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/node/css-tag.js:
  (**
   * @license
   * Copyright 2019 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/node/lit-html.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-element/lit-element.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/node/is-server.js:
  (**
   * @license
   * Copyright 2022 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/node/decorators/custom-element.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/node/decorators/property.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/node/decorators/state.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/node/decorators/event-options.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/node/decorators/base.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/node/decorators/query.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/node/decorators/query-all.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/node/decorators/query-async.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/node/decorators/query-assigned-elements.js:
  (**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/node/decorators/query-assigned-nodes.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)
*/
//# sourceMappingURL=main.js.map
